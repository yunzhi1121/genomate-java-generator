/**
 * generated by Xtext 2.38.0
 */
package com.yunzhi.genoMate.impl;

import com.yunzhi.genoMate.GenoMatePackage;
import com.yunzhi.genoMate.Type;
import com.yunzhi.genoMate.TypeEqualityCondition;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Type Equality Condition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.yunzhi.genoMate.impl.TypeEqualityConditionImpl#getIsEqual <em>Is Equal</em>}</li>
 *   <li>{@link com.yunzhi.genoMate.impl.TypeEqualityConditionImpl#getIsNotEqual <em>Is Not Equal</em>}</li>
 *   <li>{@link com.yunzhi.genoMate.impl.TypeEqualityConditionImpl#getType <em>Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TypeEqualityConditionImpl extends MinimalEObjectImpl.Container implements TypeEqualityCondition
{
  /**
   * The default value of the '{@link #getIsEqual() <em>Is Equal</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIsEqual()
   * @generated
   * @ordered
   */
  protected static final String IS_EQUAL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIsEqual() <em>Is Equal</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIsEqual()
   * @generated
   * @ordered
   */
  protected String isEqual = IS_EQUAL_EDEFAULT;

  /**
   * The default value of the '{@link #getIsNotEqual() <em>Is Not Equal</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIsNotEqual()
   * @generated
   * @ordered
   */
  protected static final String IS_NOT_EQUAL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIsNotEqual() <em>Is Not Equal</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIsNotEqual()
   * @generated
   * @ordered
   */
  protected String isNotEqual = IS_NOT_EQUAL_EDEFAULT;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected Type type;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TypeEqualityConditionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GenoMatePackage.Literals.TYPE_EQUALITY_CONDITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getIsEqual()
  {
    return isEqual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIsEqual(String newIsEqual)
  {
    String oldIsEqual = isEqual;
    isEqual = newIsEqual;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GenoMatePackage.TYPE_EQUALITY_CONDITION__IS_EQUAL, oldIsEqual, isEqual));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getIsNotEqual()
  {
    return isNotEqual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIsNotEqual(String newIsNotEqual)
  {
    String oldIsNotEqual = isNotEqual;
    isNotEqual = newIsNotEqual;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GenoMatePackage.TYPE_EQUALITY_CONDITION__IS_NOT_EQUAL, oldIsNotEqual, isNotEqual));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetType(Type newType, NotificationChain msgs)
  {
    Type oldType = type;
    type = newType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GenoMatePackage.TYPE_EQUALITY_CONDITION__TYPE, oldType, newType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(Type newType)
  {
    if (newType != type)
    {
      NotificationChain msgs = null;
      if (type != null)
        msgs = ((InternalEObject)type).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GenoMatePackage.TYPE_EQUALITY_CONDITION__TYPE, null, msgs);
      if (newType != null)
        msgs = ((InternalEObject)newType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GenoMatePackage.TYPE_EQUALITY_CONDITION__TYPE, null, msgs);
      msgs = basicSetType(newType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GenoMatePackage.TYPE_EQUALITY_CONDITION__TYPE, newType, newType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GenoMatePackage.TYPE_EQUALITY_CONDITION__TYPE:
        return basicSetType(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GenoMatePackage.TYPE_EQUALITY_CONDITION__IS_EQUAL:
        return getIsEqual();
      case GenoMatePackage.TYPE_EQUALITY_CONDITION__IS_NOT_EQUAL:
        return getIsNotEqual();
      case GenoMatePackage.TYPE_EQUALITY_CONDITION__TYPE:
        return getType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GenoMatePackage.TYPE_EQUALITY_CONDITION__IS_EQUAL:
        setIsEqual((String)newValue);
        return;
      case GenoMatePackage.TYPE_EQUALITY_CONDITION__IS_NOT_EQUAL:
        setIsNotEqual((String)newValue);
        return;
      case GenoMatePackage.TYPE_EQUALITY_CONDITION__TYPE:
        setType((Type)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GenoMatePackage.TYPE_EQUALITY_CONDITION__IS_EQUAL:
        setIsEqual(IS_EQUAL_EDEFAULT);
        return;
      case GenoMatePackage.TYPE_EQUALITY_CONDITION__IS_NOT_EQUAL:
        setIsNotEqual(IS_NOT_EQUAL_EDEFAULT);
        return;
      case GenoMatePackage.TYPE_EQUALITY_CONDITION__TYPE:
        setType((Type)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GenoMatePackage.TYPE_EQUALITY_CONDITION__IS_EQUAL:
        return IS_EQUAL_EDEFAULT == null ? isEqual != null : !IS_EQUAL_EDEFAULT.equals(isEqual);
      case GenoMatePackage.TYPE_EQUALITY_CONDITION__IS_NOT_EQUAL:
        return IS_NOT_EQUAL_EDEFAULT == null ? isNotEqual != null : !IS_NOT_EQUAL_EDEFAULT.equals(isNotEqual);
      case GenoMatePackage.TYPE_EQUALITY_CONDITION__TYPE:
        return type != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (isEqual: ");
    result.append(isEqual);
    result.append(", isNotEqual: ");
    result.append(isNotEqual);
    result.append(')');
    return result.toString();
  }

} //TypeEqualityConditionImpl
