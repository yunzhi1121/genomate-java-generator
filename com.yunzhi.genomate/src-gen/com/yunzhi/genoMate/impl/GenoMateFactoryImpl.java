/**
 * generated by Xtext 2.38.0
 */
package com.yunzhi.genoMate.impl;

import com.yunzhi.genoMate.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class GenoMateFactoryImpl extends EFactoryImpl implements GenoMateFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static GenoMateFactory init()
  {
    try
    {
      GenoMateFactory theGenoMateFactory = (GenoMateFactory)EPackage.Registry.INSTANCE.getEFactory(GenoMatePackage.eNS_URI);
      if (theGenoMateFactory != null)
      {
        return theGenoMateFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new GenoMateFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GenoMateFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case GenoMatePackage.GENO_MATE: return createGenoMate();
      case GenoMatePackage.GLOBAL_CONFIG: return createGlobalConfig();
      case GenoMatePackage.MODEL: return createModel();
      case GenoMatePackage.FIELD: return createField();
      case GenoMatePackage.LOMBOK_ANNOTATION: return createLombokAnnotation();
      case GenoMatePackage.MYBATIS_PLUS_MODEL_ANNOTATION: return createMybatisPlusModelAnnotation();
      case GenoMatePackage.MYBATIS_PLUS_FIELD_ANNOTATION: return createMybatisPlusFieldAnnotation();
      case GenoMatePackage.BEAN_VALIDATION_ANNOTATION: return createBeanValidationAnnotation();
      case GenoMatePackage.JACKSON_ANNOTATION: return createJacksonAnnotation();
      case GenoMatePackage.ANNOTATION_PARAMETERS: return createAnnotationParameters();
      case GenoMatePackage.PARAMETER: return createParameter();
      case GenoMatePackage.GENERATE_SECTION: return createGenerateSection();
      case GenoMatePackage.GENERATION_RULE: return createGenerationRule();
      case GenoMatePackage.PO_RULE: return createPoRule();
      case GenoMatePackage.DTO_RULE: return createDtoRule();
      case GenoMatePackage.VO_RULE: return createVoRule();
      case GenoMatePackage.DTO_DEFINITION: return createDtoDefinition();
      case GenoMatePackage.VO_DEFINITION: return createVoDefinition();
      case GenoMatePackage.FIELD_ANNOTATION: return createFieldAnnotation();
      case GenoMatePackage.FIELD_VALIDATION_BLOCK: return createFieldValidationBlock();
      case GenoMatePackage.SINGLE_ACTION: return createSingleAction();
      case GenoMatePackage.LOCAL_LOOP_ACTION: return createLocalLoopAction();
      case GenoMatePackage.GLOBAL_ACTION: return createGlobalAction();
      case GenoMatePackage.LOCAL_ACTION: return createLocalAction();
      case GenoMatePackage.TYPE_CONDITION: return createTypeCondition();
      case GenoMatePackage.OR_TYPE_CONDITION: return createOrTypeCondition();
      case GenoMatePackage.AND_TYPE_CONDITION: return createAndTypeCondition();
      case GenoMatePackage.TYPE_EQUALITY_CONDITION: return createTypeEqualityCondition();
      case GenoMatePackage.VARIABLE_DECLARATION: return createVariableDeclaration();
      case GenoMatePackage.PO_ADD_FIELD: return createPoAddField();
      case GenoMatePackage.DTO_ADD_FIELD: return createDtoAddField();
      case GenoMatePackage.VO_ADD_FIELD: return createVoAddField();
      case GenoMatePackage.EXCLUSIONS: return createExclusions();
      case GenoMatePackage.DTO_VALIDATION: return createDtoValidation();
      case GenoMatePackage.VO_JACKSON: return createVoJackson();
      case GenoMatePackage.PROPERTY_DECLARATION: return createPropertyDeclaration();
      case GenoMatePackage.MAPPING: return createMapping();
      case GenoMatePackage.MODEL_TO_VO_MAPPING: return createModelToVOMapping();
      case GenoMatePackage.DTO_TO_MODEL_MAPPING: return createDTOToModelMapping();
      case GenoMatePackage.MAPPING_RULE: return createMappingRule();
      case GenoMatePackage.TYPE: return createType();
      case GenoMatePackage.SIMPLE_TYPE: return createSimpleType();
      case GenoMatePackage.NORMAL_TYPE: return createNormalType();
      case GenoMatePackage.GENERIC_DATA_TYPE: return createGenericDataType();
      case GenoMatePackage.ARRAY_TYPE: return createArrayType();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case GenoMatePackage.BEAN_VALIDATION_TYPE:
        return createBeanValidationTypeFromString(eDataType, initialValue);
      case GenoMatePackage.MYBATIS_PLUS_MODEL_TYPE:
        return createMybatisPlusModelTypeFromString(eDataType, initialValue);
      case GenoMatePackage.MYBATIS_PLUS_FIELD_TYPE:
        return createMybatisPlusFieldTypeFromString(eDataType, initialValue);
      case GenoMatePackage.JACKSON_TYPE:
        return createJacksonTypeFromString(eDataType, initialValue);
      case GenoMatePackage.LOMBOK_TYPE:
        return createLombokTypeFromString(eDataType, initialValue);
      case GenoMatePackage.BUILT_IN_TYPE:
        return createBuiltInTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case GenoMatePackage.BEAN_VALIDATION_TYPE:
        return convertBeanValidationTypeToString(eDataType, instanceValue);
      case GenoMatePackage.MYBATIS_PLUS_MODEL_TYPE:
        return convertMybatisPlusModelTypeToString(eDataType, instanceValue);
      case GenoMatePackage.MYBATIS_PLUS_FIELD_TYPE:
        return convertMybatisPlusFieldTypeToString(eDataType, instanceValue);
      case GenoMatePackage.JACKSON_TYPE:
        return convertJacksonTypeToString(eDataType, instanceValue);
      case GenoMatePackage.LOMBOK_TYPE:
        return convertLombokTypeToString(eDataType, instanceValue);
      case GenoMatePackage.BUILT_IN_TYPE:
        return convertBuiltInTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GenoMate createGenoMate()
  {
    GenoMateImpl genoMate = new GenoMateImpl();
    return genoMate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GlobalConfig createGlobalConfig()
  {
    GlobalConfigImpl globalConfig = new GlobalConfigImpl();
    return globalConfig;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Field createField()
  {
    FieldImpl field = new FieldImpl();
    return field;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LombokAnnotation createLombokAnnotation()
  {
    LombokAnnotationImpl lombokAnnotation = new LombokAnnotationImpl();
    return lombokAnnotation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MybatisPlusModelAnnotation createMybatisPlusModelAnnotation()
  {
    MybatisPlusModelAnnotationImpl mybatisPlusModelAnnotation = new MybatisPlusModelAnnotationImpl();
    return mybatisPlusModelAnnotation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MybatisPlusFieldAnnotation createMybatisPlusFieldAnnotation()
  {
    MybatisPlusFieldAnnotationImpl mybatisPlusFieldAnnotation = new MybatisPlusFieldAnnotationImpl();
    return mybatisPlusFieldAnnotation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BeanValidationAnnotation createBeanValidationAnnotation()
  {
    BeanValidationAnnotationImpl beanValidationAnnotation = new BeanValidationAnnotationImpl();
    return beanValidationAnnotation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JacksonAnnotation createJacksonAnnotation()
  {
    JacksonAnnotationImpl jacksonAnnotation = new JacksonAnnotationImpl();
    return jacksonAnnotation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AnnotationParameters createAnnotationParameters()
  {
    AnnotationParametersImpl annotationParameters = new AnnotationParametersImpl();
    return annotationParameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GenerateSection createGenerateSection()
  {
    GenerateSectionImpl generateSection = new GenerateSectionImpl();
    return generateSection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GenerationRule createGenerationRule()
  {
    GenerationRuleImpl generationRule = new GenerationRuleImpl();
    return generationRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PoRule createPoRule()
  {
    PoRuleImpl poRule = new PoRuleImpl();
    return poRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DtoRule createDtoRule()
  {
    DtoRuleImpl dtoRule = new DtoRuleImpl();
    return dtoRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VoRule createVoRule()
  {
    VoRuleImpl voRule = new VoRuleImpl();
    return voRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DtoDefinition createDtoDefinition()
  {
    DtoDefinitionImpl dtoDefinition = new DtoDefinitionImpl();
    return dtoDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VoDefinition createVoDefinition()
  {
    VoDefinitionImpl voDefinition = new VoDefinitionImpl();
    return voDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FieldAnnotation createFieldAnnotation()
  {
    FieldAnnotationImpl fieldAnnotation = new FieldAnnotationImpl();
    return fieldAnnotation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FieldValidationBlock createFieldValidationBlock()
  {
    FieldValidationBlockImpl fieldValidationBlock = new FieldValidationBlockImpl();
    return fieldValidationBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SingleAction createSingleAction()
  {
    SingleActionImpl singleAction = new SingleActionImpl();
    return singleAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LocalLoopAction createLocalLoopAction()
  {
    LocalLoopActionImpl localLoopAction = new LocalLoopActionImpl();
    return localLoopAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GlobalAction createGlobalAction()
  {
    GlobalActionImpl globalAction = new GlobalActionImpl();
    return globalAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LocalAction createLocalAction()
  {
    LocalActionImpl localAction = new LocalActionImpl();
    return localAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeCondition createTypeCondition()
  {
    TypeConditionImpl typeCondition = new TypeConditionImpl();
    return typeCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OrTypeCondition createOrTypeCondition()
  {
    OrTypeConditionImpl orTypeCondition = new OrTypeConditionImpl();
    return orTypeCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AndTypeCondition createAndTypeCondition()
  {
    AndTypeConditionImpl andTypeCondition = new AndTypeConditionImpl();
    return andTypeCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeEqualityCondition createTypeEqualityCondition()
  {
    TypeEqualityConditionImpl typeEqualityCondition = new TypeEqualityConditionImpl();
    return typeEqualityCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDeclaration createVariableDeclaration()
  {
    VariableDeclarationImpl variableDeclaration = new VariableDeclarationImpl();
    return variableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PoAddField createPoAddField()
  {
    PoAddFieldImpl poAddField = new PoAddFieldImpl();
    return poAddField;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DtoAddField createDtoAddField()
  {
    DtoAddFieldImpl dtoAddField = new DtoAddFieldImpl();
    return dtoAddField;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VoAddField createVoAddField()
  {
    VoAddFieldImpl voAddField = new VoAddFieldImpl();
    return voAddField;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exclusions createExclusions()
  {
    ExclusionsImpl exclusions = new ExclusionsImpl();
    return exclusions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DtoValidation createDtoValidation()
  {
    DtoValidationImpl dtoValidation = new DtoValidationImpl();
    return dtoValidation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VoJackson createVoJackson()
  {
    VoJacksonImpl voJackson = new VoJacksonImpl();
    return voJackson;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyDeclaration createPropertyDeclaration()
  {
    PropertyDeclarationImpl propertyDeclaration = new PropertyDeclarationImpl();
    return propertyDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Mapping createMapping()
  {
    MappingImpl mapping = new MappingImpl();
    return mapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ModelToVOMapping createModelToVOMapping()
  {
    ModelToVOMappingImpl modelToVOMapping = new ModelToVOMappingImpl();
    return modelToVOMapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DTOToModelMapping createDTOToModelMapping()
  {
    DTOToModelMappingImpl dtoToModelMapping = new DTOToModelMappingImpl();
    return dtoToModelMapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MappingRule createMappingRule()
  {
    MappingRuleImpl mappingRule = new MappingRuleImpl();
    return mappingRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleType createSimpleType()
  {
    SimpleTypeImpl simpleType = new SimpleTypeImpl();
    return simpleType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NormalType createNormalType()
  {
    NormalTypeImpl normalType = new NormalTypeImpl();
    return normalType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GenericDataType createGenericDataType()
  {
    GenericDataTypeImpl genericDataType = new GenericDataTypeImpl();
    return genericDataType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayType createArrayType()
  {
    ArrayTypeImpl arrayType = new ArrayTypeImpl();
    return arrayType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BeanValidationType createBeanValidationTypeFromString(EDataType eDataType, String initialValue)
  {
    BeanValidationType result = BeanValidationType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBeanValidationTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MybatisPlusModelType createMybatisPlusModelTypeFromString(EDataType eDataType, String initialValue)
  {
    MybatisPlusModelType result = MybatisPlusModelType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMybatisPlusModelTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MybatisPlusFieldType createMybatisPlusFieldTypeFromString(EDataType eDataType, String initialValue)
  {
    MybatisPlusFieldType result = MybatisPlusFieldType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMybatisPlusFieldTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JacksonType createJacksonTypeFromString(EDataType eDataType, String initialValue)
  {
    JacksonType result = JacksonType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertJacksonTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LombokType createLombokTypeFromString(EDataType eDataType, String initialValue)
  {
    LombokType result = LombokType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertLombokTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BuiltInType createBuiltInTypeFromString(EDataType eDataType, String initialValue)
  {
    BuiltInType result = BuiltInType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBuiltInTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GenoMatePackage getGenoMatePackage()
  {
    return (GenoMatePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static GenoMatePackage getPackage()
  {
    return GenoMatePackage.eINSTANCE;
  }

} //GenoMateFactoryImpl
