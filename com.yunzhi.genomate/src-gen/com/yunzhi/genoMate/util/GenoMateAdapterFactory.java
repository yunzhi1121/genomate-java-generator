/**
 * generated by Xtext 2.38.0
 */
package com.yunzhi.genoMate.util;

import com.yunzhi.genoMate.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.yunzhi.genoMate.GenoMatePackage
 * @generated
 */
public class GenoMateAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static GenoMatePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GenoMateAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = GenoMatePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GenoMateSwitch<Adapter> modelSwitch =
    new GenoMateSwitch<Adapter>()
    {
      @Override
      public Adapter caseGenoMate(GenoMate object)
      {
        return createGenoMateAdapter();
      }
      @Override
      public Adapter caseGlobalConfig(GlobalConfig object)
      {
        return createGlobalConfigAdapter();
      }
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseField(Field object)
      {
        return createFieldAdapter();
      }
      @Override
      public Adapter caseLombokAnnotation(LombokAnnotation object)
      {
        return createLombokAnnotationAdapter();
      }
      @Override
      public Adapter caseMybatisPlusModelAnnotation(MybatisPlusModelAnnotation object)
      {
        return createMybatisPlusModelAnnotationAdapter();
      }
      @Override
      public Adapter caseMybatisPlusFieldAnnotation(MybatisPlusFieldAnnotation object)
      {
        return createMybatisPlusFieldAnnotationAdapter();
      }
      @Override
      public Adapter caseBeanValidationAnnotation(BeanValidationAnnotation object)
      {
        return createBeanValidationAnnotationAdapter();
      }
      @Override
      public Adapter caseJacksonAnnotation(JacksonAnnotation object)
      {
        return createJacksonAnnotationAdapter();
      }
      @Override
      public Adapter caseAnnotationParameters(AnnotationParameters object)
      {
        return createAnnotationParametersAdapter();
      }
      @Override
      public Adapter caseParameter(Parameter object)
      {
        return createParameterAdapter();
      }
      @Override
      public Adapter caseGenerateSection(GenerateSection object)
      {
        return createGenerateSectionAdapter();
      }
      @Override
      public Adapter caseGenerationRule(GenerationRule object)
      {
        return createGenerationRuleAdapter();
      }
      @Override
      public Adapter casePoRule(PoRule object)
      {
        return createPoRuleAdapter();
      }
      @Override
      public Adapter caseDtoRule(DtoRule object)
      {
        return createDtoRuleAdapter();
      }
      @Override
      public Adapter caseVoRule(VoRule object)
      {
        return createVoRuleAdapter();
      }
      @Override
      public Adapter caseDtoDefinition(DtoDefinition object)
      {
        return createDtoDefinitionAdapter();
      }
      @Override
      public Adapter caseVoDefinition(VoDefinition object)
      {
        return createVoDefinitionAdapter();
      }
      @Override
      public Adapter caseFieldAnnotation(FieldAnnotation object)
      {
        return createFieldAnnotationAdapter();
      }
      @Override
      public Adapter caseFieldValidationBlock(FieldValidationBlock object)
      {
        return createFieldValidationBlockAdapter();
      }
      @Override
      public Adapter caseSingleAction(SingleAction object)
      {
        return createSingleActionAdapter();
      }
      @Override
      public Adapter caseLocalLoopAction(LocalLoopAction object)
      {
        return createLocalLoopActionAdapter();
      }
      @Override
      public Adapter caseGlobalAction(GlobalAction object)
      {
        return createGlobalActionAdapter();
      }
      @Override
      public Adapter caseLocalAction(LocalAction object)
      {
        return createLocalActionAdapter();
      }
      @Override
      public Adapter caseTypeCondition(TypeCondition object)
      {
        return createTypeConditionAdapter();
      }
      @Override
      public Adapter caseOrTypeCondition(OrTypeCondition object)
      {
        return createOrTypeConditionAdapter();
      }
      @Override
      public Adapter caseAndTypeCondition(AndTypeCondition object)
      {
        return createAndTypeConditionAdapter();
      }
      @Override
      public Adapter caseTypeEqualityCondition(TypeEqualityCondition object)
      {
        return createTypeEqualityConditionAdapter();
      }
      @Override
      public Adapter caseVariableDeclaration(VariableDeclaration object)
      {
        return createVariableDeclarationAdapter();
      }
      @Override
      public Adapter casePoAddField(PoAddField object)
      {
        return createPoAddFieldAdapter();
      }
      @Override
      public Adapter caseDtoAddField(DtoAddField object)
      {
        return createDtoAddFieldAdapter();
      }
      @Override
      public Adapter caseVoAddField(VoAddField object)
      {
        return createVoAddFieldAdapter();
      }
      @Override
      public Adapter caseExclusions(Exclusions object)
      {
        return createExclusionsAdapter();
      }
      @Override
      public Adapter caseDtoValidation(DtoValidation object)
      {
        return createDtoValidationAdapter();
      }
      @Override
      public Adapter caseVoJackson(VoJackson object)
      {
        return createVoJacksonAdapter();
      }
      @Override
      public Adapter casePropertyDeclaration(PropertyDeclaration object)
      {
        return createPropertyDeclarationAdapter();
      }
      @Override
      public Adapter caseMapping(Mapping object)
      {
        return createMappingAdapter();
      }
      @Override
      public Adapter caseModelToVOMapping(ModelToVOMapping object)
      {
        return createModelToVOMappingAdapter();
      }
      @Override
      public Adapter caseDTOToModelMapping(DTOToModelMapping object)
      {
        return createDTOToModelMappingAdapter();
      }
      @Override
      public Adapter caseMappingRule(MappingRule object)
      {
        return createMappingRuleAdapter();
      }
      @Override
      public Adapter caseType(Type object)
      {
        return createTypeAdapter();
      }
      @Override
      public Adapter caseSimpleType(SimpleType object)
      {
        return createSimpleTypeAdapter();
      }
      @Override
      public Adapter caseNormalType(NormalType object)
      {
        return createNormalTypeAdapter();
      }
      @Override
      public Adapter caseGenericDataType(GenericDataType object)
      {
        return createGenericDataTypeAdapter();
      }
      @Override
      public Adapter caseArrayType(ArrayType object)
      {
        return createArrayTypeAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.GenoMate <em>Geno Mate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.GenoMate
   * @generated
   */
  public Adapter createGenoMateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.GlobalConfig <em>Global Config</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.GlobalConfig
   * @generated
   */
  public Adapter createGlobalConfigAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.Field <em>Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.Field
   * @generated
   */
  public Adapter createFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.LombokAnnotation <em>Lombok Annotation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.LombokAnnotation
   * @generated
   */
  public Adapter createLombokAnnotationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.MybatisPlusModelAnnotation <em>Mybatis Plus Model Annotation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.MybatisPlusModelAnnotation
   * @generated
   */
  public Adapter createMybatisPlusModelAnnotationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.MybatisPlusFieldAnnotation <em>Mybatis Plus Field Annotation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.MybatisPlusFieldAnnotation
   * @generated
   */
  public Adapter createMybatisPlusFieldAnnotationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.BeanValidationAnnotation <em>Bean Validation Annotation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.BeanValidationAnnotation
   * @generated
   */
  public Adapter createBeanValidationAnnotationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.JacksonAnnotation <em>Jackson Annotation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.JacksonAnnotation
   * @generated
   */
  public Adapter createJacksonAnnotationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.AnnotationParameters <em>Annotation Parameters</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.AnnotationParameters
   * @generated
   */
  public Adapter createAnnotationParametersAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.Parameter <em>Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.Parameter
   * @generated
   */
  public Adapter createParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.GenerateSection <em>Generate Section</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.GenerateSection
   * @generated
   */
  public Adapter createGenerateSectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.GenerationRule <em>Generation Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.GenerationRule
   * @generated
   */
  public Adapter createGenerationRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.PoRule <em>Po Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.PoRule
   * @generated
   */
  public Adapter createPoRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.DtoRule <em>Dto Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.DtoRule
   * @generated
   */
  public Adapter createDtoRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.VoRule <em>Vo Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.VoRule
   * @generated
   */
  public Adapter createVoRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.DtoDefinition <em>Dto Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.DtoDefinition
   * @generated
   */
  public Adapter createDtoDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.VoDefinition <em>Vo Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.VoDefinition
   * @generated
   */
  public Adapter createVoDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.FieldAnnotation <em>Field Annotation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.FieldAnnotation
   * @generated
   */
  public Adapter createFieldAnnotationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.FieldValidationBlock <em>Field Validation Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.FieldValidationBlock
   * @generated
   */
  public Adapter createFieldValidationBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.SingleAction <em>Single Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.SingleAction
   * @generated
   */
  public Adapter createSingleActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.LocalLoopAction <em>Local Loop Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.LocalLoopAction
   * @generated
   */
  public Adapter createLocalLoopActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.GlobalAction <em>Global Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.GlobalAction
   * @generated
   */
  public Adapter createGlobalActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.LocalAction <em>Local Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.LocalAction
   * @generated
   */
  public Adapter createLocalActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.TypeCondition <em>Type Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.TypeCondition
   * @generated
   */
  public Adapter createTypeConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.OrTypeCondition <em>Or Type Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.OrTypeCondition
   * @generated
   */
  public Adapter createOrTypeConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.AndTypeCondition <em>And Type Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.AndTypeCondition
   * @generated
   */
  public Adapter createAndTypeConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.TypeEqualityCondition <em>Type Equality Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.TypeEqualityCondition
   * @generated
   */
  public Adapter createTypeEqualityConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.VariableDeclaration <em>Variable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.VariableDeclaration
   * @generated
   */
  public Adapter createVariableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.PoAddField <em>Po Add Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.PoAddField
   * @generated
   */
  public Adapter createPoAddFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.DtoAddField <em>Dto Add Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.DtoAddField
   * @generated
   */
  public Adapter createDtoAddFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.VoAddField <em>Vo Add Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.VoAddField
   * @generated
   */
  public Adapter createVoAddFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.Exclusions <em>Exclusions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.Exclusions
   * @generated
   */
  public Adapter createExclusionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.DtoValidation <em>Dto Validation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.DtoValidation
   * @generated
   */
  public Adapter createDtoValidationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.VoJackson <em>Vo Jackson</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.VoJackson
   * @generated
   */
  public Adapter createVoJacksonAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.PropertyDeclaration <em>Property Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.PropertyDeclaration
   * @generated
   */
  public Adapter createPropertyDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.Mapping <em>Mapping</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.Mapping
   * @generated
   */
  public Adapter createMappingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.ModelToVOMapping <em>Model To VO Mapping</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.ModelToVOMapping
   * @generated
   */
  public Adapter createModelToVOMappingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.DTOToModelMapping <em>DTO To Model Mapping</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.DTOToModelMapping
   * @generated
   */
  public Adapter createDTOToModelMappingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.MappingRule <em>Mapping Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.MappingRule
   * @generated
   */
  public Adapter createMappingRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.Type <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.Type
   * @generated
   */
  public Adapter createTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.SimpleType <em>Simple Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.SimpleType
   * @generated
   */
  public Adapter createSimpleTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.NormalType <em>Normal Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.NormalType
   * @generated
   */
  public Adapter createNormalTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.GenericDataType <em>Generic Data Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.GenericDataType
   * @generated
   */
  public Adapter createGenericDataTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.yunzhi.genoMate.ArrayType <em>Array Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.yunzhi.genoMate.ArrayType
   * @generated
   */
  public Adapter createArrayTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //GenoMateAdapterFactory
