/**
 * generated by Xtext 2.38.0
 */
package com.yunzhi.genoMate;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>Bean Validation Type</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see com.yunzhi.genoMate.GenoMatePackage#getBeanValidationType()
 * @model
 * @generated
 */
public enum BeanValidationType implements Enumerator
{
  /**
   * The '<em><b>Assert False</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #ASSERT_FALSE_VALUE
   * @generated
   * @ordered
   */
  ASSERT_FALSE(0, "AssertFalse", "AssertFalse"),

  /**
   * The '<em><b>Assert True</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #ASSERT_TRUE_VALUE
   * @generated
   * @ordered
   */
  ASSERT_TRUE(1, "AssertTrue", "AssertTrue"),

  /**
   * The '<em><b>Decimal Max</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #DECIMAL_MAX_VALUE
   * @generated
   * @ordered
   */
  DECIMAL_MAX(2, "DecimalMax", "DecimalMax"),

  /**
   * The '<em><b>Decimal Min</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #DECIMAL_MIN_VALUE
   * @generated
   * @ordered
   */
  DECIMAL_MIN(3, "DecimalMin", "DecimalMin"),

  /**
   * The '<em><b>Digits</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #DIGITS_VALUE
   * @generated
   * @ordered
   */
  DIGITS(4, "Digits", "Digits"),

  /**
   * The '<em><b>Email</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #EMAIL_VALUE
   * @generated
   * @ordered
   */
  EMAIL(5, "Email", "Email"),

  /**
   * The '<em><b>Future</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #FUTURE_VALUE
   * @generated
   * @ordered
   */
  FUTURE(6, "Future", "Future"),

  /**
   * The '<em><b>Future Or Present</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #FUTURE_OR_PRESENT_VALUE
   * @generated
   * @ordered
   */
  FUTURE_OR_PRESENT(7, "FutureOrPresent", "FutureOrPresent"),

  /**
   * The '<em><b>Max</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #MAX_VALUE
   * @generated
   * @ordered
   */
  MAX(8, "Max", "Max"),

  /**
   * The '<em><b>Min</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #MIN_VALUE
   * @generated
   * @ordered
   */
  MIN(9, "Min", "Min"),

  /**
   * The '<em><b>Negative</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #NEGATIVE_VALUE
   * @generated
   * @ordered
   */
  NEGATIVE(10, "Negative", "Negative"),

  /**
   * The '<em><b>Negative Or Zero</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #NEGATIVE_OR_ZERO_VALUE
   * @generated
   * @ordered
   */
  NEGATIVE_OR_ZERO(11, "NegativeOrZero", "NegativeOrZero"),

  /**
   * The '<em><b>Not Blank</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #NOT_BLANK_VALUE
   * @generated
   * @ordered
   */
  NOT_BLANK(12, "NotBlank", "NotBlank"),

  /**
   * The '<em><b>Not Empty</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #NOT_EMPTY_VALUE
   * @generated
   * @ordered
   */
  NOT_EMPTY(13, "NotEmpty", "NotEmpty"),

  /**
   * The '<em><b>Not Null</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #NOT_NULL_VALUE
   * @generated
   * @ordered
   */
  NOT_NULL(14, "NotNull", "NotNull"),

  /**
   * The '<em><b>Null</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #NULL_VALUE
   * @generated
   * @ordered
   */
  NULL(15, "Null", "Null"),

  /**
   * The '<em><b>Past</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #PAST_VALUE
   * @generated
   * @ordered
   */
  PAST(16, "Past", "Past"),

  /**
   * The '<em><b>Past Or Present</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #PAST_OR_PRESENT_VALUE
   * @generated
   * @ordered
   */
  PAST_OR_PRESENT(17, "PastOrPresent", "PastOrPresent"),

  /**
   * The '<em><b>Pattern</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #PATTERN_VALUE
   * @generated
   * @ordered
   */
  PATTERN(18, "Pattern", "Pattern"),

  /**
   * The '<em><b>Positive</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #POSITIVE_VALUE
   * @generated
   * @ordered
   */
  POSITIVE(19, "Positive", "Positive"),

  /**
   * The '<em><b>Positive Or Zero</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #POSITIVE_OR_ZERO_VALUE
   * @generated
   * @ordered
   */
  POSITIVE_OR_ZERO(20, "PositiveOrZero", "PositiveOrZero"),

  /**
   * The '<em><b>Size</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #SIZE_VALUE
   * @generated
   * @ordered
   */
  SIZE(21, "Size", "Size");

  /**
   * The '<em><b>Assert False</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #ASSERT_FALSE
   * @model name="AssertFalse"
   * @generated
   * @ordered
   */
  public static final int ASSERT_FALSE_VALUE = 0;

  /**
   * The '<em><b>Assert True</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #ASSERT_TRUE
   * @model name="AssertTrue"
   * @generated
   * @ordered
   */
  public static final int ASSERT_TRUE_VALUE = 1;

  /**
   * The '<em><b>Decimal Max</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #DECIMAL_MAX
   * @model name="DecimalMax"
   * @generated
   * @ordered
   */
  public static final int DECIMAL_MAX_VALUE = 2;

  /**
   * The '<em><b>Decimal Min</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #DECIMAL_MIN
   * @model name="DecimalMin"
   * @generated
   * @ordered
   */
  public static final int DECIMAL_MIN_VALUE = 3;

  /**
   * The '<em><b>Digits</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #DIGITS
   * @model name="Digits"
   * @generated
   * @ordered
   */
  public static final int DIGITS_VALUE = 4;

  /**
   * The '<em><b>Email</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #EMAIL
   * @model name="Email"
   * @generated
   * @ordered
   */
  public static final int EMAIL_VALUE = 5;

  /**
   * The '<em><b>Future</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #FUTURE
   * @model name="Future"
   * @generated
   * @ordered
   */
  public static final int FUTURE_VALUE = 6;

  /**
   * The '<em><b>Future Or Present</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #FUTURE_OR_PRESENT
   * @model name="FutureOrPresent"
   * @generated
   * @ordered
   */
  public static final int FUTURE_OR_PRESENT_VALUE = 7;

  /**
   * The '<em><b>Max</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #MAX
   * @model name="Max"
   * @generated
   * @ordered
   */
  public static final int MAX_VALUE = 8;

  /**
   * The '<em><b>Min</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #MIN
   * @model name="Min"
   * @generated
   * @ordered
   */
  public static final int MIN_VALUE = 9;

  /**
   * The '<em><b>Negative</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #NEGATIVE
   * @model name="Negative"
   * @generated
   * @ordered
   */
  public static final int NEGATIVE_VALUE = 10;

  /**
   * The '<em><b>Negative Or Zero</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #NEGATIVE_OR_ZERO
   * @model name="NegativeOrZero"
   * @generated
   * @ordered
   */
  public static final int NEGATIVE_OR_ZERO_VALUE = 11;

  /**
   * The '<em><b>Not Blank</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #NOT_BLANK
   * @model name="NotBlank"
   * @generated
   * @ordered
   */
  public static final int NOT_BLANK_VALUE = 12;

  /**
   * The '<em><b>Not Empty</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #NOT_EMPTY
   * @model name="NotEmpty"
   * @generated
   * @ordered
   */
  public static final int NOT_EMPTY_VALUE = 13;

  /**
   * The '<em><b>Not Null</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #NOT_NULL
   * @model name="NotNull"
   * @generated
   * @ordered
   */
  public static final int NOT_NULL_VALUE = 14;

  /**
   * The '<em><b>Null</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #NULL
   * @model name="Null"
   * @generated
   * @ordered
   */
  public static final int NULL_VALUE = 15;

  /**
   * The '<em><b>Past</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #PAST
   * @model name="Past"
   * @generated
   * @ordered
   */
  public static final int PAST_VALUE = 16;

  /**
   * The '<em><b>Past Or Present</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #PAST_OR_PRESENT
   * @model name="PastOrPresent"
   * @generated
   * @ordered
   */
  public static final int PAST_OR_PRESENT_VALUE = 17;

  /**
   * The '<em><b>Pattern</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #PATTERN
   * @model name="Pattern"
   * @generated
   * @ordered
   */
  public static final int PATTERN_VALUE = 18;

  /**
   * The '<em><b>Positive</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #POSITIVE
   * @model name="Positive"
   * @generated
   * @ordered
   */
  public static final int POSITIVE_VALUE = 19;

  /**
   * The '<em><b>Positive Or Zero</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #POSITIVE_OR_ZERO
   * @model name="PositiveOrZero"
   * @generated
   * @ordered
   */
  public static final int POSITIVE_OR_ZERO_VALUE = 20;

  /**
   * The '<em><b>Size</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #SIZE
   * @model name="Size"
   * @generated
   * @ordered
   */
  public static final int SIZE_VALUE = 21;

  /**
   * An array of all the '<em><b>Bean Validation Type</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final BeanValidationType[] VALUES_ARRAY =
    new BeanValidationType[]
    {
      ASSERT_FALSE,
      ASSERT_TRUE,
      DECIMAL_MAX,
      DECIMAL_MIN,
      DIGITS,
      EMAIL,
      FUTURE,
      FUTURE_OR_PRESENT,
      MAX,
      MIN,
      NEGATIVE,
      NEGATIVE_OR_ZERO,
      NOT_BLANK,
      NOT_EMPTY,
      NOT_NULL,
      NULL,
      PAST,
      PAST_OR_PRESENT,
      PATTERN,
      POSITIVE,
      POSITIVE_OR_ZERO,
      SIZE,
    };

  /**
   * A public read-only list of all the '<em><b>Bean Validation Type</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<BeanValidationType> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>Bean Validation Type</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static BeanValidationType get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      BeanValidationType result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Bean Validation Type</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static BeanValidationType getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      BeanValidationType result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Bean Validation Type</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static BeanValidationType get(int value)
  {
    switch (value)
    {
      case ASSERT_FALSE_VALUE: return ASSERT_FALSE;
      case ASSERT_TRUE_VALUE: return ASSERT_TRUE;
      case DECIMAL_MAX_VALUE: return DECIMAL_MAX;
      case DECIMAL_MIN_VALUE: return DECIMAL_MIN;
      case DIGITS_VALUE: return DIGITS;
      case EMAIL_VALUE: return EMAIL;
      case FUTURE_VALUE: return FUTURE;
      case FUTURE_OR_PRESENT_VALUE: return FUTURE_OR_PRESENT;
      case MAX_VALUE: return MAX;
      case MIN_VALUE: return MIN;
      case NEGATIVE_VALUE: return NEGATIVE;
      case NEGATIVE_OR_ZERO_VALUE: return NEGATIVE_OR_ZERO;
      case NOT_BLANK_VALUE: return NOT_BLANK;
      case NOT_EMPTY_VALUE: return NOT_EMPTY;
      case NOT_NULL_VALUE: return NOT_NULL;
      case NULL_VALUE: return NULL;
      case PAST_VALUE: return PAST;
      case PAST_OR_PRESENT_VALUE: return PAST_OR_PRESENT;
      case PATTERN_VALUE: return PATTERN;
      case POSITIVE_VALUE: return POSITIVE;
      case POSITIVE_OR_ZERO_VALUE: return POSITIVE_OR_ZERO;
      case SIZE_VALUE: return SIZE;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private BeanValidationType(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //BeanValidationType
