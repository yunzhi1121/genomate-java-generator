/*
 * generated by Xtext 2.38.0
 */
grammar InternalGenoMate;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.yunzhi.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.yunzhi.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.yunzhi.services.GenoMateGrammarAccess;

}

@parser::members {

 	private GenoMateGrammarAccess grammarAccess;

    public InternalGenoMateParser(TokenStream input, GenoMateGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "GenoMate";
   	}

   	@Override
   	protected GenoMateGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleGenoMate
entryRuleGenoMate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGenoMateRule()); }
	iv_ruleGenoMate=ruleGenoMate
	{ $current=$iv_ruleGenoMate.current; }
	EOF;

// Rule GenoMate
ruleGenoMate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getGenoMateAccess().getGlobalConfigGlobalConfigParserRuleCall_0_0());
				}
				lv_globalConfig_0_0=ruleGlobalConfig
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGenoMateRule());
					}
					set(
						$current,
						"globalConfig",
						lv_globalConfig_0_0,
						"com.yunzhi.GenoMate.GlobalConfig");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getGenoMateAccess().getModelModelParserRuleCall_1_0());
				}
				lv_model_1_0=ruleModel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGenoMateRule());
					}
					set(
						$current,
						"model",
						lv_model_1_0,
						"com.yunzhi.GenoMate.Model");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getGenoMateAccess().getGenerateSectionGenerateSectionParserRuleCall_2_0());
				}
				lv_generateSection_2_0=ruleGenerateSection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGenoMateRule());
					}
					set(
						$current,
						"generateSection",
						lv_generateSection_2_0,
						"com.yunzhi.GenoMate.GenerateSection");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getGenoMateAccess().getMappingsMappingParserRuleCall_3_0());
				}
				lv_mappings_3_0=ruleMapping
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGenoMateRule());
					}
					add(
						$current,
						"mappings",
						lv_mappings_3_0,
						"com.yunzhi.GenoMate.Mapping");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleGlobalConfig
entryRuleGlobalConfig returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGlobalConfigRule()); }
	iv_ruleGlobalConfig=ruleGlobalConfig
	{ $current=$iv_ruleGlobalConfig.current; }
	EOF;

// Rule GlobalConfig
ruleGlobalConfig returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='global'
		{
			newLeafNode(otherlv_0, grammarAccess.getGlobalConfigAccess().getGlobalKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getGlobalConfigAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='package:'
		{
			newLeafNode(otherlv_2, grammarAccess.getGlobalConfigAccess().getPackageKeyword_2());
		}
		(
			(
				lv_package_3_0=RULE_STRING
				{
					newLeafNode(lv_package_3_0, grammarAccess.getGlobalConfigAccess().getPackageSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGlobalConfigRule());
					}
					setWithLastConsumed(
						$current,
						"package",
						lv_package_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_4='defaultAnnotations'
			{
				newLeafNode(otherlv_4, grammarAccess.getGlobalConfigAccess().getDefaultAnnotationsKeyword_4_0());
			}
			otherlv_5='{'
			{
				newLeafNode(otherlv_5, grammarAccess.getGlobalConfigAccess().getLeftCurlyBracketKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getGlobalConfigAccess().getVarDefaultAnnotationsVariableDeclarationParserRuleCall_4_2_0());
					}
					lv_varDefaultAnnotations_6_0=ruleVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGlobalConfigRule());
						}
						add(
							$current,
							"varDefaultAnnotations",
							lv_varDefaultAnnotations_6_0,
							"com.yunzhi.GenoMate.VariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_7='}'
			{
				newLeafNode(otherlv_7, grammarAccess.getGlobalConfigAccess().getRightCurlyBracketKeyword_4_3());
			}
		)?
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getGlobalConfigAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='model'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelAccess().getModelKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"com.yunzhi.GenoMate.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getFieldsFieldParserRuleCall_3_0());
				}
				lv_fields_3_0=ruleField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"fields",
						lv_fields_3_0,
						"com.yunzhi.GenoMate.Field");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getModelAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleField
entryRuleField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	iv_ruleField=ruleField
	{ $current=$iv_ruleField.current; }
	EOF;

// Rule Field
ruleField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldAccess().getTypeTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFieldRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"com.yunzhi.GenoMate.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"com.yunzhi.GenoMate.ID");
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getFieldAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleLombokAnnotation
entryRuleLombokAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLombokAnnotationRule()); }
	iv_ruleLombokAnnotation=ruleLombokAnnotation
	{ $current=$iv_ruleLombokAnnotation.current; }
	EOF;

// Rule LombokAnnotation
ruleLombokAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@'
		{
			newLeafNode(otherlv_0, grammarAccess.getLombokAnnotationAccess().getCommercialAtKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLombokAnnotationAccess().getNameLombokTypeEnumRuleCall_1_0());
				}
				lv_name_1_0=ruleLombokType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLombokAnnotationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"com.yunzhi.GenoMate.LombokType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getLombokAnnotationAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLombokAnnotationAccess().getParametersAnnotationParametersParserRuleCall_2_1_0());
					}
					lv_parameters_3_0=ruleAnnotationParameters
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLombokAnnotationRule());
						}
						set(
							$current,
							"parameters",
							lv_parameters_3_0,
							"com.yunzhi.GenoMate.AnnotationParameters");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getLombokAnnotationAccess().getRightParenthesisKeyword_2_2());
			}
		)?
	)
;

// Entry rule entryRuleMybatisPlusModelAnnotation
entryRuleMybatisPlusModelAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMybatisPlusModelAnnotationRule()); }
	iv_ruleMybatisPlusModelAnnotation=ruleMybatisPlusModelAnnotation
	{ $current=$iv_ruleMybatisPlusModelAnnotation.current; }
	EOF;

// Rule MybatisPlusModelAnnotation
ruleMybatisPlusModelAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@'
		{
			newLeafNode(otherlv_0, grammarAccess.getMybatisPlusModelAnnotationAccess().getCommercialAtKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMybatisPlusModelAnnotationAccess().getNameMybatisPlusModelTypeEnumRuleCall_1_0());
				}
				lv_name_1_0=ruleMybatisPlusModelType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMybatisPlusModelAnnotationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"com.yunzhi.GenoMate.MybatisPlusModelType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getMybatisPlusModelAnnotationAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMybatisPlusModelAnnotationAccess().getParametersAnnotationParametersParserRuleCall_2_1_0());
					}
					lv_parameters_3_0=ruleAnnotationParameters
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMybatisPlusModelAnnotationRule());
						}
						set(
							$current,
							"parameters",
							lv_parameters_3_0,
							"com.yunzhi.GenoMate.AnnotationParameters");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getMybatisPlusModelAnnotationAccess().getRightParenthesisKeyword_2_2());
			}
		)?
	)
;

// Entry rule entryRuleMybatisPlusFieldAnnotation
entryRuleMybatisPlusFieldAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMybatisPlusFieldAnnotationRule()); }
	iv_ruleMybatisPlusFieldAnnotation=ruleMybatisPlusFieldAnnotation
	{ $current=$iv_ruleMybatisPlusFieldAnnotation.current; }
	EOF;

// Rule MybatisPlusFieldAnnotation
ruleMybatisPlusFieldAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@'
		{
			newLeafNode(otherlv_0, grammarAccess.getMybatisPlusFieldAnnotationAccess().getCommercialAtKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMybatisPlusFieldAnnotationAccess().getNameMybatisPlusFieldTypeEnumRuleCall_1_0());
				}
				lv_name_1_0=ruleMybatisPlusFieldType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMybatisPlusFieldAnnotationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"com.yunzhi.GenoMate.MybatisPlusFieldType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getMybatisPlusFieldAnnotationAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMybatisPlusFieldAnnotationAccess().getParametersAnnotationParametersParserRuleCall_2_1_0());
					}
					lv_parameters_3_0=ruleAnnotationParameters
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMybatisPlusFieldAnnotationRule());
						}
						set(
							$current,
							"parameters",
							lv_parameters_3_0,
							"com.yunzhi.GenoMate.AnnotationParameters");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getMybatisPlusFieldAnnotationAccess().getRightParenthesisKeyword_2_2());
			}
		)?
	)
;

// Entry rule entryRuleBeanValidationAnnotation
entryRuleBeanValidationAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBeanValidationAnnotationRule()); }
	iv_ruleBeanValidationAnnotation=ruleBeanValidationAnnotation
	{ $current=$iv_ruleBeanValidationAnnotation.current; }
	EOF;

// Rule BeanValidationAnnotation
ruleBeanValidationAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@'
		{
			newLeafNode(otherlv_0, grammarAccess.getBeanValidationAnnotationAccess().getCommercialAtKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBeanValidationAnnotationAccess().getNameBeanValidationTypeEnumRuleCall_1_0());
				}
				lv_name_1_0=ruleBeanValidationType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBeanValidationAnnotationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"com.yunzhi.GenoMate.BeanValidationType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getBeanValidationAnnotationAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBeanValidationAnnotationAccess().getParametersAnnotationParametersParserRuleCall_2_1_0());
					}
					lv_parameters_3_0=ruleAnnotationParameters
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBeanValidationAnnotationRule());
						}
						set(
							$current,
							"parameters",
							lv_parameters_3_0,
							"com.yunzhi.GenoMate.AnnotationParameters");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getBeanValidationAnnotationAccess().getRightParenthesisKeyword_2_2());
			}
		)?
	)
;

// Entry rule entryRuleJacksonAnnotation
entryRuleJacksonAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJacksonAnnotationRule()); }
	iv_ruleJacksonAnnotation=ruleJacksonAnnotation
	{ $current=$iv_ruleJacksonAnnotation.current; }
	EOF;

// Rule JacksonAnnotation
ruleJacksonAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@'
		{
			newLeafNode(otherlv_0, grammarAccess.getJacksonAnnotationAccess().getCommercialAtKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJacksonAnnotationAccess().getNameJacksonTypeEnumRuleCall_1_0());
				}
				lv_name_1_0=ruleJacksonType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJacksonAnnotationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"com.yunzhi.GenoMate.JacksonType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getJacksonAnnotationAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getJacksonAnnotationAccess().getParametersAnnotationParametersParserRuleCall_2_1_0());
					}
					lv_parameters_3_0=ruleAnnotationParameters
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJacksonAnnotationRule());
						}
						set(
							$current,
							"parameters",
							lv_parameters_3_0,
							"com.yunzhi.GenoMate.AnnotationParameters");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getJacksonAnnotationAccess().getRightParenthesisKeyword_2_2());
			}
		)?
	)
;

// Entry rule entryRuleAnnotationParameters
entryRuleAnnotationParameters returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnnotationParametersRule()); }
	iv_ruleAnnotationParameters=ruleAnnotationParameters
	{ $current=$iv_ruleAnnotationParameters.current; }
	EOF;

// Rule AnnotationParameters
ruleAnnotationParameters returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAnnotationParametersAccess().getAnnparametersParameterParserRuleCall_0_0());
				}
				lv_annparameters_0_0=ruleParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnnotationParametersRule());
					}
					add(
						$current,
						"annparameters",
						lv_annparameters_0_0,
						"com.yunzhi.GenoMate.Parameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getAnnotationParametersAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAnnotationParametersAccess().getParametersParameterParserRuleCall_1_1_0());
					}
					lv_parameters_2_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAnnotationParametersRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_2_0,
							"com.yunzhi.GenoMate.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_key_0_0=RULE_ID
				{
					newLeafNode(lv_key_0_0, grammarAccess.getParameterAccess().getKeyIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterRule());
					}
					setWithLastConsumed(
						$current,
						"key",
						lv_key_0_0,
						"com.yunzhi.GenoMate.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getParameterAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getValueLiteralParserRuleCall_2_0());
				}
				lv_value_2_0=ruleLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"com.yunzhi.GenoMate.Literal");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleGenerateSection
entryRuleGenerateSection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGenerateSectionRule()); }
	iv_ruleGenerateSection=ruleGenerateSection
	{ $current=$iv_ruleGenerateSection.current; }
	EOF;

// Rule GenerateSection
ruleGenerateSection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='generate'
		{
			newLeafNode(otherlv_0, grammarAccess.getGenerateSectionAccess().getGenerateKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getGenerateSectionAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGenerateSectionAccess().getRulesGenerationRuleParserRuleCall_2_0());
				}
				lv_rules_2_0=ruleGenerationRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGenerateSectionRule());
					}
					add(
						$current,
						"rules",
						lv_rules_2_0,
						"com.yunzhi.GenoMate.GenerationRule");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getGenerateSectionAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleGenerationRule
entryRuleGenerationRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGenerationRuleRule()); }
	iv_ruleGenerationRule=ruleGenerationRule
	{ $current=$iv_ruleGenerationRule.current; }
	EOF;

// Rule GenerationRule
ruleGenerationRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getGenerationRuleAccess().getPoRuleParserRuleCall_0());
		}
		this_PoRule_0=rulePoRule
		{
			$current = $this_PoRule_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGenerationRuleAccess().getDtoRuleParserRuleCall_1());
		}
		this_DtoRule_1=ruleDtoRule
		{
			$current = $this_DtoRule_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGenerationRuleAccess().getVoRuleParserRuleCall_2());
		}
		this_VoRule_2=ruleVoRule
		{
			$current = $this_VoRule_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePoRule
entryRulePoRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPoRuleRule()); }
	iv_rulePoRule=rulePoRule
	{ $current=$iv_rulePoRule.current; }
	EOF;

// Rule PoRule
rulePoRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='po'
		{
			newLeafNode(otherlv_0, grammarAccess.getPoRuleAccess().getPoKeyword_0());
		}
		otherlv_1='for'
		{
			newLeafNode(otherlv_1, grammarAccess.getPoRuleAccess().getForKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPoRuleRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getPoRuleAccess().getModelModelCrossReference_2_0());
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getPoRuleAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				lv_serializable_4_0='Serializable'
				{
					newLeafNode(lv_serializable_4_0, grammarAccess.getPoRuleAccess().getSerializableSerializableKeyword_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPoRuleRule());
					}
					setWithLastConsumed($current, "serializable", lv_serializable_4_0, "Serializable");
				}
			)
		)?
		(
			otherlv_5='lombok:'
			{
				newLeafNode(otherlv_5, grammarAccess.getPoRuleAccess().getLombokKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPoRuleAccess().getLombokAnnotationLombokAnnotationParserRuleCall_5_1_0());
					}
					lv_lombokAnnotation_6_0=ruleLombokAnnotation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPoRuleRule());
						}
						add(
							$current,
							"lombokAnnotation",
							lv_lombokAnnotation_6_0,
							"com.yunzhi.GenoMate.LombokAnnotation");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		(
			otherlv_7='mybatis-plus:'
			{
				newLeafNode(otherlv_7, grammarAccess.getPoRuleAccess().getMybatisPlusKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPoRuleAccess().getMybatisPlusModelAnnotationMybatisPlusModelAnnotationParserRuleCall_6_1_0());
					}
					lv_mybatisPlusModelAnnotation_8_0=ruleMybatisPlusModelAnnotation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPoRuleRule());
						}
						add(
							$current,
							"mybatisPlusModelAnnotation",
							lv_mybatisPlusModelAnnotation_8_0,
							"com.yunzhi.GenoMate.MybatisPlusModelAnnotation");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		(
			otherlv_9='fieldAnnotations'
			{
				newLeafNode(otherlv_9, grammarAccess.getPoRuleAccess().getFieldAnnotationsKeyword_7_0());
			}
			otherlv_10='{'
			{
				newLeafNode(otherlv_10, grammarAccess.getPoRuleAccess().getLeftCurlyBracketKeyword_7_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPoRuleAccess().getFieldAnnsFieldAnnotationParserRuleCall_7_2_0());
					}
					lv_fieldAnns_11_0=ruleFieldAnnotation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPoRuleRule());
						}
						add(
							$current,
							"fieldAnns",
							lv_fieldAnns_11_0,
							"com.yunzhi.GenoMate.FieldAnnotation");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_12='}'
			{
				newLeafNode(otherlv_12, grammarAccess.getPoRuleAccess().getRightCurlyBracketKeyword_7_3());
			}
		)?
		(
			otherlv_13='fieldAdd'
			{
				newLeafNode(otherlv_13, grammarAccess.getPoRuleAccess().getFieldAddKeyword_8_0());
			}
			otherlv_14='{'
			{
				newLeafNode(otherlv_14, grammarAccess.getPoRuleAccess().getLeftCurlyBracketKeyword_8_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPoRuleAccess().getAddFieldPoAddFieldParserRuleCall_8_2_0());
					}
					lv_addField_15_0=rulePoAddField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPoRuleRule());
						}
						add(
							$current,
							"addField",
							lv_addField_15_0,
							"com.yunzhi.GenoMate.PoAddField");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_16='}'
			{
				newLeafNode(otherlv_16, grammarAccess.getPoRuleAccess().getRightCurlyBracketKeyword_8_3());
			}
		)?
		otherlv_17='}'
		{
			newLeafNode(otherlv_17, grammarAccess.getPoRuleAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleDtoRule
entryRuleDtoRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDtoRuleRule()); }
	iv_ruleDtoRule=ruleDtoRule
	{ $current=$iv_ruleDtoRule.current; }
	EOF;

// Rule DtoRule
ruleDtoRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='dto'
		{
			newLeafNode(otherlv_0, grammarAccess.getDtoRuleAccess().getDtoKeyword_0());
		}
		otherlv_1='for'
		{
			newLeafNode(otherlv_1, grammarAccess.getDtoRuleAccess().getForKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDtoRuleRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getDtoRuleAccess().getModelModelCrossReference_2_0());
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getDtoRuleAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDtoRuleAccess().getDtosDtoDefinitionParserRuleCall_4_0());
				}
				lv_dtos_4_0=ruleDtoDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDtoRuleRule());
					}
					add(
						$current,
						"dtos",
						lv_dtos_4_0,
						"com.yunzhi.GenoMate.DtoDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getDtoRuleAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleVoRule
entryRuleVoRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVoRuleRule()); }
	iv_ruleVoRule=ruleVoRule
	{ $current=$iv_ruleVoRule.current; }
	EOF;

// Rule VoRule
ruleVoRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='vo'
		{
			newLeafNode(otherlv_0, grammarAccess.getVoRuleAccess().getVoKeyword_0());
		}
		otherlv_1='for'
		{
			newLeafNode(otherlv_1, grammarAccess.getVoRuleAccess().getForKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVoRuleRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getVoRuleAccess().getModelModelCrossReference_2_0());
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getVoRuleAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVoRuleAccess().getVosVoDefinitionParserRuleCall_4_0());
				}
				lv_vos_4_0=ruleVoDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVoRuleRule());
					}
					add(
						$current,
						"vos",
						lv_vos_4_0,
						"com.yunzhi.GenoMate.VoDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getVoRuleAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleDtoDefinition
entryRuleDtoDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDtoDefinitionRule()); }
	iv_ruleDtoDefinition=ruleDtoDefinition
	{ $current=$iv_ruleDtoDefinition.current; }
	EOF;

// Rule DtoDefinition
ruleDtoDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='dto'
		{
			newLeafNode(otherlv_0, grammarAccess.getDtoDefinitionAccess().getDtoKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDtoDefinitionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDtoDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"com.yunzhi.GenoMate.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getDtoDefinitionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				lv_serializable_3_0='Serializable'
				{
					newLeafNode(lv_serializable_3_0, grammarAccess.getDtoDefinitionAccess().getSerializableSerializableKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDtoDefinitionRule());
					}
					setWithLastConsumed($current, "serializable", lv_serializable_3_0, "Serializable");
				}
			)
		)?
		(
			otherlv_4='lombok:'
			{
				newLeafNode(otherlv_4, grammarAccess.getDtoDefinitionAccess().getLombokKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDtoDefinitionAccess().getLombokAnnotationLombokAnnotationParserRuleCall_4_1_0());
					}
					lv_lombokAnnotation_5_0=ruleLombokAnnotation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDtoDefinitionRule());
						}
						add(
							$current,
							"lombokAnnotation",
							lv_lombokAnnotation_5_0,
							"com.yunzhi.GenoMate.LombokAnnotation");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		(
			otherlv_6='fieldExclude'
			{
				newLeafNode(otherlv_6, grammarAccess.getDtoDefinitionAccess().getFieldExcludeKeyword_5_0());
			}
			otherlv_7='{'
			{
				newLeafNode(otherlv_7, grammarAccess.getDtoDefinitionAccess().getLeftCurlyBracketKeyword_5_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getDtoDefinitionAccess().getExclusionsExclusionsParserRuleCall_5_2_0_0());
						}
						lv_exclusions_8_0=ruleExclusions
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDtoDefinitionRule());
							}
							add(
								$current,
								"exclusions",
								lv_exclusions_8_0,
								"com.yunzhi.GenoMate.Exclusions");
							afterParserOrEnumRuleCall();
						}
					)
				)*
				    |
				(
					otherlv_9='excludeAll:'
					{
						newLeafNode(otherlv_9, grammarAccess.getDtoDefinitionAccess().getExcludeAllKeyword_5_2_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getDtoDefinitionAccess().getExcludeAllBOOLParserRuleCall_5_2_1_1_0());
							}
							lv_excludeAll_10_0=ruleBOOL
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getDtoDefinitionRule());
								}
								set(
									$current,
									"excludeAll",
									lv_excludeAll_10_0,
									"com.yunzhi.GenoMate.BOOL");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_11=';'
					{
						newLeafNode(otherlv_11, grammarAccess.getDtoDefinitionAccess().getSemicolonKeyword_5_2_1_2());
					}
				)
			)
			otherlv_12='}'
			{
				newLeafNode(otherlv_12, grammarAccess.getDtoDefinitionAccess().getRightCurlyBracketKeyword_5_3());
			}
		)?
		(
			otherlv_13='fieldValidation'
			{
				newLeafNode(otherlv_13, grammarAccess.getDtoDefinitionAccess().getFieldValidationKeyword_6_0());
			}
			otherlv_14='{'
			{
				newLeafNode(otherlv_14, grammarAccess.getDtoDefinitionAccess().getLeftCurlyBracketKeyword_6_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDtoDefinitionAccess().getFieldAnnotationsBlockFieldValidationBlockParserRuleCall_6_2_0());
					}
					lv_fieldAnnotationsBlock_15_0=ruleFieldValidationBlock
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDtoDefinitionRule());
						}
						set(
							$current,
							"fieldAnnotationsBlock",
							lv_fieldAnnotationsBlock_15_0,
							"com.yunzhi.GenoMate.FieldValidationBlock");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_16='}'
			{
				newLeafNode(otherlv_16, grammarAccess.getDtoDefinitionAccess().getRightCurlyBracketKeyword_6_3());
			}
		)?
		(
			otherlv_17='fieldAdd'
			{
				newLeafNode(otherlv_17, grammarAccess.getDtoDefinitionAccess().getFieldAddKeyword_7_0());
			}
			otherlv_18='{'
			{
				newLeafNode(otherlv_18, grammarAccess.getDtoDefinitionAccess().getLeftCurlyBracketKeyword_7_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDtoDefinitionAccess().getAddFieldDtoAddFieldParserRuleCall_7_2_0());
					}
					lv_addField_19_0=ruleDtoAddField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDtoDefinitionRule());
						}
						add(
							$current,
							"addField",
							lv_addField_19_0,
							"com.yunzhi.GenoMate.DtoAddField");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_20='}'
			{
				newLeafNode(otherlv_20, grammarAccess.getDtoDefinitionAccess().getRightCurlyBracketKeyword_7_3());
			}
		)?
		otherlv_21='}'
		{
			newLeafNode(otherlv_21, grammarAccess.getDtoDefinitionAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleVoDefinition
entryRuleVoDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVoDefinitionRule()); }
	iv_ruleVoDefinition=ruleVoDefinition
	{ $current=$iv_ruleVoDefinition.current; }
	EOF;

// Rule VoDefinition
ruleVoDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='vo'
		{
			newLeafNode(otherlv_0, grammarAccess.getVoDefinitionAccess().getVoKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVoDefinitionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVoDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"com.yunzhi.GenoMate.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getVoDefinitionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				lv_serializable_3_0='Serializable'
				{
					newLeafNode(lv_serializable_3_0, grammarAccess.getVoDefinitionAccess().getSerializableSerializableKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVoDefinitionRule());
					}
					setWithLastConsumed($current, "serializable", lv_serializable_3_0, "Serializable");
				}
			)
		)?
		(
			otherlv_4='lombok:'
			{
				newLeafNode(otherlv_4, grammarAccess.getVoDefinitionAccess().getLombokKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVoDefinitionAccess().getLombokAnnotationLombokAnnotationParserRuleCall_4_1_0());
					}
					lv_lombokAnnotation_5_0=ruleLombokAnnotation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVoDefinitionRule());
						}
						add(
							$current,
							"lombokAnnotation",
							lv_lombokAnnotation_5_0,
							"com.yunzhi.GenoMate.LombokAnnotation");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		(
			otherlv_6='fieldExclude'
			{
				newLeafNode(otherlv_6, grammarAccess.getVoDefinitionAccess().getFieldExcludeKeyword_5_0());
			}
			otherlv_7='{'
			{
				newLeafNode(otherlv_7, grammarAccess.getVoDefinitionAccess().getLeftCurlyBracketKeyword_5_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getVoDefinitionAccess().getExclusionsExclusionsParserRuleCall_5_2_0_0());
						}
						lv_exclusions_8_0=ruleExclusions
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVoDefinitionRule());
							}
							add(
								$current,
								"exclusions",
								lv_exclusions_8_0,
								"com.yunzhi.GenoMate.Exclusions");
							afterParserOrEnumRuleCall();
						}
					)
				)*
				    |
				(
					otherlv_9='excludeAll:'
					{
						newLeafNode(otherlv_9, grammarAccess.getVoDefinitionAccess().getExcludeAllKeyword_5_2_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getVoDefinitionAccess().getExcludeAllBOOLParserRuleCall_5_2_1_1_0());
							}
							lv_excludeAll_10_0=ruleBOOL
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getVoDefinitionRule());
								}
								set(
									$current,
									"excludeAll",
									lv_excludeAll_10_0,
									"com.yunzhi.GenoMate.BOOL");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_11=';'
					{
						newLeafNode(otherlv_11, grammarAccess.getVoDefinitionAccess().getSemicolonKeyword_5_2_1_2());
					}
				)
			)
			otherlv_12='}'
			{
				newLeafNode(otherlv_12, grammarAccess.getVoDefinitionAccess().getRightCurlyBracketKeyword_5_3());
			}
		)?
		(
			otherlv_13='fieldJackson'
			{
				newLeafNode(otherlv_13, grammarAccess.getVoDefinitionAccess().getFieldJacksonKeyword_6_0());
			}
			otherlv_14='{'
			{
				newLeafNode(otherlv_14, grammarAccess.getVoDefinitionAccess().getLeftCurlyBracketKeyword_6_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVoDefinitionAccess().getJacksonsVoJacksonParserRuleCall_6_2_0());
					}
					lv_jacksons_15_0=ruleVoJackson
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVoDefinitionRule());
						}
						add(
							$current,
							"jacksons",
							lv_jacksons_15_0,
							"com.yunzhi.GenoMate.VoJackson");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_16='}'
			{
				newLeafNode(otherlv_16, grammarAccess.getVoDefinitionAccess().getRightCurlyBracketKeyword_6_3());
			}
		)?
		(
			otherlv_17='fieldAdd'
			{
				newLeafNode(otherlv_17, grammarAccess.getVoDefinitionAccess().getFieldAddKeyword_7_0());
			}
			otherlv_18='{'
			{
				newLeafNode(otherlv_18, grammarAccess.getVoDefinitionAccess().getLeftCurlyBracketKeyword_7_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVoDefinitionAccess().getAddFieldVoAddFieldParserRuleCall_7_2_0());
					}
					lv_addField_19_0=ruleVoAddField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVoDefinitionRule());
						}
						add(
							$current,
							"addField",
							lv_addField_19_0,
							"com.yunzhi.GenoMate.VoAddField");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_20='}'
			{
				newLeafNode(otherlv_20, grammarAccess.getVoDefinitionAccess().getRightCurlyBracketKeyword_7_3());
			}
		)?
		otherlv_21='}'
		{
			newLeafNode(otherlv_21, grammarAccess.getVoDefinitionAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleFieldAnnotation
entryRuleFieldAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldAnnotationRule()); }
	iv_ruleFieldAnnotation=ruleFieldAnnotation
	{ $current=$iv_ruleFieldAnnotation.current; }
	EOF;

// Rule FieldAnnotation
ruleFieldAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='*'
		{
			newLeafNode(otherlv_0, grammarAccess.getFieldAnnotationAccess().getAsteriskKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFieldAnnotationRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getFieldAnnotationAccess().getFieldFieldCrossReference_1_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getFieldAnnotationAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldAnnotationAccess().getAnnListMybatisPlusFieldAnnotationParserRuleCall_3_0());
				}
				lv_annList_3_0=ruleMybatisPlusFieldAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFieldAnnotationRule());
					}
					add(
						$current,
						"annList",
						lv_annList_3_0,
						"com.yunzhi.GenoMate.MybatisPlusFieldAnnotation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleFieldValidationBlock
entryRuleFieldValidationBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldValidationBlockRule()); }
	iv_ruleFieldValidationBlock=ruleFieldValidationBlock
	{ $current=$iv_ruleFieldValidationBlock.current; }
	EOF;

// Rule FieldValidationBlock
ruleFieldValidationBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFieldValidationBlockAccess().getFieldValidationBlockAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldValidationBlockAccess().getActionGlobalGlobalActionParserRuleCall_1_0());
				}
				lv_actionGlobal_1_0=ruleGlobalAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFieldValidationBlockRule());
					}
					add(
						$current,
						"actionGlobal",
						lv_actionGlobal_1_0,
						"com.yunzhi.GenoMate.GlobalAction");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldValidationBlockAccess().getActionLocalLocalLoopActionParserRuleCall_2_0());
				}
				lv_actionLocal_2_0=ruleLocalLoopAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFieldValidationBlockRule());
					}
					add(
						$current,
						"actionLocal",
						lv_actionLocal_2_0,
						"com.yunzhi.GenoMate.LocalLoopAction");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldValidationBlockAccess().getActionSingleSingleActionParserRuleCall_3_0());
				}
				lv_actionSingle_3_0=ruleSingleAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFieldValidationBlockRule());
					}
					set(
						$current,
						"actionSingle",
						lv_actionSingle_3_0,
						"com.yunzhi.GenoMate.SingleAction");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleSingleAction
entryRuleSingleAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingleActionRule()); }
	iv_ruleSingleAction=ruleSingleAction
	{ $current=$iv_ruleSingleAction.current; }
	EOF;

// Rule SingleAction
ruleSingleAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='single:'
		{
			newLeafNode(otherlv_0, grammarAccess.getSingleActionAccess().getSingleKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getSingleActionAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSingleActionAccess().getValidationsDtoValidationParserRuleCall_2_0());
				}
				lv_validations_2_0=ruleDtoValidation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSingleActionRule());
					}
					add(
						$current,
						"validations",
						lv_validations_2_0,
						"com.yunzhi.GenoMate.DtoValidation");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getSingleActionAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleLocalLoopAction
entryRuleLocalLoopAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLocalLoopActionRule()); }
	iv_ruleLocalLoopAction=ruleLocalLoopAction
	{ $current=$iv_ruleLocalLoopAction.current; }
	EOF;

// Rule LocalLoopAction
ruleLocalLoopAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='local:'
		{
			newLeafNode(otherlv_0, grammarAccess.getLocalLoopActionAccess().getLocalKeyword_0());
		}
		otherlv_1='foreach'
		{
			newLeafNode(otherlv_1, grammarAccess.getLocalLoopActionAccess().getForeachKeyword_1());
		}
		otherlv_2='field'
		{
			newLeafNode(otherlv_2, grammarAccess.getLocalLoopActionAccess().getFieldKeyword_2());
		}
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getLocalLoopActionAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLocalLoopActionAccess().getVarDeclarationsVariableDeclarationParserRuleCall_4_0());
				}
				lv_varDeclarations_4_0=ruleVariableDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLocalLoopActionRule());
					}
					add(
						$current,
						"varDeclarations",
						lv_varDeclarations_4_0,
						"com.yunzhi.GenoMate.VariableDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getLocalLoopActionAccess().getActionsLocalActionParserRuleCall_5_0());
				}
				lv_actions_5_0=ruleLocalAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLocalLoopActionRule());
					}
					add(
						$current,
						"actions",
						lv_actions_5_0,
						"com.yunzhi.GenoMate.LocalAction");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getLocalLoopActionAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleGlobalAction
entryRuleGlobalAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGlobalActionRule()); }
	iv_ruleGlobalAction=ruleGlobalAction
	{ $current=$iv_ruleGlobalAction.current; }
	EOF;

// Rule GlobalAction
ruleGlobalAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='global:'
		{
			newLeafNode(otherlv_0, grammarAccess.getGlobalActionAccess().getGlobalKeyword_0());
		}
		otherlv_1='set'
		{
			newLeafNode(otherlv_1, grammarAccess.getGlobalActionAccess().getSetKeyword_1());
		}
		otherlv_2='to'
		{
			newLeafNode(otherlv_2, grammarAccess.getGlobalActionAccess().getToKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGlobalActionRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getGlobalActionAccess().getVariableVariableDeclarationCrossReference_3_0());
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getGlobalActionAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleLocalAction
entryRuleLocalAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLocalActionRule()); }
	iv_ruleLocalAction=ruleLocalAction
	{ $current=$iv_ruleLocalAction.current; }
	EOF;

// Rule LocalAction
ruleLocalAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getLocalActionAccess().getIfKeyword_0());
		}
		otherlv_1='field'
		{
			newLeafNode(otherlv_1, grammarAccess.getLocalActionAccess().getFieldKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLocalActionAccess().getConditionTypeConditionParserRuleCall_2_0());
				}
				lv_condition_2_0=ruleTypeCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLocalActionRule());
					}
					set(
						$current,
						"condition",
						lv_condition_2_0,
						"com.yunzhi.GenoMate.TypeCondition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getLocalActionAccess().getLeftCurlyBracketKeyword_3());
		}
		otherlv_4='set'
		{
			newLeafNode(otherlv_4, grammarAccess.getLocalActionAccess().getSetKeyword_4());
		}
		otherlv_5='to'
		{
			newLeafNode(otherlv_5, grammarAccess.getLocalActionAccess().getToKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLocalActionRule());
					}
				}
				otherlv_6=RULE_ID
				{
					newLeafNode(otherlv_6, grammarAccess.getLocalActionAccess().getVariableVariableDeclarationCrossReference_6_0());
				}
			)
		)
		otherlv_7=';'
		{
			newLeafNode(otherlv_7, grammarAccess.getLocalActionAccess().getSemicolonKeyword_7());
		}
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getLocalActionAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleTypeCondition
entryRuleTypeCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeConditionRule()); }
	iv_ruleTypeCondition=ruleTypeCondition
	{ $current=$iv_ruleTypeCondition.current; }
	EOF;

// Rule TypeCondition
ruleTypeCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getTypeConditionAccess().getOrTypeConditionParserRuleCall());
	}
	this_OrTypeCondition_0=ruleOrTypeCondition
	{
		$current = $this_OrTypeCondition_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOrTypeCondition
entryRuleOrTypeCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrTypeConditionRule()); }
	iv_ruleOrTypeCondition=ruleOrTypeCondition
	{ $current=$iv_ruleOrTypeCondition.current; }
	EOF;

// Rule OrTypeCondition
ruleOrTypeCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOrTypeConditionAccess().getLeftAndTypeConditionParserRuleCall_0_0());
				}
				lv_left_0_0=ruleAndTypeCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOrTypeConditionRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"com.yunzhi.GenoMate.AndTypeCondition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='||'
			{
				newLeafNode(otherlv_1, grammarAccess.getOrTypeConditionAccess().getVerticalLineVerticalLineKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrTypeConditionAccess().getRightAndTypeConditionParserRuleCall_1_1_0());
					}
					lv_right_2_0=ruleAndTypeCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrTypeConditionRule());
						}
						add(
							$current,
							"right",
							lv_right_2_0,
							"com.yunzhi.GenoMate.AndTypeCondition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAndTypeCondition
entryRuleAndTypeCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndTypeConditionRule()); }
	iv_ruleAndTypeCondition=ruleAndTypeCondition
	{ $current=$iv_ruleAndTypeCondition.current; }
	EOF;

// Rule AndTypeCondition
ruleAndTypeCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAndTypeConditionAccess().getLeftTypeEqualityConditionParserRuleCall_0_0());
				}
				lv_left_0_0=ruleTypeEqualityCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAndTypeConditionRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"com.yunzhi.GenoMate.TypeEqualityCondition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='&&'
			{
				newLeafNode(otherlv_1, grammarAccess.getAndTypeConditionAccess().getAmpersandAmpersandKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndTypeConditionAccess().getRightTypeEqualityConditionParserRuleCall_1_1_0());
					}
					lv_right_2_0=ruleTypeEqualityCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndTypeConditionRule());
						}
						add(
							$current,
							"right",
							lv_right_2_0,
							"com.yunzhi.GenoMate.TypeEqualityCondition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleTypeEqualityCondition
entryRuleTypeEqualityCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeEqualityConditionRule()); }
	iv_ruleTypeEqualityCondition=ruleTypeEqualityCondition
	{ $current=$iv_ruleTypeEqualityCondition.current; }
	EOF;

// Rule TypeEqualityCondition
ruleTypeEqualityCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='type'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeEqualityConditionAccess().getTypeKeyword_0());
		}
		(
			(
				(
					lv_isEqual_1_0='=='
					{
						newLeafNode(lv_isEqual_1_0, grammarAccess.getTypeEqualityConditionAccess().getIsEqualEqualsSignEqualsSignKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeEqualityConditionRule());
						}
						setWithLastConsumed($current, "isEqual", lv_isEqual_1_0, "==");
					}
				)
			)
			    |
			(
				(
					lv_isNotEqual_2_0='!='
					{
						newLeafNode(lv_isNotEqual_2_0, grammarAccess.getTypeEqualityConditionAccess().getIsNotEqualExclamationMarkEqualsSignKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeEqualityConditionRule());
						}
						setWithLastConsumed($current, "isNotEqual", lv_isNotEqual_2_0, "!=");
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeEqualityConditionAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_3_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeEqualityConditionRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"com.yunzhi.GenoMate.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	iv_ruleVariableDeclaration=ruleVariableDeclaration
	{ $current=$iv_ruleVariableDeclaration.current; }
	EOF;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariableDeclarationAccess().getVarKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"com.yunzhi.GenoMate.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getAnnotationBeanValidationAnnotationParserRuleCall_3_0());
				}
				lv_annotation_3_0=ruleBeanValidationAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
					}
					set(
						$current,
						"annotation",
						lv_annotation_3_0,
						"com.yunzhi.GenoMate.BeanValidationAnnotation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRulePoAddField
entryRulePoAddField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPoAddFieldRule()); }
	iv_rulePoAddField=rulePoAddField
	{ $current=$iv_rulePoAddField.current; }
	EOF;

// Rule PoAddField
rulePoAddField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='+'
		{
			newLeafNode(otherlv_0, grammarAccess.getPoAddFieldAccess().getPlusSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPoAddFieldAccess().getPropertiesPropertyDeclarationParserRuleCall_1_0());
				}
				lv_properties_1_0=rulePropertyDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPoAddFieldRule());
					}
					set(
						$current,
						"properties",
						lv_properties_1_0,
						"com.yunzhi.GenoMate.PropertyDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getPoAddFieldAccess().getColonKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPoAddFieldAccess().getAnnotationListMybatisPlusFieldAnnotationParserRuleCall_2_1_0());
					}
					lv_annotationList_3_0=ruleMybatisPlusFieldAnnotation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPoAddFieldRule());
						}
						add(
							$current,
							"annotationList",
							lv_annotationList_3_0,
							"com.yunzhi.GenoMate.MybatisPlusFieldAnnotation");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
	)
;

// Entry rule entryRuleDtoAddField
entryRuleDtoAddField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDtoAddFieldRule()); }
	iv_ruleDtoAddField=ruleDtoAddField
	{ $current=$iv_ruleDtoAddField.current; }
	EOF;

// Rule DtoAddField
ruleDtoAddField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='+'
		{
			newLeafNode(otherlv_0, grammarAccess.getDtoAddFieldAccess().getPlusSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDtoAddFieldAccess().getPropertiesPropertyDeclarationParserRuleCall_1_0());
				}
				lv_properties_1_0=rulePropertyDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDtoAddFieldRule());
					}
					set(
						$current,
						"properties",
						lv_properties_1_0,
						"com.yunzhi.GenoMate.PropertyDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getDtoAddFieldAccess().getColonKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDtoAddFieldAccess().getAnnotationListBeanValidationAnnotationParserRuleCall_2_1_0());
					}
					lv_annotationList_3_0=ruleBeanValidationAnnotation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDtoAddFieldRule());
						}
						add(
							$current,
							"annotationList",
							lv_annotationList_3_0,
							"com.yunzhi.GenoMate.BeanValidationAnnotation");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
	)
;

// Entry rule entryRuleVoAddField
entryRuleVoAddField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVoAddFieldRule()); }
	iv_ruleVoAddField=ruleVoAddField
	{ $current=$iv_ruleVoAddField.current; }
	EOF;

// Rule VoAddField
ruleVoAddField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='+'
		{
			newLeafNode(otherlv_0, grammarAccess.getVoAddFieldAccess().getPlusSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVoAddFieldAccess().getPropertiesPropertyDeclarationParserRuleCall_1_0());
				}
				lv_properties_1_0=rulePropertyDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVoAddFieldRule());
					}
					set(
						$current,
						"properties",
						lv_properties_1_0,
						"com.yunzhi.GenoMate.PropertyDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getVoAddFieldAccess().getColonKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVoAddFieldAccess().getAnnotationListJacksonAnnotationParserRuleCall_2_1_0());
					}
					lv_annotationList_3_0=ruleJacksonAnnotation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVoAddFieldRule());
						}
						add(
							$current,
							"annotationList",
							lv_annotationList_3_0,
							"com.yunzhi.GenoMate.JacksonAnnotation");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
	)
;

// Entry rule entryRuleExclusions
entryRuleExclusions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExclusionsRule()); }
	iv_ruleExclusions=ruleExclusions
	{ $current=$iv_ruleExclusions.current; }
	EOF;

// Rule Exclusions
ruleExclusions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='-'
		{
			newLeafNode(otherlv_0, grammarAccess.getExclusionsAccess().getHyphenMinusKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExclusionsRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getExclusionsAccess().getFieldFieldCrossReference_1_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDtoValidation
entryRuleDtoValidation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDtoValidationRule()); }
	iv_ruleDtoValidation=ruleDtoValidation
	{ $current=$iv_ruleDtoValidation.current; }
	EOF;

// Rule DtoValidation
ruleDtoValidation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='*'
		{
			newLeafNode(otherlv_0, grammarAccess.getDtoValidationAccess().getAsteriskKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDtoValidationRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getDtoValidationAccess().getFieldFieldCrossReference_1_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getDtoValidationAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDtoValidationAccess().getAnnListBeanValidationAnnotationParserRuleCall_3_0());
				}
				lv_annList_3_0=ruleBeanValidationAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDtoValidationRule());
					}
					add(
						$current,
						"annList",
						lv_annList_3_0,
						"com.yunzhi.GenoMate.BeanValidationAnnotation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleVoJackson
entryRuleVoJackson returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVoJacksonRule()); }
	iv_ruleVoJackson=ruleVoJackson
	{ $current=$iv_ruleVoJackson.current; }
	EOF;

// Rule VoJackson
ruleVoJackson returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='*'
		{
			newLeafNode(otherlv_0, grammarAccess.getVoJacksonAccess().getAsteriskKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVoJacksonRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getVoJacksonAccess().getFieldFieldCrossReference_1_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getVoJacksonAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVoJacksonAccess().getAnnListJacksonAnnotationParserRuleCall_3_0());
				}
				lv_annList_3_0=ruleJacksonAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVoJacksonRule());
					}
					add(
						$current,
						"annList",
						lv_annList_3_0,
						"com.yunzhi.GenoMate.JacksonAnnotation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRulePropertyDeclaration
entryRulePropertyDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertyDeclarationRule()); }
	iv_rulePropertyDeclaration=rulePropertyDeclaration
	{ $current=$iv_rulePropertyDeclaration.current; }
	EOF;

// Rule PropertyDeclaration
rulePropertyDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_static_0_0='static'
				{
					newLeafNode(lv_static_0_0, grammarAccess.getPropertyDeclarationAccess().getStaticStaticKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPropertyDeclarationRule());
					}
					setWithLastConsumed($current, "static", lv_static_0_0, "static");
				}
			)
		)?
		(
			(
				lv_final_1_0='final'
				{
					newLeafNode(lv_final_1_0, grammarAccess.getPropertyDeclarationAccess().getFinalFinalKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPropertyDeclarationRule());
					}
					setWithLastConsumed($current, "final", lv_final_1_0, "final");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getPropertyDeclarationAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropertyDeclarationRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"com.yunzhi.GenoMate.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getPropertyDeclarationAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPropertyDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"com.yunzhi.GenoMate.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPropertyDeclarationAccess().getDefaultClauseDefaultClauseParserRuleCall_4_0());
				}
				lv_defaultClause_4_0=ruleDefaultClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropertyDeclarationRule());
					}
					set(
						$current,
						"defaultClause",
						lv_defaultClause_4_0,
						"com.yunzhi.GenoMate.DefaultClause");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleDefaultClause
entryRuleDefaultClause returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDefaultClauseRule()); }
	iv_ruleDefaultClause=ruleDefaultClause
	{ $current=$iv_ruleDefaultClause.current.getText(); }
	EOF;

// Rule DefaultClause
ruleDefaultClause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDefaultClauseAccess().getEqualsSignKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getDefaultClauseAccess().getLiteralParserRuleCall_1());
		}
		this_Literal_1=ruleLiteral
		{
			$current.merge(this_Literal_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMapping
entryRuleMapping returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMappingRule()); }
	iv_ruleMapping=ruleMapping
	{ $current=$iv_ruleMapping.current; }
	EOF;

// Rule Mapping
ruleMapping returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMappingAccess().getModelToVOMappingParserRuleCall_0());
		}
		this_ModelToVOMapping_0=ruleModelToVOMapping
		{
			$current = $this_ModelToVOMapping_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMappingAccess().getDTOToModelMappingParserRuleCall_1());
		}
		this_DTOToModelMapping_1=ruleDTOToModelMapping
		{
			$current = $this_DTOToModelMapping_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleModelToVOMapping
entryRuleModelToVOMapping returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelToVOMappingRule()); }
	iv_ruleModelToVOMapping=ruleModelToVOMapping
	{ $current=$iv_ruleModelToVOMapping.current; }
	EOF;

// Rule ModelToVOMapping
ruleModelToVOMapping returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='mapping'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelToVOMappingAccess().getMappingKeyword_0());
		}
		otherlv_1='from'
		{
			newLeafNode(otherlv_1, grammarAccess.getModelToVOMappingAccess().getFromKeyword_1());
		}
		otherlv_2='Model'
		{
			newLeafNode(otherlv_2, grammarAccess.getModelToVOMappingAccess().getModelKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelToVOMappingRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getModelToVOMappingAccess().getSourceModelCrossReference_3_0());
				}
			)
		)
		otherlv_4='to'
		{
			newLeafNode(otherlv_4, grammarAccess.getModelToVOMappingAccess().getToKeyword_4());
		}
		otherlv_5='VO'
		{
			newLeafNode(otherlv_5, grammarAccess.getModelToVOMappingAccess().getVOKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelToVOMappingRule());
					}
				}
				otherlv_6=RULE_ID
				{
					newLeafNode(otherlv_6, grammarAccess.getModelToVOMappingAccess().getTargetVoDefinitionCrossReference_6_0());
				}
			)
		)
		otherlv_7='{'
		{
			newLeafNode(otherlv_7, grammarAccess.getModelToVOMappingAccess().getLeftCurlyBracketKeyword_7());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getModelToVOMappingAccess().getRulesMappingRuleParserRuleCall_8_0_0());
					}
					lv_rules_8_0=ruleMappingRule
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelToVOMappingRule());
						}
						add(
							$current,
							"rules",
							lv_rules_8_0,
							"com.yunzhi.GenoMate.MappingRule");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			    |
			(
				otherlv_9='target.all'
				{
					newLeafNode(otherlv_9, grammarAccess.getModelToVOMappingAccess().getTargetAllKeyword_8_1_0());
				}
				otherlv_10='='
				{
					newLeafNode(otherlv_10, grammarAccess.getModelToVOMappingAccess().getEqualsSignKeyword_8_1_1());
				}
				otherlv_11='source.all'
				{
					newLeafNode(otherlv_11, grammarAccess.getModelToVOMappingAccess().getSourceAllKeyword_8_1_2());
				}
				otherlv_12=';'
				{
					newLeafNode(otherlv_12, grammarAccess.getModelToVOMappingAccess().getSemicolonKeyword_8_1_3());
				}
			)
		)
		otherlv_13='}'
		{
			newLeafNode(otherlv_13, grammarAccess.getModelToVOMappingAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleDTOToModelMapping
entryRuleDTOToModelMapping returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDTOToModelMappingRule()); }
	iv_ruleDTOToModelMapping=ruleDTOToModelMapping
	{ $current=$iv_ruleDTOToModelMapping.current; }
	EOF;

// Rule DTOToModelMapping
ruleDTOToModelMapping returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='mapping'
		{
			newLeafNode(otherlv_0, grammarAccess.getDTOToModelMappingAccess().getMappingKeyword_0());
		}
		otherlv_1='from'
		{
			newLeafNode(otherlv_1, grammarAccess.getDTOToModelMappingAccess().getFromKeyword_1());
		}
		otherlv_2='DTO'
		{
			newLeafNode(otherlv_2, grammarAccess.getDTOToModelMappingAccess().getDTOKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDTOToModelMappingRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getDTOToModelMappingAccess().getSourceDtoDefinitionCrossReference_3_0());
				}
			)
		)
		otherlv_4='to'
		{
			newLeafNode(otherlv_4, grammarAccess.getDTOToModelMappingAccess().getToKeyword_4());
		}
		otherlv_5='Model'
		{
			newLeafNode(otherlv_5, grammarAccess.getDTOToModelMappingAccess().getModelKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDTOToModelMappingRule());
					}
				}
				otherlv_6=RULE_ID
				{
					newLeafNode(otherlv_6, grammarAccess.getDTOToModelMappingAccess().getTargetModelCrossReference_6_0());
				}
			)
		)
		otherlv_7='{'
		{
			newLeafNode(otherlv_7, grammarAccess.getDTOToModelMappingAccess().getLeftCurlyBracketKeyword_7());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDTOToModelMappingAccess().getRulesMappingRuleParserRuleCall_8_0_0());
					}
					lv_rules_8_0=ruleMappingRule
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDTOToModelMappingRule());
						}
						add(
							$current,
							"rules",
							lv_rules_8_0,
							"com.yunzhi.GenoMate.MappingRule");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			    |
			(
				otherlv_9='target.all'
				{
					newLeafNode(otherlv_9, grammarAccess.getDTOToModelMappingAccess().getTargetAllKeyword_8_1_0());
				}
				otherlv_10='='
				{
					newLeafNode(otherlv_10, grammarAccess.getDTOToModelMappingAccess().getEqualsSignKeyword_8_1_1());
				}
				otherlv_11='source.all'
				{
					newLeafNode(otherlv_11, grammarAccess.getDTOToModelMappingAccess().getSourceAllKeyword_8_1_2());
				}
				otherlv_12=';'
				{
					newLeafNode(otherlv_12, grammarAccess.getDTOToModelMappingAccess().getSemicolonKeyword_8_1_3());
				}
			)
		)
		otherlv_13='}'
		{
			newLeafNode(otherlv_13, grammarAccess.getDTOToModelMappingAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleMappingRule
entryRuleMappingRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMappingRuleRule()); }
	iv_ruleMappingRule=ruleMappingRule
	{ $current=$iv_ruleMappingRule.current; }
	EOF;

// Rule MappingRule
ruleMappingRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='target.'
		{
			newLeafNode(otherlv_0, grammarAccess.getMappingRuleAccess().getTargetKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMappingRuleRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getMappingRuleAccess().getTargetFieldFieldCrossReference_1_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getMappingRuleAccess().getEqualsSignKeyword_2());
		}
		(
			(
				otherlv_3='source.'
				{
					newLeafNode(otherlv_3, grammarAccess.getMappingRuleAccess().getSourceKeyword_3_0_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMappingRuleRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getMappingRuleAccess().getSourceFieldFieldCrossReference_3_0_1_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getMappingRuleAccess().getDefaultLiteralParserRuleCall_3_1_0());
					}
					lv_default_5_0=ruleLiteral
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMappingRuleRule());
						}
						set(
							$current,
							"default",
							lv_default_5_0,
							"com.yunzhi.GenoMate.Literal");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getMappingRuleAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeAccess().getGenericDataTypeParserRuleCall_0());
		}
		this_GenericDataType_0=ruleGenericDataType
		{
			$current = $this_GenericDataType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getArrayTypeParserRuleCall_1());
		}
		this_ArrayType_1=ruleArrayType
		{
			$current = $this_ArrayType_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getSimpleTypeParserRuleCall_2());
		}
		this_SimpleType_2=ruleSimpleType
		{
			$current = $this_SimpleType_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getNormalTypeParserRuleCall_3());
		}
		this_NormalType_3=ruleNormalType
		{
			$current = $this_NormalType_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSimpleType
entryRuleSimpleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleTypeRule()); }
	iv_ruleSimpleType=ruleSimpleType
	{ $current=$iv_ruleSimpleType.current; }
	EOF;

// Rule SimpleType
ruleSimpleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getSimpleTypeAccess().getBuiltInTypeBuiltInTypeEnumRuleCall_0());
			}
			lv_builtInType_0_0=ruleBuiltInType
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getSimpleTypeRule());
				}
				set(
					$current,
					"builtInType",
					lv_builtInType_0_0,
					"com.yunzhi.GenoMate.BuiltInType");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleNormalType
entryRuleNormalType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNormalTypeRule()); }
	iv_ruleNormalType=ruleNormalType
	{ $current=$iv_ruleNormalType.current; }
	EOF;

// Rule NormalType
ruleNormalType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_customType_0_0=RULE_ID
			{
				newLeafNode(lv_customType_0_0, grammarAccess.getNormalTypeAccess().getCustomTypeIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNormalTypeRule());
				}
				setWithLastConsumed(
					$current,
					"customType",
					lv_customType_0_0,
					"com.yunzhi.GenoMate.ID");
			}
		)
	)
;

// Entry rule entryRuleGenericDataType
entryRuleGenericDataType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGenericDataTypeRule()); }
	iv_ruleGenericDataType=ruleGenericDataType
	{ $current=$iv_ruleGenericDataType.current; }
	EOF;

// Rule GenericDataType
ruleGenericDataType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_containerTypeName_0_0=RULE_ID
				{
					newLeafNode(lv_containerTypeName_0_0, grammarAccess.getGenericDataTypeAccess().getContainerTypeNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGenericDataTypeRule());
					}
					setWithLastConsumed(
						$current,
						"containerTypeName",
						lv_containerTypeName_0_0,
						"com.yunzhi.GenoMate.ID");
				}
			)
		)
		this_LESS_1=RULE_LESS
		{
			newLeafNode(this_LESS_1, grammarAccess.getGenericDataTypeAccess().getLESSTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGenericDataTypeAccess().getContainedTypeNameTypeParserRuleCall_2_0());
				}
				lv_containedTypeName_2_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGenericDataTypeRule());
					}
					set(
						$current,
						"containedTypeName",
						lv_containedTypeName_2_0,
						"com.yunzhi.GenoMate.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_GREATER_3=RULE_GREATER
		{
			newLeafNode(this_GREATER_3, grammarAccess.getGenericDataTypeAccess().getGREATERTerminalRuleCall_3());
		}
	)
;

// Entry rule entryRuleArrayType
entryRuleArrayType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayTypeRule()); }
	iv_ruleArrayType=ruleArrayType
	{ $current=$iv_ruleArrayType.current; }
	EOF;

// Rule ArrayType
ruleArrayType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getArrayTypeAccess().getElementTypeSimpleTypeParserRuleCall_0_0_0());
					}
					lv_elementType_0_1=ruleSimpleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArrayTypeRule());
						}
						set(
							$current,
							"elementType",
							lv_elementType_0_1,
							"com.yunzhi.GenoMate.SimpleType");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getArrayTypeAccess().getElementTypeNormalTypeParserRuleCall_0_0_1());
					}
					lv_elementType_0_2=ruleNormalType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArrayTypeRule());
						}
						set(
							$current,
							"elementType",
							lv_elementType_0_2,
							"com.yunzhi.GenoMate.NormalType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		this_LBRACKET_1=RULE_LBRACKET
		{
			newLeafNode(this_LBRACKET_1, grammarAccess.getArrayTypeAccess().getLBRACKETTerminalRuleCall_1());
		}
		this_RBRACKET_2=RULE_RBRACKET
		{
			newLeafNode(this_RBRACKET_2, grammarAccess.getArrayTypeAccess().getRBRACKETTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleLiteral
entryRuleLiteral returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleLiteral=ruleLiteral
	{ $current=$iv_ruleLiteral.current.getText(); }
	EOF;

// Rule Literal
ruleLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getLiteralAccess().getINTTerminalRuleCall_1());
		}
		    |
		this_DECIMAL_2=RULE_DECIMAL
		{
			$current.merge(this_DECIMAL_2);
		}
		{
			newLeafNode(this_DECIMAL_2, grammarAccess.getLiteralAccess().getDECIMALTerminalRuleCall_2());
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getBOOLParserRuleCall_3());
		}
		this_BOOL_3=ruleBOOL
		{
			$current.merge(this_BOOL_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBOOL
entryRuleBOOL returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBOOLRule()); }
	iv_ruleBOOL=ruleBOOL
	{ $current=$iv_ruleBOOL.current.getText(); }
	EOF;

// Rule BOOL
ruleBOOL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBOOLAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBOOLAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Rule BeanValidationType
ruleBeanValidationType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='AssertFalse'
			{
				$current = grammarAccess.getBeanValidationTypeAccess().getAssertFalseEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBeanValidationTypeAccess().getAssertFalseEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='AssertTrue'
			{
				$current = grammarAccess.getBeanValidationTypeAccess().getAssertTrueEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBeanValidationTypeAccess().getAssertTrueEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='DecimalMax'
			{
				$current = grammarAccess.getBeanValidationTypeAccess().getDecimalMaxEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getBeanValidationTypeAccess().getDecimalMaxEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='DecimalMin'
			{
				$current = grammarAccess.getBeanValidationTypeAccess().getDecimalMinEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getBeanValidationTypeAccess().getDecimalMinEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='Digits'
			{
				$current = grammarAccess.getBeanValidationTypeAccess().getDigitsEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getBeanValidationTypeAccess().getDigitsEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='Email'
			{
				$current = grammarAccess.getBeanValidationTypeAccess().getEmailEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getBeanValidationTypeAccess().getEmailEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='Future'
			{
				$current = grammarAccess.getBeanValidationTypeAccess().getFutureEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getBeanValidationTypeAccess().getFutureEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='FutureOrPresent'
			{
				$current = grammarAccess.getBeanValidationTypeAccess().getFutureOrPresentEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getBeanValidationTypeAccess().getFutureOrPresentEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='Max'
			{
				$current = grammarAccess.getBeanValidationTypeAccess().getMaxEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getBeanValidationTypeAccess().getMaxEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='Min'
			{
				$current = grammarAccess.getBeanValidationTypeAccess().getMinEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getBeanValidationTypeAccess().getMinEnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10='Negative'
			{
				$current = grammarAccess.getBeanValidationTypeAccess().getNegativeEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getBeanValidationTypeAccess().getNegativeEnumLiteralDeclaration_10());
			}
		)
		    |
		(
			enumLiteral_11='NegativeOrZero'
			{
				$current = grammarAccess.getBeanValidationTypeAccess().getNegativeOrZeroEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_11, grammarAccess.getBeanValidationTypeAccess().getNegativeOrZeroEnumLiteralDeclaration_11());
			}
		)
		    |
		(
			enumLiteral_12='NotBlank'
			{
				$current = grammarAccess.getBeanValidationTypeAccess().getNotBlankEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_12, grammarAccess.getBeanValidationTypeAccess().getNotBlankEnumLiteralDeclaration_12());
			}
		)
		    |
		(
			enumLiteral_13='NotEmpty'
			{
				$current = grammarAccess.getBeanValidationTypeAccess().getNotEmptyEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_13, grammarAccess.getBeanValidationTypeAccess().getNotEmptyEnumLiteralDeclaration_13());
			}
		)
		    |
		(
			enumLiteral_14='NotNull'
			{
				$current = grammarAccess.getBeanValidationTypeAccess().getNotNullEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_14, grammarAccess.getBeanValidationTypeAccess().getNotNullEnumLiteralDeclaration_14());
			}
		)
		    |
		(
			enumLiteral_15='Null'
			{
				$current = grammarAccess.getBeanValidationTypeAccess().getNullEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_15, grammarAccess.getBeanValidationTypeAccess().getNullEnumLiteralDeclaration_15());
			}
		)
		    |
		(
			enumLiteral_16='Past'
			{
				$current = grammarAccess.getBeanValidationTypeAccess().getPastEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_16, grammarAccess.getBeanValidationTypeAccess().getPastEnumLiteralDeclaration_16());
			}
		)
		    |
		(
			enumLiteral_17='PastOrPresent'
			{
				$current = grammarAccess.getBeanValidationTypeAccess().getPastOrPresentEnumLiteralDeclaration_17().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_17, grammarAccess.getBeanValidationTypeAccess().getPastOrPresentEnumLiteralDeclaration_17());
			}
		)
		    |
		(
			enumLiteral_18='Pattern'
			{
				$current = grammarAccess.getBeanValidationTypeAccess().getPatternEnumLiteralDeclaration_18().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_18, grammarAccess.getBeanValidationTypeAccess().getPatternEnumLiteralDeclaration_18());
			}
		)
		    |
		(
			enumLiteral_19='Positive'
			{
				$current = grammarAccess.getBeanValidationTypeAccess().getPositiveEnumLiteralDeclaration_19().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_19, grammarAccess.getBeanValidationTypeAccess().getPositiveEnumLiteralDeclaration_19());
			}
		)
		    |
		(
			enumLiteral_20='PositiveOrZero'
			{
				$current = grammarAccess.getBeanValidationTypeAccess().getPositiveOrZeroEnumLiteralDeclaration_20().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_20, grammarAccess.getBeanValidationTypeAccess().getPositiveOrZeroEnumLiteralDeclaration_20());
			}
		)
		    |
		(
			enumLiteral_21='Size'
			{
				$current = grammarAccess.getBeanValidationTypeAccess().getSizeEnumLiteralDeclaration_21().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_21, grammarAccess.getBeanValidationTypeAccess().getSizeEnumLiteralDeclaration_21());
			}
		)
	)
;

// Rule MybatisPlusModelType
ruleMybatisPlusModelType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='KeySequence'
			{
				$current = grammarAccess.getMybatisPlusModelTypeAccess().getKeySequenceEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMybatisPlusModelTypeAccess().getKeySequenceEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='TableName'
			{
				$current = grammarAccess.getMybatisPlusModelTypeAccess().getTableNameEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMybatisPlusModelTypeAccess().getTableNameEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule MybatisPlusFieldType
ruleMybatisPlusFieldType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='OrderBy'
			{
				$current = grammarAccess.getMybatisPlusFieldTypeAccess().getOrderByEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMybatisPlusFieldTypeAccess().getOrderByEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='TableField'
			{
				$current = grammarAccess.getMybatisPlusFieldTypeAccess().getTableFieldEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMybatisPlusFieldTypeAccess().getTableFieldEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='TableId'
			{
				$current = grammarAccess.getMybatisPlusFieldTypeAccess().getTableIdEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getMybatisPlusFieldTypeAccess().getTableIdEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='TableLogic'
			{
				$current = grammarAccess.getMybatisPlusFieldTypeAccess().getTableLogicEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getMybatisPlusFieldTypeAccess().getTableLogicEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='Version'
			{
				$current = grammarAccess.getMybatisPlusFieldTypeAccess().getVersionEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getMybatisPlusFieldTypeAccess().getVersionEnumLiteralDeclaration_4());
			}
		)
	)
;

// Rule JacksonType
ruleJacksonType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='JsonAlias'
			{
				$current = grammarAccess.getJacksonTypeAccess().getJsonAliasEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getJacksonTypeAccess().getJsonAliasEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='JsonAnyGetter'
			{
				$current = grammarAccess.getJacksonTypeAccess().getJsonAnyGetterEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getJacksonTypeAccess().getJsonAnyGetterEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='JsonAnySetter'
			{
				$current = grammarAccess.getJacksonTypeAccess().getJsonAnySetterEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getJacksonTypeAccess().getJsonAnySetterEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='JsonAutoDetect'
			{
				$current = grammarAccess.getJacksonTypeAccess().getJsonAutoDetectEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getJacksonTypeAccess().getJsonAutoDetectEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='JsonDeserialize'
			{
				$current = grammarAccess.getJacksonTypeAccess().getJsonDeserializeEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getJacksonTypeAccess().getJsonDeserializeEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='JsonFormat'
			{
				$current = grammarAccess.getJacksonTypeAccess().getJsonFormatEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getJacksonTypeAccess().getJsonFormatEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='JsonIgnore'
			{
				$current = grammarAccess.getJacksonTypeAccess().getJsonIgnoreEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getJacksonTypeAccess().getJsonIgnoreEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='JsonIgnoreProperties'
			{
				$current = grammarAccess.getJacksonTypeAccess().getJsonIgnorePropertiesEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getJacksonTypeAccess().getJsonIgnorePropertiesEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='JsonInclude'
			{
				$current = grammarAccess.getJacksonTypeAccess().getJsonIncludeEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getJacksonTypeAccess().getJsonIncludeEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='JsonRootName'
			{
				$current = grammarAccess.getJacksonTypeAccess().getJsonRootNameEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getJacksonTypeAccess().getJsonRootNameEnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10='JsonSerialize'
			{
				$current = grammarAccess.getJacksonTypeAccess().getJsonSerializeEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getJacksonTypeAccess().getJsonSerializeEnumLiteralDeclaration_10());
			}
		)
		    |
		(
			enumLiteral_11='JsonTypeInfo'
			{
				$current = grammarAccess.getJacksonTypeAccess().getJsonTypeInfoEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_11, grammarAccess.getJacksonTypeAccess().getJsonTypeInfoEnumLiteralDeclaration_11());
			}
		)
		    |
		(
			enumLiteral_12='JsonUnwrapped'
			{
				$current = grammarAccess.getJacksonTypeAccess().getJsonUnwrappedEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_12, grammarAccess.getJacksonTypeAccess().getJsonUnwrappedEnumLiteralDeclaration_12());
			}
		)
		    |
		(
			enumLiteral_13='JsonValue'
			{
				$current = grammarAccess.getJacksonTypeAccess().getJsonValueEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_13, grammarAccess.getJacksonTypeAccess().getJsonValueEnumLiteralDeclaration_13());
			}
		)
		    |
		(
			enumLiteral_14='JsonView'
			{
				$current = grammarAccess.getJacksonTypeAccess().getJsonViewEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_14, grammarAccess.getJacksonTypeAccess().getJsonViewEnumLiteralDeclaration_14());
			}
		)
		    |
		(
			enumLiteral_15='JsonProperty'
			{
				$current = grammarAccess.getJacksonTypeAccess().getJsonPropertyEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_15, grammarAccess.getJacksonTypeAccess().getJsonPropertyEnumLiteralDeclaration_15());
			}
		)
	)
;

// Rule LombokType
ruleLombokType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Accessors'
			{
				$current = grammarAccess.getLombokTypeAccess().getAccessorsEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getLombokTypeAccess().getAccessorsEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='AllArgsConstructor'
			{
				$current = grammarAccess.getLombokTypeAccess().getAllArgsConstructorEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getLombokTypeAccess().getAllArgsConstructorEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Builder'
			{
				$current = grammarAccess.getLombokTypeAccess().getBuilderEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getLombokTypeAccess().getBuilderEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Data'
			{
				$current = grammarAccess.getLombokTypeAccess().getDataEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getLombokTypeAccess().getDataEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='EqualsAndHashCode'
			{
				$current = grammarAccess.getLombokTypeAccess().getEqualsAndHashCodeEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getLombokTypeAccess().getEqualsAndHashCodeEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='Getter'
			{
				$current = grammarAccess.getLombokTypeAccess().getGetterEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getLombokTypeAccess().getGetterEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='NoArgsConstructor'
			{
				$current = grammarAccess.getLombokTypeAccess().getNoArgsConstructorEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getLombokTypeAccess().getNoArgsConstructorEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='RequiredArgsConstructor'
			{
				$current = grammarAccess.getLombokTypeAccess().getRequiredArgsConstructorEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getLombokTypeAccess().getRequiredArgsConstructorEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='Setter'
			{
				$current = grammarAccess.getLombokTypeAccess().getSetterEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getLombokTypeAccess().getSetterEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='Singular'
			{
				$current = grammarAccess.getLombokTypeAccess().getSingularEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getLombokTypeAccess().getSingularEnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10='SuperBuilder'
			{
				$current = grammarAccess.getLombokTypeAccess().getSuperBuilderEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getLombokTypeAccess().getSuperBuilderEnumLiteralDeclaration_10());
			}
		)
		    |
		(
			enumLiteral_11='ToString'
			{
				$current = grammarAccess.getLombokTypeAccess().getToStringEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_11, grammarAccess.getLombokTypeAccess().getToStringEnumLiteralDeclaration_11());
			}
		)
	)
;

// Rule BuiltInType
ruleBuiltInType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='int'
			{
				$current = grammarAccess.getBuiltInTypeAccess().getIntEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBuiltInTypeAccess().getIntEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='long'
			{
				$current = grammarAccess.getBuiltInTypeAccess().getLongEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBuiltInTypeAccess().getLongEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Integer'
			{
				$current = grammarAccess.getBuiltInTypeAccess().getIntegerEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getBuiltInTypeAccess().getIntegerEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Double'
			{
				$current = grammarAccess.getBuiltInTypeAccess().getDoubleEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getBuiltInTypeAccess().getDoubleEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='String'
			{
				$current = grammarAccess.getBuiltInTypeAccess().getStringEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getBuiltInTypeAccess().getStringEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='LocalDate'
			{
				$current = grammarAccess.getBuiltInTypeAccess().getLocalDateEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getBuiltInTypeAccess().getLocalDateEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='LocalDateTime'
			{
				$current = grammarAccess.getBuiltInTypeAccess().getLocalDateTimeEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getBuiltInTypeAccess().getLocalDateTimeEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='BigDecimal'
			{
				$current = grammarAccess.getBuiltInTypeAccess().getBigDecimalEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getBuiltInTypeAccess().getBigDecimalEnumLiteralDeclaration_7());
			}
		)
	)
;

RULE_INT : ('0'..'9')+;

RULE_DECIMAL : RULE_INT '.' RULE_INT;

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_LESS : '<';

RULE_GREATER : '>';

RULE_LBRACKET : '[';

RULE_RBRACKET : ']';

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
