/*
 * generated by Xtext 2.38.0
 */
package com.yunzhi.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GenoMateGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class GenoMateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.GenoMate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGlobalConfigAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGlobalConfigGlobalConfigParserRuleCall_0_0 = (RuleCall)cGlobalConfigAssignment_0.eContents().get(0);
		private final Assignment cModelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModelModelParserRuleCall_1_0 = (RuleCall)cModelAssignment_1.eContents().get(0);
		private final Assignment cGenerateSectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGenerateSectionGenerateSectionParserRuleCall_2_0 = (RuleCall)cGenerateSectionAssignment_2.eContents().get(0);
		private final Assignment cMappingsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMappingsMappingParserRuleCall_3_0 = (RuleCall)cMappingsAssignment_3.eContents().get(0);
		
		//// 根规则：模型生成器定义
		//GenoMate:
		//    (globalConfig=GlobalConfig)?
		//    model=Model
		//    generateSection = GenerateSection
		//    mappings+=Mapping*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(globalConfig=GlobalConfig)?
		//model=Model
		//generateSection = GenerateSection
		//mappings+=Mapping*
		public Group getGroup() { return cGroup; }
		
		//(globalConfig=GlobalConfig)?
		public Assignment getGlobalConfigAssignment_0() { return cGlobalConfigAssignment_0; }
		
		//GlobalConfig
		public RuleCall getGlobalConfigGlobalConfigParserRuleCall_0_0() { return cGlobalConfigGlobalConfigParserRuleCall_0_0; }
		
		//model=Model
		public Assignment getModelAssignment_1() { return cModelAssignment_1; }
		
		//Model
		public RuleCall getModelModelParserRuleCall_1_0() { return cModelModelParserRuleCall_1_0; }
		
		//generateSection = GenerateSection
		public Assignment getGenerateSectionAssignment_2() { return cGenerateSectionAssignment_2; }
		
		//GenerateSection
		public RuleCall getGenerateSectionGenerateSectionParserRuleCall_2_0() { return cGenerateSectionGenerateSectionParserRuleCall_2_0; }
		
		//mappings+=Mapping*
		public Assignment getMappingsAssignment_3() { return cMappingsAssignment_3; }
		
		//Mapping
		public RuleCall getMappingsMappingParserRuleCall_3_0() { return cMappingsMappingParserRuleCall_3_0; }
	}
	public class GlobalConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.GlobalConfig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGlobalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPackageKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPackageAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPackageSTRINGTerminalRuleCall_3_0 = (RuleCall)cPackageAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDefaultAnnotationsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cVarDefaultAnnotationsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cVarDefaultAnnotationsVariableDeclarationParserRuleCall_4_2_0 = (RuleCall)cVarDefaultAnnotationsAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/////////////////////////
		//// 全局配置
		/////////////////////////
		//// 全局配置块，包含描述和默认注解变量
		//GlobalConfig:
		//    'global' '{'
		//        'package:' package=STRING
		//        ('defaultAnnotations' '{' (varDefaultAnnotations+=VariableDeclaration)* '}')?  // 全局注解变量
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'global' '{'
		//    'package:' package=STRING
		//    ('defaultAnnotations' '{' (varDefaultAnnotations+=VariableDeclaration)* '}')?  // 全局注解变量
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'global'
		public Keyword getGlobalKeyword_0() { return cGlobalKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'package:'
		public Keyword getPackageKeyword_2() { return cPackageKeyword_2; }
		
		//package=STRING
		public Assignment getPackageAssignment_3() { return cPackageAssignment_3; }
		
		//STRING
		public RuleCall getPackageSTRINGTerminalRuleCall_3_0() { return cPackageSTRINGTerminalRuleCall_3_0; }
		
		//('defaultAnnotations' '{' (varDefaultAnnotations+=VariableDeclaration)* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'defaultAnnotations'
		public Keyword getDefaultAnnotationsKeyword_4_0() { return cDefaultAnnotationsKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//(varDefaultAnnotations+=VariableDeclaration)*
		public Assignment getVarDefaultAnnotationsAssignment_4_2() { return cVarDefaultAnnotationsAssignment_4_2; }
		
		//VariableDeclaration
		public RuleCall getVarDefaultAnnotationsVariableDeclarationParserRuleCall_4_2_0() { return cVarDefaultAnnotationsVariableDeclarationParserRuleCall_4_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }
		
		//// 全局注解变量
		//  '}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldsFieldParserRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/////////////////////////
		//// 模型定义
		/////////////////////////
		//// 模型定义，包含模型名称和字段
		//Model:
		//    'model' name=ID '{'
		//        fields+=Field*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'model' name=ID '{'
		//    fields+=Field*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'model'
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//fields+=Field*
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_3_0() { return cFieldsFieldParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// 字段定义，包含类型和名称
		//Field:
		//    (type=Type)
		//    name=ID ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(type=Type)
		//name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//(type=Type)
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class LombokAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.LombokAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameLombokTypeEnumRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersAnnotationParametersParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		/////////////////////////
		//// 注解系统
		/////////////////////////
		//// Lombok 注解
		//LombokAnnotation:
		//    '@' name=LombokType
		//    ('(' parameters=AnnotationParameters? ')')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'@' name=LombokType
		//('(' parameters=AnnotationParameters? ')')?
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//name=LombokType
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//LombokType
		public RuleCall getNameLombokTypeEnumRuleCall_1_0() { return cNameLombokTypeEnumRuleCall_1_0; }
		
		//('(' parameters=AnnotationParameters? ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//parameters=AnnotationParameters?
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }
		
		//AnnotationParameters
		public RuleCall getParametersAnnotationParametersParserRuleCall_2_1_0() { return cParametersAnnotationParametersParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class MybatisPlusModelAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.MybatisPlusModelAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameMybatisPlusModelTypeEnumRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersAnnotationParametersParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//// MyBatis-Plus 模型注解
		//MybatisPlusModelAnnotation:
		//    '@' name=MybatisPlusModelType
		//    ('(' parameters=AnnotationParameters? ')')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'@' name=MybatisPlusModelType
		//('(' parameters=AnnotationParameters? ')')?
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//name=MybatisPlusModelType
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//MybatisPlusModelType
		public RuleCall getNameMybatisPlusModelTypeEnumRuleCall_1_0() { return cNameMybatisPlusModelTypeEnumRuleCall_1_0; }
		
		//('(' parameters=AnnotationParameters? ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//parameters=AnnotationParameters?
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }
		
		//AnnotationParameters
		public RuleCall getParametersAnnotationParametersParserRuleCall_2_1_0() { return cParametersAnnotationParametersParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class MybatisPlusFieldAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.MybatisPlusFieldAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameMybatisPlusFieldTypeEnumRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersAnnotationParametersParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//// MyBatis-Plus 字段注解
		//MybatisPlusFieldAnnotation:
		//    '@' name=MybatisPlusFieldType
		//    ('(' parameters=AnnotationParameters? ')')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'@' name=MybatisPlusFieldType
		//('(' parameters=AnnotationParameters? ')')?
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//name=MybatisPlusFieldType
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//MybatisPlusFieldType
		public RuleCall getNameMybatisPlusFieldTypeEnumRuleCall_1_0() { return cNameMybatisPlusFieldTypeEnumRuleCall_1_0; }
		
		//('(' parameters=AnnotationParameters? ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//parameters=AnnotationParameters?
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }
		
		//AnnotationParameters
		public RuleCall getParametersAnnotationParametersParserRuleCall_2_1_0() { return cParametersAnnotationParametersParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class BeanValidationAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.BeanValidationAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameBeanValidationTypeEnumRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersAnnotationParametersParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//// Bean 验证注解
		//BeanValidationAnnotation:
		//    '@' name=BeanValidationType
		//    ('(' parameters=AnnotationParameters? ')')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'@' name=BeanValidationType
		//('(' parameters=AnnotationParameters? ')')?
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//name=BeanValidationType
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//BeanValidationType
		public RuleCall getNameBeanValidationTypeEnumRuleCall_1_0() { return cNameBeanValidationTypeEnumRuleCall_1_0; }
		
		//('(' parameters=AnnotationParameters? ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//parameters=AnnotationParameters?
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }
		
		//AnnotationParameters
		public RuleCall getParametersAnnotationParametersParserRuleCall_2_1_0() { return cParametersAnnotationParametersParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class JacksonAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.JacksonAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameJacksonTypeEnumRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersAnnotationParametersParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//// Jackson 注解
		//JacksonAnnotation:
		//    '@' name=JacksonType
		//    ('(' parameters=AnnotationParameters? ')')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'@' name=JacksonType
		//('(' parameters=AnnotationParameters? ')')?
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//name=JacksonType
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//JacksonType
		public RuleCall getNameJacksonTypeEnumRuleCall_1_0() { return cNameJacksonTypeEnumRuleCall_1_0; }
		
		//('(' parameters=AnnotationParameters? ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//parameters=AnnotationParameters?
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }
		
		//AnnotationParameters
		public RuleCall getParametersAnnotationParametersParserRuleCall_2_1_0() { return cParametersAnnotationParametersParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class AnnotationParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.AnnotationParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnparametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnparametersParameterParserRuleCall_0_0 = (RuleCall)cAnnparametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//// 注解参数，多个参数用逗号分隔
		//AnnotationParameters:
		//    annparameters+=Parameter (',' parameters+=Parameter)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//annparameters+=Parameter (',' parameters+=Parameter)*
		public Group getGroup() { return cGroup; }
		
		//annparameters+=Parameter
		public Assignment getAnnparametersAssignment_0() { return cAnnparametersAssignment_0; }
		
		//Parameter
		public RuleCall getAnnparametersParameterParserRuleCall_0_0() { return cAnnparametersParameterParserRuleCall_0_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_1_0() { return cParametersParameterParserRuleCall_1_1_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueLiteralParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//// 注解参数键值对
		//Parameter:
		//    key=ID '=' value=Literal
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//key=ID '=' value=Literal
		public Group getGroup() { return cGroup; }
		
		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Literal
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Literal
		public RuleCall getValueLiteralParserRuleCall_2_0() { return cValueLiteralParserRuleCall_2_0; }
	}
	public class GenerateSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.GenerateSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGenerateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRulesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRulesGenerationRuleParserRuleCall_2_0 = (RuleCall)cRulesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/////////////////////////
		//// 生成规则
		/////////////////////////
		//// 生成规则块，包含多个生成规则
		//GenerateSection:
		//    'generate' '{'
		//        rules+=GenerationRule+
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'generate' '{'
		//    rules+=GenerationRule+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'generate'
		public Keyword getGenerateKeyword_0() { return cGenerateKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//rules+=GenerationRule+
		public Assignment getRulesAssignment_2() { return cRulesAssignment_2; }
		
		//GenerationRule
		public RuleCall getRulesGenerationRuleParserRuleCall_2_0() { return cRulesGenerationRuleParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class GenerationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.GenerationRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPoRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDtoRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVoRuleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// 生成规则类型：PO、DTO、VO
		//GenerationRule:
		//    PoRule | DtoRule | VoRule
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PoRule | DtoRule | VoRule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PoRule
		public RuleCall getPoRuleParserRuleCall_0() { return cPoRuleParserRuleCall_0; }
		
		//DtoRule
		public RuleCall getDtoRuleParserRuleCall_1() { return cDtoRuleParserRuleCall_1; }
		
		//VoRule
		public RuleCall getVoRuleParserRuleCall_2() { return cVoRuleParserRuleCall_2; }
	}
	public class PoRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.PoRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cModelModelCrossReference_2_0 = (CrossReference)cModelAssignment_2.eContents().get(0);
		private final RuleCall cModelModelIDTerminalRuleCall_2_0_1 = (RuleCall)cModelModelCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSerializableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cSerializableSerializableKeyword_4_0 = (Keyword)cSerializableAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLombokKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cLombokAnnotationAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLombokAnnotationLombokAnnotationParserRuleCall_5_1_0 = (RuleCall)cLombokAnnotationAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cMybatisPlusKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cMybatisPlusModelAnnotationAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cMybatisPlusModelAnnotationMybatisPlusModelAnnotationParserRuleCall_6_1_0 = (RuleCall)cMybatisPlusModelAnnotationAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cFieldAnnotationsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cFieldAnnsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cFieldAnnsFieldAnnotationParserRuleCall_7_2_0 = (RuleCall)cFieldAnnsAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cFieldAddKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cAddFieldAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cAddFieldPoAddFieldParserRuleCall_8_2_0 = (RuleCall)cAddFieldAssignment_8_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//// PO 生成规则
		//PoRule:
		//    'po' 'for' model=[Model|ID] '{'
		//        (serializable='Serializable')?
		//        ('lombok:' lombokAnnotation+=LombokAnnotation*)?
		//        ('mybatis-plus:' mybatisPlusModelAnnotation+=MybatisPlusModelAnnotation*)?
		//        ('fieldAnnotations' '{' fieldAnns+=FieldAnnotation* '}')?
		//        ('fieldAdd' '{' addField+=PoAddField* '}')?
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'po' 'for' model=[Model|ID] '{'
		//    (serializable='Serializable')?
		//    ('lombok:' lombokAnnotation+=LombokAnnotation*)?
		//    ('mybatis-plus:' mybatisPlusModelAnnotation+=MybatisPlusModelAnnotation*)?
		//    ('fieldAnnotations' '{' fieldAnns+=FieldAnnotation* '}')?
		//    ('fieldAdd' '{' addField+=PoAddField* '}')?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'po'
		public Keyword getPoKeyword_0() { return cPoKeyword_0; }
		
		//'for'
		public Keyword getForKeyword_1() { return cForKeyword_1; }
		
		//model=[Model|ID]
		public Assignment getModelAssignment_2() { return cModelAssignment_2; }
		
		//[Model|ID]
		public CrossReference getModelModelCrossReference_2_0() { return cModelModelCrossReference_2_0; }
		
		//ID
		public RuleCall getModelModelIDTerminalRuleCall_2_0_1() { return cModelModelIDTerminalRuleCall_2_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(serializable='Serializable')?
		public Assignment getSerializableAssignment_4() { return cSerializableAssignment_4; }
		
		//'Serializable'
		public Keyword getSerializableSerializableKeyword_4_0() { return cSerializableSerializableKeyword_4_0; }
		
		//('lombok:' lombokAnnotation+=LombokAnnotation*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'lombok:'
		public Keyword getLombokKeyword_5_0() { return cLombokKeyword_5_0; }
		
		//lombokAnnotation+=LombokAnnotation*
		public Assignment getLombokAnnotationAssignment_5_1() { return cLombokAnnotationAssignment_5_1; }
		
		//LombokAnnotation
		public RuleCall getLombokAnnotationLombokAnnotationParserRuleCall_5_1_0() { return cLombokAnnotationLombokAnnotationParserRuleCall_5_1_0; }
		
		//('mybatis-plus:' mybatisPlusModelAnnotation+=MybatisPlusModelAnnotation*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'mybatis-plus:'
		public Keyword getMybatisPlusKeyword_6_0() { return cMybatisPlusKeyword_6_0; }
		
		//mybatisPlusModelAnnotation+=MybatisPlusModelAnnotation*
		public Assignment getMybatisPlusModelAnnotationAssignment_6_1() { return cMybatisPlusModelAnnotationAssignment_6_1; }
		
		//MybatisPlusModelAnnotation
		public RuleCall getMybatisPlusModelAnnotationMybatisPlusModelAnnotationParserRuleCall_6_1_0() { return cMybatisPlusModelAnnotationMybatisPlusModelAnnotationParserRuleCall_6_1_0; }
		
		//('fieldAnnotations' '{' fieldAnns+=FieldAnnotation* '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'fieldAnnotations'
		public Keyword getFieldAnnotationsKeyword_7_0() { return cFieldAnnotationsKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//fieldAnns+=FieldAnnotation*
		public Assignment getFieldAnnsAssignment_7_2() { return cFieldAnnsAssignment_7_2; }
		
		//FieldAnnotation
		public RuleCall getFieldAnnsFieldAnnotationParserRuleCall_7_2_0() { return cFieldAnnsFieldAnnotationParserRuleCall_7_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
		
		//('fieldAdd' '{' addField+=PoAddField* '}')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'fieldAdd'
		public Keyword getFieldAddKeyword_8_0() { return cFieldAddKeyword_8_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }
		
		//addField+=PoAddField*
		public Assignment getAddFieldAssignment_8_2() { return cAddFieldAssignment_8_2; }
		
		//PoAddField
		public RuleCall getAddFieldPoAddFieldParserRuleCall_8_2_0() { return cAddFieldPoAddFieldParserRuleCall_8_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_3() { return cRightCurlyBracketKeyword_8_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class DtoRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.DtoRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDtoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cModelModelCrossReference_2_0 = (CrossReference)cModelAssignment_2.eContents().get(0);
		private final RuleCall cModelModelIDTerminalRuleCall_2_0_1 = (RuleCall)cModelModelCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDtosAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDtosDtoDefinitionParserRuleCall_4_0 = (RuleCall)cDtosAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// DTO 生成规则
		//DtoRule:
		//    'dto' 'for' model=[Model|ID] '{'
		//        dtos+=DtoDefinition+
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'dto' 'for' model=[Model|ID] '{'
		//    dtos+=DtoDefinition+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'dto'
		public Keyword getDtoKeyword_0() { return cDtoKeyword_0; }
		
		//'for'
		public Keyword getForKeyword_1() { return cForKeyword_1; }
		
		//model=[Model|ID]
		public Assignment getModelAssignment_2() { return cModelAssignment_2; }
		
		//[Model|ID]
		public CrossReference getModelModelCrossReference_2_0() { return cModelModelCrossReference_2_0; }
		
		//ID
		public RuleCall getModelModelIDTerminalRuleCall_2_0_1() { return cModelModelIDTerminalRuleCall_2_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//dtos+=DtoDefinition+
		public Assignment getDtosAssignment_4() { return cDtosAssignment_4; }
		
		//DtoDefinition
		public RuleCall getDtosDtoDefinitionParserRuleCall_4_0() { return cDtosDtoDefinitionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class VoRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.VoRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cModelModelCrossReference_2_0 = (CrossReference)cModelAssignment_2.eContents().get(0);
		private final RuleCall cModelModelIDTerminalRuleCall_2_0_1 = (RuleCall)cModelModelCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVosAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVosVoDefinitionParserRuleCall_4_0 = (RuleCall)cVosAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// VO 生成规则
		//VoRule:
		//    'vo' 'for' model=[Model|ID] '{'
		//        vos+=VoDefinition+
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'vo' 'for' model=[Model|ID] '{'
		//    vos+=VoDefinition+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'vo'
		public Keyword getVoKeyword_0() { return cVoKeyword_0; }
		
		//'for'
		public Keyword getForKeyword_1() { return cForKeyword_1; }
		
		//model=[Model|ID]
		public Assignment getModelAssignment_2() { return cModelAssignment_2; }
		
		//[Model|ID]
		public CrossReference getModelModelCrossReference_2_0() { return cModelModelCrossReference_2_0; }
		
		//ID
		public RuleCall getModelModelIDTerminalRuleCall_2_0_1() { return cModelModelIDTerminalRuleCall_2_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//vos+=VoDefinition+
		public Assignment getVosAssignment_4() { return cVosAssignment_4; }
		
		//VoDefinition
		public RuleCall getVosVoDefinitionParserRuleCall_4_0() { return cVosVoDefinitionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DtoDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.DtoDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDtoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSerializableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cSerializableSerializableKeyword_3_0 = (Keyword)cSerializableAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLombokKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLombokAnnotationAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLombokAnnotationLombokAnnotationParserRuleCall_4_1_0 = (RuleCall)cLombokAnnotationAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cFieldExcludeKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Alternatives cAlternatives_5_2 = (Alternatives)cGroup_5.eContents().get(2);
		private final Assignment cExclusionsAssignment_5_2_0 = (Assignment)cAlternatives_5_2.eContents().get(0);
		private final RuleCall cExclusionsExclusionsParserRuleCall_5_2_0_0 = (RuleCall)cExclusionsAssignment_5_2_0.eContents().get(0);
		private final Group cGroup_5_2_1 = (Group)cAlternatives_5_2.eContents().get(1);
		private final Keyword cExcludeAllKeyword_5_2_1_0 = (Keyword)cGroup_5_2_1.eContents().get(0);
		private final Assignment cExcludeAllAssignment_5_2_1_1 = (Assignment)cGroup_5_2_1.eContents().get(1);
		private final RuleCall cExcludeAllBOOLParserRuleCall_5_2_1_1_0 = (RuleCall)cExcludeAllAssignment_5_2_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_2_1_2 = (Keyword)cGroup_5_2_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cFieldValidationKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cFieldAnnotationsBlockAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cFieldAnnotationsBlockFieldValidationBlockParserRuleCall_6_2_0 = (RuleCall)cFieldAnnotationsBlockAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cFieldAddKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cAddFieldAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cAddFieldDtoAddFieldParserRuleCall_7_2_0 = (RuleCall)cAddFieldAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//// DTO 定义
		//DtoDefinition:
		//    'dto' name=ID '{'
		//        (serializable='Serializable')?
		//        ('lombok:' lombokAnnotation+=LombokAnnotation*)?
		//        ('fieldExclude' '{' (exclusions+=Exclusions* | ('excludeAll:' excludeAll=BOOL ';')) '}') ?
		//        ('fieldValidation' '{' fieldAnnotationsBlock=FieldValidationBlock '}')?
		//        ('fieldAdd' '{' addField+=DtoAddField* '}')?
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'dto' name=ID '{'
		//    (serializable='Serializable')?
		//    ('lombok:' lombokAnnotation+=LombokAnnotation*)?
		//    ('fieldExclude' '{' (exclusions+=Exclusions* | ('excludeAll:' excludeAll=BOOL ';')) '}') ?
		//    ('fieldValidation' '{' fieldAnnotationsBlock=FieldValidationBlock '}')?
		//    ('fieldAdd' '{' addField+=DtoAddField* '}')?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'dto'
		public Keyword getDtoKeyword_0() { return cDtoKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(serializable='Serializable')?
		public Assignment getSerializableAssignment_3() { return cSerializableAssignment_3; }
		
		//'Serializable'
		public Keyword getSerializableSerializableKeyword_3_0() { return cSerializableSerializableKeyword_3_0; }
		
		//('lombok:' lombokAnnotation+=LombokAnnotation*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'lombok:'
		public Keyword getLombokKeyword_4_0() { return cLombokKeyword_4_0; }
		
		//lombokAnnotation+=LombokAnnotation*
		public Assignment getLombokAnnotationAssignment_4_1() { return cLombokAnnotationAssignment_4_1; }
		
		//LombokAnnotation
		public RuleCall getLombokAnnotationLombokAnnotationParserRuleCall_4_1_0() { return cLombokAnnotationLombokAnnotationParserRuleCall_4_1_0; }
		
		//('fieldExclude' '{' (exclusions+=Exclusions* | ('excludeAll:' excludeAll=BOOL ';')) '}') ?
		public Group getGroup_5() { return cGroup_5; }
		
		//'fieldExclude'
		public Keyword getFieldExcludeKeyword_5_0() { return cFieldExcludeKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//(exclusions+=Exclusions* | ('excludeAll:' excludeAll=BOOL ';'))
		public Alternatives getAlternatives_5_2() { return cAlternatives_5_2; }
		
		//exclusions+=Exclusions*
		public Assignment getExclusionsAssignment_5_2_0() { return cExclusionsAssignment_5_2_0; }
		
		//Exclusions
		public RuleCall getExclusionsExclusionsParserRuleCall_5_2_0_0() { return cExclusionsExclusionsParserRuleCall_5_2_0_0; }
		
		//('excludeAll:' excludeAll=BOOL ';')
		public Group getGroup_5_2_1() { return cGroup_5_2_1; }
		
		//'excludeAll:'
		public Keyword getExcludeAllKeyword_5_2_1_0() { return cExcludeAllKeyword_5_2_1_0; }
		
		//excludeAll=BOOL
		public Assignment getExcludeAllAssignment_5_2_1_1() { return cExcludeAllAssignment_5_2_1_1; }
		
		//BOOL
		public RuleCall getExcludeAllBOOLParserRuleCall_5_2_1_1_0() { return cExcludeAllBOOLParserRuleCall_5_2_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5_2_1_2() { return cSemicolonKeyword_5_2_1_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
		
		//('fieldValidation' '{' fieldAnnotationsBlock=FieldValidationBlock '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'fieldValidation'
		public Keyword getFieldValidationKeyword_6_0() { return cFieldValidationKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//fieldAnnotationsBlock=FieldValidationBlock
		public Assignment getFieldAnnotationsBlockAssignment_6_2() { return cFieldAnnotationsBlockAssignment_6_2; }
		
		//FieldValidationBlock
		public RuleCall getFieldAnnotationsBlockFieldValidationBlockParserRuleCall_6_2_0() { return cFieldAnnotationsBlockFieldValidationBlockParserRuleCall_6_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }
		
		//('fieldAdd' '{' addField+=DtoAddField* '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'fieldAdd'
		public Keyword getFieldAddKeyword_7_0() { return cFieldAddKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//addField+=DtoAddField*
		public Assignment getAddFieldAssignment_7_2() { return cAddFieldAssignment_7_2; }
		
		//DtoAddField
		public RuleCall getAddFieldDtoAddFieldParserRuleCall_7_2_0() { return cAddFieldDtoAddFieldParserRuleCall_7_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class VoDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.VoDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSerializableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cSerializableSerializableKeyword_3_0 = (Keyword)cSerializableAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLombokKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLombokAnnotationAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLombokAnnotationLombokAnnotationParserRuleCall_4_1_0 = (RuleCall)cLombokAnnotationAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cFieldExcludeKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Alternatives cAlternatives_5_2 = (Alternatives)cGroup_5.eContents().get(2);
		private final Assignment cExclusionsAssignment_5_2_0 = (Assignment)cAlternatives_5_2.eContents().get(0);
		private final RuleCall cExclusionsExclusionsParserRuleCall_5_2_0_0 = (RuleCall)cExclusionsAssignment_5_2_0.eContents().get(0);
		private final Group cGroup_5_2_1 = (Group)cAlternatives_5_2.eContents().get(1);
		private final Keyword cExcludeAllKeyword_5_2_1_0 = (Keyword)cGroup_5_2_1.eContents().get(0);
		private final Assignment cExcludeAllAssignment_5_2_1_1 = (Assignment)cGroup_5_2_1.eContents().get(1);
		private final RuleCall cExcludeAllBOOLParserRuleCall_5_2_1_1_0 = (RuleCall)cExcludeAllAssignment_5_2_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_2_1_2 = (Keyword)cGroup_5_2_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cFieldJacksonKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cJacksonsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cJacksonsVoJacksonParserRuleCall_6_2_0 = (RuleCall)cJacksonsAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cFieldAddKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cAddFieldAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cAddFieldVoAddFieldParserRuleCall_7_2_0 = (RuleCall)cAddFieldAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//// VO 定义
		//VoDefinition:
		//    'vo' name=ID '{'
		//        (serializable='Serializable')?
		//        ('lombok:' lombokAnnotation+=LombokAnnotation*)?
		//        ('fieldExclude' '{' (exclusions+=Exclusions* | ('excludeAll:' excludeAll=BOOL ';')) '}') ?
		//        ('fieldJackson' '{' jacksons+=VoJackson* '}')?
		//        ('fieldAdd' '{' addField+=VoAddField* '}')?
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'vo' name=ID '{'
		//    (serializable='Serializable')?
		//    ('lombok:' lombokAnnotation+=LombokAnnotation*)?
		//    ('fieldExclude' '{' (exclusions+=Exclusions* | ('excludeAll:' excludeAll=BOOL ';')) '}') ?
		//    ('fieldJackson' '{' jacksons+=VoJackson* '}')?
		//    ('fieldAdd' '{' addField+=VoAddField* '}')?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'vo'
		public Keyword getVoKeyword_0() { return cVoKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(serializable='Serializable')?
		public Assignment getSerializableAssignment_3() { return cSerializableAssignment_3; }
		
		//'Serializable'
		public Keyword getSerializableSerializableKeyword_3_0() { return cSerializableSerializableKeyword_3_0; }
		
		//('lombok:' lombokAnnotation+=LombokAnnotation*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'lombok:'
		public Keyword getLombokKeyword_4_0() { return cLombokKeyword_4_0; }
		
		//lombokAnnotation+=LombokAnnotation*
		public Assignment getLombokAnnotationAssignment_4_1() { return cLombokAnnotationAssignment_4_1; }
		
		//LombokAnnotation
		public RuleCall getLombokAnnotationLombokAnnotationParserRuleCall_4_1_0() { return cLombokAnnotationLombokAnnotationParserRuleCall_4_1_0; }
		
		//('fieldExclude' '{' (exclusions+=Exclusions* | ('excludeAll:' excludeAll=BOOL ';')) '}') ?
		public Group getGroup_5() { return cGroup_5; }
		
		//'fieldExclude'
		public Keyword getFieldExcludeKeyword_5_0() { return cFieldExcludeKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//(exclusions+=Exclusions* | ('excludeAll:' excludeAll=BOOL ';'))
		public Alternatives getAlternatives_5_2() { return cAlternatives_5_2; }
		
		//exclusions+=Exclusions*
		public Assignment getExclusionsAssignment_5_2_0() { return cExclusionsAssignment_5_2_0; }
		
		//Exclusions
		public RuleCall getExclusionsExclusionsParserRuleCall_5_2_0_0() { return cExclusionsExclusionsParserRuleCall_5_2_0_0; }
		
		//('excludeAll:' excludeAll=BOOL ';')
		public Group getGroup_5_2_1() { return cGroup_5_2_1; }
		
		//'excludeAll:'
		public Keyword getExcludeAllKeyword_5_2_1_0() { return cExcludeAllKeyword_5_2_1_0; }
		
		//excludeAll=BOOL
		public Assignment getExcludeAllAssignment_5_2_1_1() { return cExcludeAllAssignment_5_2_1_1; }
		
		//BOOL
		public RuleCall getExcludeAllBOOLParserRuleCall_5_2_1_1_0() { return cExcludeAllBOOLParserRuleCall_5_2_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5_2_1_2() { return cSemicolonKeyword_5_2_1_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
		
		//('fieldJackson' '{' jacksons+=VoJackson* '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'fieldJackson'
		public Keyword getFieldJacksonKeyword_6_0() { return cFieldJacksonKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//jacksons+=VoJackson*
		public Assignment getJacksonsAssignment_6_2() { return cJacksonsAssignment_6_2; }
		
		//VoJackson
		public RuleCall getJacksonsVoJacksonParserRuleCall_6_2_0() { return cJacksonsVoJacksonParserRuleCall_6_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }
		
		//('fieldAdd' '{' addField+=VoAddField* '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'fieldAdd'
		public Keyword getFieldAddKeyword_7_0() { return cFieldAddKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//addField+=VoAddField*
		public Assignment getAddFieldAssignment_7_2() { return cAddFieldAssignment_7_2; }
		
		//VoAddField
		public RuleCall getAddFieldVoAddFieldParserRuleCall_7_2_0() { return cAddFieldVoAddFieldParserRuleCall_7_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class FieldAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.FieldAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFieldFieldCrossReference_1_0 = (CrossReference)cFieldAssignment_1.eContents().get(0);
		private final RuleCall cFieldFieldQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cFieldFieldCrossReference_1_0.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAnnListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnnListMybatisPlusFieldAnnotationParserRuleCall_3_0 = (RuleCall)cAnnListAssignment_3.eContents().get(0);
		
		//// PO 字段注解
		//FieldAnnotation:
		//    '*' field=[Field|QualifiedName] ':' annList+=MybatisPlusFieldAnnotation*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' field=[Field|QualifiedName] ':' annList+=MybatisPlusFieldAnnotation*
		public Group getGroup() { return cGroup; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//field=[Field|QualifiedName]
		public Assignment getFieldAssignment_1() { return cFieldAssignment_1; }
		
		//[Field|QualifiedName]
		public CrossReference getFieldFieldCrossReference_1_0() { return cFieldFieldCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getFieldFieldQualifiedNameParserRuleCall_1_0_1() { return cFieldFieldQualifiedNameParserRuleCall_1_0_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//annList+=MybatisPlusFieldAnnotation*
		public Assignment getAnnListAssignment_3() { return cAnnListAssignment_3; }
		
		//MybatisPlusFieldAnnotation
		public RuleCall getAnnListMybatisPlusFieldAnnotationParserRuleCall_3_0() { return cAnnListMybatisPlusFieldAnnotationParserRuleCall_3_0; }
	}
	public class FieldValidationBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.FieldValidationBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFieldValidationBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cActionGlobalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionGlobalGlobalActionParserRuleCall_1_0 = (RuleCall)cActionGlobalAssignment_1.eContents().get(0);
		private final Assignment cActionLocalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionLocalLocalLoopActionParserRuleCall_2_0 = (RuleCall)cActionLocalAssignment_2.eContents().get(0);
		private final Assignment cActionSingleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionSingleSingleActionParserRuleCall_3_0 = (RuleCall)cActionSingleAssignment_3.eContents().get(0);
		
		//// DTO 字段验证块
		//FieldValidationBlock:
		//    {FieldValidationBlock}
		//    actionGlobal+=GlobalAction*
		//    actionLocal+=LocalLoopAction*
		//    actionSingle=SingleAction?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{FieldValidationBlock}
		//actionGlobal+=GlobalAction*
		//actionLocal+=LocalLoopAction*
		//actionSingle=SingleAction?
		public Group getGroup() { return cGroup; }
		
		//{FieldValidationBlock}
		public Action getFieldValidationBlockAction_0() { return cFieldValidationBlockAction_0; }
		
		//actionGlobal+=GlobalAction*
		public Assignment getActionGlobalAssignment_1() { return cActionGlobalAssignment_1; }
		
		//GlobalAction
		public RuleCall getActionGlobalGlobalActionParserRuleCall_1_0() { return cActionGlobalGlobalActionParserRuleCall_1_0; }
		
		//actionLocal+=LocalLoopAction*
		public Assignment getActionLocalAssignment_2() { return cActionLocalAssignment_2; }
		
		//LocalLoopAction
		public RuleCall getActionLocalLocalLoopActionParserRuleCall_2_0() { return cActionLocalLocalLoopActionParserRuleCall_2_0; }
		
		//actionSingle=SingleAction?
		public Assignment getActionSingleAssignment_3() { return cActionSingleAssignment_3; }
		
		//SingleAction
		public RuleCall getActionSingleSingleActionParserRuleCall_3_0() { return cActionSingleSingleActionParserRuleCall_3_0; }
	}
	public class SingleActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.SingleAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSingleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValidationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValidationsDtoValidationParserRuleCall_2_0 = (RuleCall)cValidationsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// 单个设置
		//SingleAction:
		//    'single:' '{' validations+=DtoValidation+ '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'single:' '{' validations+=DtoValidation+ '}'
		public Group getGroup() { return cGroup; }
		
		//'single:'
		public Keyword getSingleKeyword_0() { return cSingleKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//validations+=DtoValidation+
		public Assignment getValidationsAssignment_2() { return cValidationsAssignment_2; }
		
		//DtoValidation
		public RuleCall getValidationsDtoValidationParserRuleCall_2_0() { return cValidationsDtoValidationParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class LocalLoopActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.LocalLoopAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLocalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cForeachKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFieldKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVarDeclarationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVarDeclarationsVariableDeclarationParserRuleCall_4_0 = (RuleCall)cVarDeclarationsAssignment_4.eContents().get(0);
		private final Assignment cActionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cActionsLocalActionParserRuleCall_5_0 = (RuleCall)cActionsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// 循环语句
		//LocalLoopAction:
		//    'local:''foreach' 'field' '{'
		//        varDeclarations+=VariableDeclaration*
		//        actions+=LocalAction+
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'local:''foreach' 'field' '{'
		//    varDeclarations+=VariableDeclaration*
		//    actions+=LocalAction+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'local:'
		public Keyword getLocalKeyword_0() { return cLocalKeyword_0; }
		
		//'foreach'
		public Keyword getForeachKeyword_1() { return cForeachKeyword_1; }
		
		//'field'
		public Keyword getFieldKeyword_2() { return cFieldKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//varDeclarations+=VariableDeclaration*
		public Assignment getVarDeclarationsAssignment_4() { return cVarDeclarationsAssignment_4; }
		
		//VariableDeclaration
		public RuleCall getVarDeclarationsVariableDeclarationParserRuleCall_4_0() { return cVarDeclarationsVariableDeclarationParserRuleCall_4_0; }
		
		//actions+=LocalAction+
		public Assignment getActionsAssignment_5() { return cActionsAssignment_5; }
		
		//LocalAction
		public RuleCall getActionsLocalActionParserRuleCall_5_0() { return cActionsLocalActionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class GlobalActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.GlobalAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGlobalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cVariableVariableDeclarationCrossReference_3_0 = (CrossReference)cVariableAssignment_3.eContents().get(0);
		private final RuleCall cVariableVariableDeclarationIDTerminalRuleCall_3_0_1 = (RuleCall)cVariableVariableDeclarationCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// 全局设置
		//GlobalAction:
		//    'global:' 'set' 'to'  variable=[VariableDeclaration|ID] ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'global:' 'set' 'to'  variable=[VariableDeclaration|ID] ';'
		public Group getGroup() { return cGroup; }
		
		//'global:'
		public Keyword getGlobalKeyword_0() { return cGlobalKeyword_0; }
		
		//'set'
		public Keyword getSetKeyword_1() { return cSetKeyword_1; }
		
		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//variable=[VariableDeclaration|ID]
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }
		
		//[VariableDeclaration|ID]
		public CrossReference getVariableVariableDeclarationCrossReference_3_0() { return cVariableVariableDeclarationCrossReference_3_0; }
		
		//ID
		public RuleCall getVariableVariableDeclarationIDTerminalRuleCall_3_0_1() { return cVariableVariableDeclarationIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class LocalActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.LocalAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFieldKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionTypeConditionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSetKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cVariableAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cVariableVariableDeclarationCrossReference_6_0 = (CrossReference)cVariableAssignment_6.eContents().get(0);
		private final RuleCall cVariableVariableDeclarationIDTerminalRuleCall_6_0_1 = (RuleCall)cVariableVariableDeclarationCrossReference_6_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//// 注解动作
		//LocalAction:
		//    'if' 'field' condition=TypeCondition '{'
		//        'set' 'to' variable=[VariableDeclaration|ID] ';'
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' 'field' condition=TypeCondition '{'
		//    'set' 'to' variable=[VariableDeclaration|ID] ';'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'field'
		public Keyword getFieldKeyword_1() { return cFieldKeyword_1; }
		
		//condition=TypeCondition
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//TypeCondition
		public RuleCall getConditionTypeConditionParserRuleCall_2_0() { return cConditionTypeConditionParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'set'
		public Keyword getSetKeyword_4() { return cSetKeyword_4; }
		
		//'to'
		public Keyword getToKeyword_5() { return cToKeyword_5; }
		
		//variable=[VariableDeclaration|ID]
		public Assignment getVariableAssignment_6() { return cVariableAssignment_6; }
		
		//[VariableDeclaration|ID]
		public CrossReference getVariableVariableDeclarationCrossReference_6_0() { return cVariableVariableDeclarationCrossReference_6_0; }
		
		//ID
		public RuleCall getVariableVariableDeclarationIDTerminalRuleCall_6_0_1() { return cVariableVariableDeclarationIDTerminalRuleCall_6_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class TypeConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.TypeCondition");
		private final RuleCall cOrTypeConditionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// 类型条件
		//TypeCondition:
		//    OrTypeCondition
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//OrTypeCondition
		public RuleCall getOrTypeConditionParserRuleCall() { return cOrTypeConditionParserRuleCall; }
	}
	public class OrTypeConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.OrTypeCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftAndTypeConditionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAndTypeConditionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// 或类型条件
		//OrTypeCondition:
		//    left=AndTypeCondition ('||' right+=AndTypeCondition)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//left=AndTypeCondition ('||' right+=AndTypeCondition)*
		public Group getGroup() { return cGroup; }
		
		//left=AndTypeCondition
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//AndTypeCondition
		public RuleCall getLeftAndTypeConditionParserRuleCall_0_0() { return cLeftAndTypeConditionParserRuleCall_0_0; }
		
		//('||' right+=AndTypeCondition)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_0() { return cVerticalLineVerticalLineKeyword_1_0; }
		
		//right+=AndTypeCondition
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//AndTypeCondition
		public RuleCall getRightAndTypeConditionParserRuleCall_1_1_0() { return cRightAndTypeConditionParserRuleCall_1_1_0; }
	}
	public class AndTypeConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.AndTypeCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftTypeEqualityConditionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightTypeEqualityConditionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// 与类型条件
		//AndTypeCondition:
		//    left=TypeEqualityCondition ('&&' right+=TypeEqualityCondition)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//left=TypeEqualityCondition ('&&' right+=TypeEqualityCondition)*
		public Group getGroup() { return cGroup; }
		
		//left=TypeEqualityCondition
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//TypeEqualityCondition
		public RuleCall getLeftTypeEqualityConditionParserRuleCall_0_0() { return cLeftTypeEqualityConditionParserRuleCall_0_0; }
		
		//('&&' right+=TypeEqualityCondition)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_0() { return cAmpersandAmpersandKeyword_1_0; }
		
		//right+=TypeEqualityCondition
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//TypeEqualityCondition
		public RuleCall getRightTypeEqualityConditionParserRuleCall_1_1_0() { return cRightTypeEqualityConditionParserRuleCall_1_1_0; }
	}
	public class TypeEqualityConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.TypeEqualityCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIsEqualAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cIsEqualEqualsSignEqualsSignKeyword_1_0_0 = (Keyword)cIsEqualAssignment_1_0.eContents().get(0);
		private final Assignment cIsNotEqualAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cIsNotEqualExclamationMarkEqualsSignKeyword_1_1_0 = (Keyword)cIsNotEqualAssignment_1_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//// 类型相等条件
		//TypeEqualityCondition:
		//    'type' ( isEqual='==' | isNotEqual='!=') type=Type
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'type' ( isEqual='==' | isNotEqual='!=') type=Type
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//( isEqual='==' | isNotEqual='!=')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//isEqual='=='
		public Assignment getIsEqualAssignment_1_0() { return cIsEqualAssignment_1_0; }
		
		//'=='
		public Keyword getIsEqualEqualsSignEqualsSignKeyword_1_0_0() { return cIsEqualEqualsSignEqualsSignKeyword_1_0_0; }
		
		//isNotEqual='!='
		public Assignment getIsNotEqualAssignment_1_1() { return cIsNotEqualAssignment_1_1; }
		
		//'!='
		public Keyword getIsNotEqualExclamationMarkEqualsSignKeyword_1_1_0() { return cIsNotEqualExclamationMarkEqualsSignKeyword_1_1_0; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAnnotationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnnotationBeanValidationAnnotationParserRuleCall_3_0 = (RuleCall)cAnnotationAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// 变量声明
		//VariableDeclaration:
		//    'var' name=ID '=' annotation=BeanValidationAnnotation ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' name=ID '=' annotation=BeanValidationAnnotation ';'
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//annotation=BeanValidationAnnotation
		public Assignment getAnnotationAssignment_3() { return cAnnotationAssignment_3; }
		
		//BeanValidationAnnotation
		public RuleCall getAnnotationBeanValidationAnnotationParserRuleCall_3_0() { return cAnnotationBeanValidationAnnotationParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class PoAddFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.PoAddField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropertiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertiesPropertyDeclarationParserRuleCall_1_0 = (RuleCall)cPropertiesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAnnotationListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAnnotationListMybatisPlusFieldAnnotationParserRuleCall_2_1_0 = (RuleCall)cAnnotationListAssignment_2_1.eContents().get(0);
		
		//// PO 添加字段
		//PoAddField:
		//    '+' properties=PropertyDeclaration
		//    (':' annotationList+=MybatisPlusFieldAnnotation*)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'+' properties=PropertyDeclaration
		//(':' annotationList+=MybatisPlusFieldAnnotation*)?
		public Group getGroup() { return cGroup; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//properties=PropertyDeclaration
		public Assignment getPropertiesAssignment_1() { return cPropertiesAssignment_1; }
		
		//PropertyDeclaration
		public RuleCall getPropertiesPropertyDeclarationParserRuleCall_1_0() { return cPropertiesPropertyDeclarationParserRuleCall_1_0; }
		
		//(':' annotationList+=MybatisPlusFieldAnnotation*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//annotationList+=MybatisPlusFieldAnnotation*
		public Assignment getAnnotationListAssignment_2_1() { return cAnnotationListAssignment_2_1; }
		
		//MybatisPlusFieldAnnotation
		public RuleCall getAnnotationListMybatisPlusFieldAnnotationParserRuleCall_2_1_0() { return cAnnotationListMybatisPlusFieldAnnotationParserRuleCall_2_1_0; }
	}
	public class DtoAddFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.DtoAddField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropertiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertiesPropertyDeclarationParserRuleCall_1_0 = (RuleCall)cPropertiesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAnnotationListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAnnotationListBeanValidationAnnotationParserRuleCall_2_1_0 = (RuleCall)cAnnotationListAssignment_2_1.eContents().get(0);
		
		//// DTO 添加字段
		//DtoAddField:
		//    '+' properties=PropertyDeclaration
		//    (':' annotationList+=BeanValidationAnnotation*)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'+' properties=PropertyDeclaration
		//(':' annotationList+=BeanValidationAnnotation*)?
		public Group getGroup() { return cGroup; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//properties=PropertyDeclaration
		public Assignment getPropertiesAssignment_1() { return cPropertiesAssignment_1; }
		
		//PropertyDeclaration
		public RuleCall getPropertiesPropertyDeclarationParserRuleCall_1_0() { return cPropertiesPropertyDeclarationParserRuleCall_1_0; }
		
		//(':' annotationList+=BeanValidationAnnotation*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//annotationList+=BeanValidationAnnotation*
		public Assignment getAnnotationListAssignment_2_1() { return cAnnotationListAssignment_2_1; }
		
		//BeanValidationAnnotation
		public RuleCall getAnnotationListBeanValidationAnnotationParserRuleCall_2_1_0() { return cAnnotationListBeanValidationAnnotationParserRuleCall_2_1_0; }
	}
	public class VoAddFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.VoAddField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropertiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertiesPropertyDeclarationParserRuleCall_1_0 = (RuleCall)cPropertiesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAnnotationListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAnnotationListJacksonAnnotationParserRuleCall_2_1_0 = (RuleCall)cAnnotationListAssignment_2_1.eContents().get(0);
		
		//// VO 添加字段
		//VoAddField:
		//    '+' properties=PropertyDeclaration
		//    (':' annotationList+=JacksonAnnotation*)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'+' properties=PropertyDeclaration
		//(':' annotationList+=JacksonAnnotation*)?
		public Group getGroup() { return cGroup; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//properties=PropertyDeclaration
		public Assignment getPropertiesAssignment_1() { return cPropertiesAssignment_1; }
		
		//PropertyDeclaration
		public RuleCall getPropertiesPropertyDeclarationParserRuleCall_1_0() { return cPropertiesPropertyDeclarationParserRuleCall_1_0; }
		
		//(':' annotationList+=JacksonAnnotation*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//annotationList+=JacksonAnnotation*
		public Assignment getAnnotationListAssignment_2_1() { return cAnnotationListAssignment_2_1; }
		
		//JacksonAnnotation
		public RuleCall getAnnotationListJacksonAnnotationParserRuleCall_2_1_0() { return cAnnotationListJacksonAnnotationParserRuleCall_2_1_0; }
	}
	public class ExclusionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.Exclusions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFieldFieldCrossReference_1_0 = (CrossReference)cFieldAssignment_1.eContents().get(0);
		private final RuleCall cFieldFieldQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cFieldFieldCrossReference_1_0.eContents().get(1);
		
		//// 排除字段
		//Exclusions:
		//    '-' field=[Field|QualifiedName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'-' field=[Field|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//field=[Field|QualifiedName]
		public Assignment getFieldAssignment_1() { return cFieldAssignment_1; }
		
		//[Field|QualifiedName]
		public CrossReference getFieldFieldCrossReference_1_0() { return cFieldFieldCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getFieldFieldQualifiedNameParserRuleCall_1_0_1() { return cFieldFieldQualifiedNameParserRuleCall_1_0_1; }
	}
	public class DtoValidationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.DtoValidation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFieldFieldCrossReference_1_0 = (CrossReference)cFieldAssignment_1.eContents().get(0);
		private final RuleCall cFieldFieldQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cFieldFieldCrossReference_1_0.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAnnListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnnListBeanValidationAnnotationParserRuleCall_3_0 = (RuleCall)cAnnListAssignment_3.eContents().get(0);
		
		//// DTO 验证规则
		//DtoValidation:
		//    '*' field=[Field|QualifiedName] ':' annList+=BeanValidationAnnotation*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' field=[Field|QualifiedName] ':' annList+=BeanValidationAnnotation*
		public Group getGroup() { return cGroup; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//field=[Field|QualifiedName]
		public Assignment getFieldAssignment_1() { return cFieldAssignment_1; }
		
		//[Field|QualifiedName]
		public CrossReference getFieldFieldCrossReference_1_0() { return cFieldFieldCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getFieldFieldQualifiedNameParserRuleCall_1_0_1() { return cFieldFieldQualifiedNameParserRuleCall_1_0_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//annList+=BeanValidationAnnotation*
		public Assignment getAnnListAssignment_3() { return cAnnListAssignment_3; }
		
		//BeanValidationAnnotation
		public RuleCall getAnnListBeanValidationAnnotationParserRuleCall_3_0() { return cAnnListBeanValidationAnnotationParserRuleCall_3_0; }
	}
	public class VoJacksonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.VoJackson");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFieldFieldCrossReference_1_0 = (CrossReference)cFieldAssignment_1.eContents().get(0);
		private final RuleCall cFieldFieldQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cFieldFieldCrossReference_1_0.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAnnListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnnListJacksonAnnotationParserRuleCall_3_0 = (RuleCall)cAnnListAssignment_3.eContents().get(0);
		
		//// VO Jackson 注解规则
		//VoJackson:
		//    '*' field=[Field|QualifiedName] ':' annList+=JacksonAnnotation*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' field=[Field|QualifiedName] ':' annList+=JacksonAnnotation*
		public Group getGroup() { return cGroup; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//field=[Field|QualifiedName]
		public Assignment getFieldAssignment_1() { return cFieldAssignment_1; }
		
		//[Field|QualifiedName]
		public CrossReference getFieldFieldCrossReference_1_0() { return cFieldFieldCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getFieldFieldQualifiedNameParserRuleCall_1_0_1() { return cFieldFieldQualifiedNameParserRuleCall_1_0_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//annList+=JacksonAnnotation*
		public Assignment getAnnListAssignment_3() { return cAnnListAssignment_3; }
		
		//JacksonAnnotation
		public RuleCall getAnnListJacksonAnnotationParserRuleCall_3_0() { return cAnnListJacksonAnnotationParserRuleCall_3_0; }
	}
	public class PropertyDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.PropertyDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStaticAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cStaticStaticKeyword_0_0 = (Keyword)cStaticAssignment_0.eContents().get(0);
		private final Assignment cFinalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cFinalFinalKeyword_1_0 = (Keyword)cFinalAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cDefaultClauseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefaultClauseDefaultClauseParserRuleCall_4_0 = (RuleCall)cDefaultClauseAssignment_4.eContents().get(0);
		
		/////////////////////////
		//// 属性声明
		/////////////////////////
		//// 属性声明，包含类型、名称和默认值
		//PropertyDeclaration:
		//    static = 'static'?
		//    final = 'final'?
		//    (type=Type)
		//    name=ID
		//    (defaultClause=DefaultClause)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//static = 'static'?
		//final = 'final'?
		//(type=Type)
		//name=ID
		//(defaultClause=DefaultClause)?
		public Group getGroup() { return cGroup; }
		
		//static = 'static'?
		public Assignment getStaticAssignment_0() { return cStaticAssignment_0; }
		
		//'static'
		public Keyword getStaticStaticKeyword_0_0() { return cStaticStaticKeyword_0_0; }
		
		//final = 'final'?
		public Assignment getFinalAssignment_1() { return cFinalAssignment_1; }
		
		//'final'
		public Keyword getFinalFinalKeyword_1_0() { return cFinalFinalKeyword_1_0; }
		
		//(type=Type)
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//(defaultClause=DefaultClause)?
		public Assignment getDefaultClauseAssignment_4() { return cDefaultClauseAssignment_4; }
		
		//DefaultClause
		public RuleCall getDefaultClauseDefaultClauseParserRuleCall_4_0() { return cDefaultClauseDefaultClauseParserRuleCall_4_0; }
	}
	public class DefaultClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.DefaultClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLiteralParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// 默认值子句
		//DefaultClause:
		//    '=' Literal
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'=' Literal
		public Group getGroup() { return cGroup; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_1() { return cLiteralParserRuleCall_1; }
	}
	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.Mapping");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cModelToVOMappingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDTOToModelMappingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/////////////////////////
		//// 映射规则
		/////////////////////////
		//// 模型到 VO 的映射规则
		//Mapping:
		//    ModelToVOMapping | DTOToModelMapping
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ModelToVOMapping | DTOToModelMapping
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ModelToVOMapping
		public RuleCall getModelToVOMappingParserRuleCall_0() { return cModelToVOMappingParserRuleCall_0; }
		
		//DTOToModelMapping
		public RuleCall getDTOToModelMappingParserRuleCall_1() { return cDTOToModelMappingParserRuleCall_1; }
	}
	public class ModelToVOMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.ModelToVOMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMappingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFromKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cModelKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSourceModelCrossReference_3_0 = (CrossReference)cSourceAssignment_3.eContents().get(0);
		private final RuleCall cSourceModelIDTerminalRuleCall_3_0_1 = (RuleCall)cSourceModelCrossReference_3_0.eContents().get(1);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cVOKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTargetAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cTargetVoDefinitionCrossReference_6_0 = (CrossReference)cTargetAssignment_6.eContents().get(0);
		private final RuleCall cTargetVoDefinitionIDTerminalRuleCall_6_0_1 = (RuleCall)cTargetVoDefinitionCrossReference_6_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Assignment cRulesAssignment_8_0 = (Assignment)cAlternatives_8.eContents().get(0);
		private final RuleCall cRulesMappingRuleParserRuleCall_8_0_0 = (RuleCall)cRulesAssignment_8_0.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cAlternatives_8.eContents().get(1);
		private final Keyword cTargetAllKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_8_1_1 = (Keyword)cGroup_8_1.eContents().get(1);
		private final Keyword cSourceAllKeyword_8_1_2 = (Keyword)cGroup_8_1.eContents().get(2);
		private final Keyword cSemicolonKeyword_8_1_3 = (Keyword)cGroup_8_1.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//// 模型到 VO 的映射
		//ModelToVOMapping:
		//    'mapping' 'from' 'Model' source=[Model|ID]
		//    'to' 'VO' target=[VoDefinition|ID] '{'
		//        (rules+=MappingRule* | 'target.all' '=' 'source.all' ';')
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'mapping' 'from' 'Model' source=[Model|ID]
		//'to' 'VO' target=[VoDefinition|ID] '{'
		//    (rules+=MappingRule* | 'target.all' '=' 'source.all' ';')
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'mapping'
		public Keyword getMappingKeyword_0() { return cMappingKeyword_0; }
		
		//'from'
		public Keyword getFromKeyword_1() { return cFromKeyword_1; }
		
		//'Model'
		public Keyword getModelKeyword_2() { return cModelKeyword_2; }
		
		//source=[Model|ID]
		public Assignment getSourceAssignment_3() { return cSourceAssignment_3; }
		
		//[Model|ID]
		public CrossReference getSourceModelCrossReference_3_0() { return cSourceModelCrossReference_3_0; }
		
		//ID
		public RuleCall getSourceModelIDTerminalRuleCall_3_0_1() { return cSourceModelIDTerminalRuleCall_3_0_1; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//'VO'
		public Keyword getVOKeyword_5() { return cVOKeyword_5; }
		
		//target=[VoDefinition|ID]
		public Assignment getTargetAssignment_6() { return cTargetAssignment_6; }
		
		//[VoDefinition|ID]
		public CrossReference getTargetVoDefinitionCrossReference_6_0() { return cTargetVoDefinitionCrossReference_6_0; }
		
		//ID
		public RuleCall getTargetVoDefinitionIDTerminalRuleCall_6_0_1() { return cTargetVoDefinitionIDTerminalRuleCall_6_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//(rules+=MappingRule* | 'target.all' '=' 'source.all' ';')
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//rules+=MappingRule*
		public Assignment getRulesAssignment_8_0() { return cRulesAssignment_8_0; }
		
		//MappingRule
		public RuleCall getRulesMappingRuleParserRuleCall_8_0_0() { return cRulesMappingRuleParserRuleCall_8_0_0; }
		
		//'target.all' '=' 'source.all' ';'
		public Group getGroup_8_1() { return cGroup_8_1; }
		
		//'target.all'
		public Keyword getTargetAllKeyword_8_1_0() { return cTargetAllKeyword_8_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_8_1_1() { return cEqualsSignKeyword_8_1_1; }
		
		//'source.all'
		public Keyword getSourceAllKeyword_8_1_2() { return cSourceAllKeyword_8_1_2; }
		
		//';'
		public Keyword getSemicolonKeyword_8_1_3() { return cSemicolonKeyword_8_1_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class DTOToModelMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.DTOToModelMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMappingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFromKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDTOKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSourceDtoDefinitionCrossReference_3_0 = (CrossReference)cSourceAssignment_3.eContents().get(0);
		private final RuleCall cSourceDtoDefinitionIDTerminalRuleCall_3_0_1 = (RuleCall)cSourceDtoDefinitionCrossReference_3_0.eContents().get(1);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cModelKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTargetAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cTargetModelCrossReference_6_0 = (CrossReference)cTargetAssignment_6.eContents().get(0);
		private final RuleCall cTargetModelIDTerminalRuleCall_6_0_1 = (RuleCall)cTargetModelCrossReference_6_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Assignment cRulesAssignment_8_0 = (Assignment)cAlternatives_8.eContents().get(0);
		private final RuleCall cRulesMappingRuleParserRuleCall_8_0_0 = (RuleCall)cRulesAssignment_8_0.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cAlternatives_8.eContents().get(1);
		private final Keyword cTargetAllKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_8_1_1 = (Keyword)cGroup_8_1.eContents().get(1);
		private final Keyword cSourceAllKeyword_8_1_2 = (Keyword)cGroup_8_1.eContents().get(2);
		private final Keyword cSemicolonKeyword_8_1_3 = (Keyword)cGroup_8_1.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//// DTO 到模型的映射
		//DTOToModelMapping:
		//    'mapping' 'from' 'DTO' source=[DtoDefinition|ID]
		//    'to' 'Model' target=[Model|ID] '{'
		//        (rules+=MappingRule* | 'target.all' '=' 'source.all' ';')
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'mapping' 'from' 'DTO' source=[DtoDefinition|ID]
		//'to' 'Model' target=[Model|ID] '{'
		//    (rules+=MappingRule* | 'target.all' '=' 'source.all' ';')
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'mapping'
		public Keyword getMappingKeyword_0() { return cMappingKeyword_0; }
		
		//'from'
		public Keyword getFromKeyword_1() { return cFromKeyword_1; }
		
		//'DTO'
		public Keyword getDTOKeyword_2() { return cDTOKeyword_2; }
		
		//source=[DtoDefinition|ID]
		public Assignment getSourceAssignment_3() { return cSourceAssignment_3; }
		
		//[DtoDefinition|ID]
		public CrossReference getSourceDtoDefinitionCrossReference_3_0() { return cSourceDtoDefinitionCrossReference_3_0; }
		
		//ID
		public RuleCall getSourceDtoDefinitionIDTerminalRuleCall_3_0_1() { return cSourceDtoDefinitionIDTerminalRuleCall_3_0_1; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//'Model'
		public Keyword getModelKeyword_5() { return cModelKeyword_5; }
		
		//target=[Model|ID]
		public Assignment getTargetAssignment_6() { return cTargetAssignment_6; }
		
		//[Model|ID]
		public CrossReference getTargetModelCrossReference_6_0() { return cTargetModelCrossReference_6_0; }
		
		//ID
		public RuleCall getTargetModelIDTerminalRuleCall_6_0_1() { return cTargetModelIDTerminalRuleCall_6_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//(rules+=MappingRule* | 'target.all' '=' 'source.all' ';')
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//rules+=MappingRule*
		public Assignment getRulesAssignment_8_0() { return cRulesAssignment_8_0; }
		
		//MappingRule
		public RuleCall getRulesMappingRuleParserRuleCall_8_0_0() { return cRulesMappingRuleParserRuleCall_8_0_0; }
		
		//'target.all' '=' 'source.all' ';'
		public Group getGroup_8_1() { return cGroup_8_1; }
		
		//'target.all'
		public Keyword getTargetAllKeyword_8_1_0() { return cTargetAllKeyword_8_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_8_1_1() { return cEqualsSignKeyword_8_1_1; }
		
		//'source.all'
		public Keyword getSourceAllKeyword_8_1_2() { return cSourceAllKeyword_8_1_2; }
		
		//';'
		public Keyword getSemicolonKeyword_8_1_3() { return cSemicolonKeyword_8_1_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class MappingRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.MappingRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTargetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetFieldFieldCrossReference_1_0 = (CrossReference)cTargetFieldAssignment_1.eContents().get(0);
		private final RuleCall cTargetFieldFieldQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTargetFieldFieldCrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cSourceKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cSourceFieldAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final CrossReference cSourceFieldFieldCrossReference_3_0_1_0 = (CrossReference)cSourceFieldAssignment_3_0_1.eContents().get(0);
		private final RuleCall cSourceFieldFieldQualifiedNameParserRuleCall_3_0_1_0_1 = (RuleCall)cSourceFieldFieldCrossReference_3_0_1_0.eContents().get(1);
		private final Assignment cDefaultAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cDefaultLiteralParserRuleCall_3_1_0 = (RuleCall)cDefaultAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// 映射规则
		//MappingRule:
		//    'target.' targetField=[Field|QualifiedName]
		//    '=' ('source.' sourceField=[Field|QualifiedName]
		//    | default=Literal ) ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'target.' targetField=[Field|QualifiedName]
		//'=' ('source.' sourceField=[Field|QualifiedName]
		//| default=Literal ) ';'
		public Group getGroup() { return cGroup; }
		
		//'target.'
		public Keyword getTargetKeyword_0() { return cTargetKeyword_0; }
		
		//targetField=[Field|QualifiedName]
		public Assignment getTargetFieldAssignment_1() { return cTargetFieldAssignment_1; }
		
		//[Field|QualifiedName]
		public CrossReference getTargetFieldFieldCrossReference_1_0() { return cTargetFieldFieldCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getTargetFieldFieldQualifiedNameParserRuleCall_1_0_1() { return cTargetFieldFieldQualifiedNameParserRuleCall_1_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//('source.' sourceField=[Field|QualifiedName]
		//   | default=Literal )
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'source.' sourceField=[Field|QualifiedName]
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'source.'
		public Keyword getSourceKeyword_3_0_0() { return cSourceKeyword_3_0_0; }
		
		//sourceField=[Field|QualifiedName]
		public Assignment getSourceFieldAssignment_3_0_1() { return cSourceFieldAssignment_3_0_1; }
		
		//[Field|QualifiedName]
		public CrossReference getSourceFieldFieldCrossReference_3_0_1_0() { return cSourceFieldFieldCrossReference_3_0_1_0; }
		
		//QualifiedName
		public RuleCall getSourceFieldFieldQualifiedNameParserRuleCall_3_0_1_0_1() { return cSourceFieldFieldQualifiedNameParserRuleCall_3_0_1_0_1; }
		
		//default=Literal
		public Assignment getDefaultAssignment_3_1() { return cDefaultAssignment_3_1; }
		
		//Literal
		public RuleCall getDefaultLiteralParserRuleCall_3_1_0() { return cDefaultLiteralParserRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGenericDataTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSimpleTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNormalTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		/////////////////////////
		//// 数据类型
		/////////////////////////
		//// 数组类型
		//// 类型定义，包括内置类型和自定义类型
		//Type:
		//    GenericDataType | ArrayType | SimpleType | NormalType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//GenericDataType | ArrayType | SimpleType | NormalType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GenericDataType
		public RuleCall getGenericDataTypeParserRuleCall_0() { return cGenericDataTypeParserRuleCall_0; }
		
		//ArrayType
		public RuleCall getArrayTypeParserRuleCall_1() { return cArrayTypeParserRuleCall_1; }
		
		//SimpleType
		public RuleCall getSimpleTypeParserRuleCall_2() { return cSimpleTypeParserRuleCall_2; }
		
		//NormalType
		public RuleCall getNormalTypeParserRuleCall_3() { return cNormalTypeParserRuleCall_3; }
	}
	public class SimpleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.SimpleType");
		private final Assignment cBuiltInTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBuiltInTypeBuiltInTypeEnumRuleCall_0 = (RuleCall)cBuiltInTypeAssignment.eContents().get(0);
		
		//SimpleType:
		//    builtInType=BuiltInType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//builtInType=BuiltInType
		public Assignment getBuiltInTypeAssignment() { return cBuiltInTypeAssignment; }
		
		//BuiltInType
		public RuleCall getBuiltInTypeBuiltInTypeEnumRuleCall_0() { return cBuiltInTypeBuiltInTypeEnumRuleCall_0; }
	}
	public class NormalTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.NormalType");
		private final Assignment cCustomTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCustomTypeIDTerminalRuleCall_0 = (RuleCall)cCustomTypeAssignment.eContents().get(0);
		
		//NormalType:
		//    customType=ID  // 拆分为内置类型和自定义类型引用
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//customType=ID
		public Assignment getCustomTypeAssignment() { return cCustomTypeAssignment; }
		
		//ID
		public RuleCall getCustomTypeIDTerminalRuleCall_0() { return cCustomTypeIDTerminalRuleCall_0; }
	}
	public class GenericDataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.GenericDataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContainerTypeNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContainerTypeNameIDTerminalRuleCall_0_0 = (RuleCall)cContainerTypeNameAssignment_0.eContents().get(0);
		private final RuleCall cLESSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cContainedTypeNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContainedTypeNameTypeParserRuleCall_2_0 = (RuleCall)cContainedTypeNameAssignment_2.eContents().get(0);
		private final RuleCall cGREATERTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//GenericDataType:
		//    containerTypeName=ID LESS containedTypeName=Type GREATER
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//containerTypeName=ID LESS containedTypeName=Type GREATER
		public Group getGroup() { return cGroup; }
		
		//containerTypeName=ID
		public Assignment getContainerTypeNameAssignment_0() { return cContainerTypeNameAssignment_0; }
		
		//ID
		public RuleCall getContainerTypeNameIDTerminalRuleCall_0_0() { return cContainerTypeNameIDTerminalRuleCall_0_0; }
		
		//LESS
		public RuleCall getLESSTerminalRuleCall_1() { return cLESSTerminalRuleCall_1; }
		
		//containedTypeName=Type
		public Assignment getContainedTypeNameAssignment_2() { return cContainedTypeNameAssignment_2; }
		
		//Type
		public RuleCall getContainedTypeNameTypeParserRuleCall_2_0() { return cContainedTypeNameTypeParserRuleCall_2_0; }
		
		//GREATER
		public RuleCall getGREATERTerminalRuleCall_3() { return cGREATERTerminalRuleCall_3; }
	}
	public class ArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.ArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cElementTypeAlternatives_0_0 = (Alternatives)cElementTypeAssignment_0.eContents().get(0);
		private final RuleCall cElementTypeSimpleTypeParserRuleCall_0_0_0 = (RuleCall)cElementTypeAlternatives_0_0.eContents().get(0);
		private final RuleCall cElementTypeNormalTypeParserRuleCall_0_0_1 = (RuleCall)cElementTypeAlternatives_0_0.eContents().get(1);
		private final RuleCall cLBRACKETTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cRBRACKETTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ArrayType:
		//    elementType=(SimpleType | NormalType) LBRACKET RBRACKET
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//elementType=(SimpleType | NormalType) LBRACKET RBRACKET
		public Group getGroup() { return cGroup; }
		
		//elementType=(SimpleType | NormalType)
		public Assignment getElementTypeAssignment_0() { return cElementTypeAssignment_0; }
		
		//(SimpleType | NormalType)
		public Alternatives getElementTypeAlternatives_0_0() { return cElementTypeAlternatives_0_0; }
		
		//SimpleType
		public RuleCall getElementTypeSimpleTypeParserRuleCall_0_0_0() { return cElementTypeSimpleTypeParserRuleCall_0_0_0; }
		
		//NormalType
		public RuleCall getElementTypeNormalTypeParserRuleCall_0_0_1() { return cElementTypeNormalTypeParserRuleCall_0_0_1; }
		
		//LBRACKET
		public RuleCall getLBRACKETTerminalRuleCall_1() { return cLBRACKETTerminalRuleCall_1; }
		
		//RBRACKET
		public RuleCall getRBRACKETTerminalRuleCall_2() { return cRBRACKETTerminalRuleCall_2; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDECIMALTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBOOLParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// 字面量类型
		//Literal:
		//    STRING | INT | DECIMAL | BOOL  // 支持浮点数
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | INT | DECIMAL | BOOL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//DECIMAL
		public RuleCall getDECIMALTerminalRuleCall_2() { return cDECIMALTerminalRuleCall_2; }
		
		//BOOL
		public RuleCall getBOOLParserRuleCall_3() { return cBOOLParserRuleCall_3; }
	}
	public class BOOLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.BOOL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//// 布尔值终端定义
		//BOOL:
		//    'true' | 'false'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//// 限定名称
		//QualifiedName:
		//    ID ('.' ID)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	public class BeanValidationTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.BeanValidationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAssertFalseEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAssertFalseAssertFalseKeyword_0_0 = (Keyword)cAssertFalseEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAssertTrueEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAssertTrueAssertTrueKeyword_1_0 = (Keyword)cAssertTrueEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDecimalMaxEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDecimalMaxDecimalMaxKeyword_2_0 = (Keyword)cDecimalMaxEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDecimalMinEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDecimalMinDecimalMinKeyword_3_0 = (Keyword)cDecimalMinEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDigitsEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDigitsDigitsKeyword_4_0 = (Keyword)cDigitsEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cEmailEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cEmailEmailKeyword_5_0 = (Keyword)cEmailEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cFutureEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cFutureFutureKeyword_6_0 = (Keyword)cFutureEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cFutureOrPresentEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cFutureOrPresentFutureOrPresentKeyword_7_0 = (Keyword)cFutureOrPresentEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cMaxEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cMaxMaxKeyword_8_0 = (Keyword)cMaxEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cMinEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cMinMinKeyword_9_0 = (Keyword)cMinEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cNegativeEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cNegativeNegativeKeyword_10_0 = (Keyword)cNegativeEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cNegativeOrZeroEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cNegativeOrZeroNegativeOrZeroKeyword_11_0 = (Keyword)cNegativeOrZeroEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cNotBlankEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cNotBlankNotBlankKeyword_12_0 = (Keyword)cNotBlankEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cNotEmptyEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cNotEmptyNotEmptyKeyword_13_0 = (Keyword)cNotEmptyEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cNotNullEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cNotNullNotNullKeyword_14_0 = (Keyword)cNotNullEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cNullEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cNullNullKeyword_15_0 = (Keyword)cNullEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cPastEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cPastPastKeyword_16_0 = (Keyword)cPastEnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cPastOrPresentEnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cPastOrPresentPastOrPresentKeyword_17_0 = (Keyword)cPastOrPresentEnumLiteralDeclaration_17.eContents().get(0);
		private final EnumLiteralDeclaration cPatternEnumLiteralDeclaration_18 = (EnumLiteralDeclaration)cAlternatives.eContents().get(18);
		private final Keyword cPatternPatternKeyword_18_0 = (Keyword)cPatternEnumLiteralDeclaration_18.eContents().get(0);
		private final EnumLiteralDeclaration cPositiveEnumLiteralDeclaration_19 = (EnumLiteralDeclaration)cAlternatives.eContents().get(19);
		private final Keyword cPositivePositiveKeyword_19_0 = (Keyword)cPositiveEnumLiteralDeclaration_19.eContents().get(0);
		private final EnumLiteralDeclaration cPositiveOrZeroEnumLiteralDeclaration_20 = (EnumLiteralDeclaration)cAlternatives.eContents().get(20);
		private final Keyword cPositiveOrZeroPositiveOrZeroKeyword_20_0 = (Keyword)cPositiveOrZeroEnumLiteralDeclaration_20.eContents().get(0);
		private final EnumLiteralDeclaration cSizeEnumLiteralDeclaration_21 = (EnumLiteralDeclaration)cAlternatives.eContents().get(21);
		private final Keyword cSizeSizeKeyword_21_0 = (Keyword)cSizeEnumLiteralDeclaration_21.eContents().get(0);
		
		//// Bean 验证注解枚举
		//enum BeanValidationType:
		//    AssertFalse = 'AssertFalse' |
		//    AssertTrue = 'AssertTrue' |
		//    DecimalMax = 'DecimalMax' |
		//    DecimalMin = 'DecimalMin' |
		//    Digits = 'Digits' |
		//    Email = 'Email' |
		//    Future = 'Future' |
		//    FutureOrPresent = 'FutureOrPresent' |
		//    Max = 'Max' |
		//    Min = 'Min' |
		//    Negative = 'Negative' |
		//    NegativeOrZero = 'NegativeOrZero' |
		//    NotBlank = 'NotBlank' |
		//    NotEmpty = 'NotEmpty' |
		//    NotNull = 'NotNull' |
		//    Null = 'Null' |
		//    Past = 'Past' |
		//    PastOrPresent = 'PastOrPresent' |
		//    Pattern = 'Pattern' |
		//    Positive = 'Positive' |
		//    PositiveOrZero = 'PositiveOrZero' |
		//    Size = 'Size'
		//;
		public EnumRule getRule() { return rule; }
		
		//AssertFalse = 'AssertFalse' |
		//AssertTrue = 'AssertTrue' |
		//DecimalMax = 'DecimalMax' |
		//DecimalMin = 'DecimalMin' |
		//Digits = 'Digits' |
		//Email = 'Email' |
		//Future = 'Future' |
		//FutureOrPresent = 'FutureOrPresent' |
		//Max = 'Max' |
		//Min = 'Min' |
		//Negative = 'Negative' |
		//NegativeOrZero = 'NegativeOrZero' |
		//NotBlank = 'NotBlank' |
		//NotEmpty = 'NotEmpty' |
		//NotNull = 'NotNull' |
		//Null = 'Null' |
		//Past = 'Past' |
		//PastOrPresent = 'PastOrPresent' |
		//Pattern = 'Pattern' |
		//Positive = 'Positive' |
		//PositiveOrZero = 'PositiveOrZero' |
		//Size = 'Size'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AssertFalse = 'AssertFalse'
		public EnumLiteralDeclaration getAssertFalseEnumLiteralDeclaration_0() { return cAssertFalseEnumLiteralDeclaration_0; }
		
		//'AssertFalse'
		public Keyword getAssertFalseAssertFalseKeyword_0_0() { return cAssertFalseAssertFalseKeyword_0_0; }
		
		//AssertTrue = 'AssertTrue'
		public EnumLiteralDeclaration getAssertTrueEnumLiteralDeclaration_1() { return cAssertTrueEnumLiteralDeclaration_1; }
		
		//'AssertTrue'
		public Keyword getAssertTrueAssertTrueKeyword_1_0() { return cAssertTrueAssertTrueKeyword_1_0; }
		
		//DecimalMax = 'DecimalMax'
		public EnumLiteralDeclaration getDecimalMaxEnumLiteralDeclaration_2() { return cDecimalMaxEnumLiteralDeclaration_2; }
		
		//'DecimalMax'
		public Keyword getDecimalMaxDecimalMaxKeyword_2_0() { return cDecimalMaxDecimalMaxKeyword_2_0; }
		
		//DecimalMin = 'DecimalMin'
		public EnumLiteralDeclaration getDecimalMinEnumLiteralDeclaration_3() { return cDecimalMinEnumLiteralDeclaration_3; }
		
		//'DecimalMin'
		public Keyword getDecimalMinDecimalMinKeyword_3_0() { return cDecimalMinDecimalMinKeyword_3_0; }
		
		//Digits = 'Digits'
		public EnumLiteralDeclaration getDigitsEnumLiteralDeclaration_4() { return cDigitsEnumLiteralDeclaration_4; }
		
		//'Digits'
		public Keyword getDigitsDigitsKeyword_4_0() { return cDigitsDigitsKeyword_4_0; }
		
		//Email = 'Email'
		public EnumLiteralDeclaration getEmailEnumLiteralDeclaration_5() { return cEmailEnumLiteralDeclaration_5; }
		
		//'Email'
		public Keyword getEmailEmailKeyword_5_0() { return cEmailEmailKeyword_5_0; }
		
		//Future = 'Future'
		public EnumLiteralDeclaration getFutureEnumLiteralDeclaration_6() { return cFutureEnumLiteralDeclaration_6; }
		
		//'Future'
		public Keyword getFutureFutureKeyword_6_0() { return cFutureFutureKeyword_6_0; }
		
		//FutureOrPresent = 'FutureOrPresent'
		public EnumLiteralDeclaration getFutureOrPresentEnumLiteralDeclaration_7() { return cFutureOrPresentEnumLiteralDeclaration_7; }
		
		//'FutureOrPresent'
		public Keyword getFutureOrPresentFutureOrPresentKeyword_7_0() { return cFutureOrPresentFutureOrPresentKeyword_7_0; }
		
		//Max = 'Max'
		public EnumLiteralDeclaration getMaxEnumLiteralDeclaration_8() { return cMaxEnumLiteralDeclaration_8; }
		
		//'Max'
		public Keyword getMaxMaxKeyword_8_0() { return cMaxMaxKeyword_8_0; }
		
		//Min = 'Min'
		public EnumLiteralDeclaration getMinEnumLiteralDeclaration_9() { return cMinEnumLiteralDeclaration_9; }
		
		//'Min'
		public Keyword getMinMinKeyword_9_0() { return cMinMinKeyword_9_0; }
		
		//Negative = 'Negative'
		public EnumLiteralDeclaration getNegativeEnumLiteralDeclaration_10() { return cNegativeEnumLiteralDeclaration_10; }
		
		//'Negative'
		public Keyword getNegativeNegativeKeyword_10_0() { return cNegativeNegativeKeyword_10_0; }
		
		//NegativeOrZero = 'NegativeOrZero'
		public EnumLiteralDeclaration getNegativeOrZeroEnumLiteralDeclaration_11() { return cNegativeOrZeroEnumLiteralDeclaration_11; }
		
		//'NegativeOrZero'
		public Keyword getNegativeOrZeroNegativeOrZeroKeyword_11_0() { return cNegativeOrZeroNegativeOrZeroKeyword_11_0; }
		
		//NotBlank = 'NotBlank'
		public EnumLiteralDeclaration getNotBlankEnumLiteralDeclaration_12() { return cNotBlankEnumLiteralDeclaration_12; }
		
		//'NotBlank'
		public Keyword getNotBlankNotBlankKeyword_12_0() { return cNotBlankNotBlankKeyword_12_0; }
		
		//NotEmpty = 'NotEmpty'
		public EnumLiteralDeclaration getNotEmptyEnumLiteralDeclaration_13() { return cNotEmptyEnumLiteralDeclaration_13; }
		
		//'NotEmpty'
		public Keyword getNotEmptyNotEmptyKeyword_13_0() { return cNotEmptyNotEmptyKeyword_13_0; }
		
		//NotNull = 'NotNull'
		public EnumLiteralDeclaration getNotNullEnumLiteralDeclaration_14() { return cNotNullEnumLiteralDeclaration_14; }
		
		//'NotNull'
		public Keyword getNotNullNotNullKeyword_14_0() { return cNotNullNotNullKeyword_14_0; }
		
		//Null = 'Null'
		public EnumLiteralDeclaration getNullEnumLiteralDeclaration_15() { return cNullEnumLiteralDeclaration_15; }
		
		//'Null'
		public Keyword getNullNullKeyword_15_0() { return cNullNullKeyword_15_0; }
		
		//Past = 'Past'
		public EnumLiteralDeclaration getPastEnumLiteralDeclaration_16() { return cPastEnumLiteralDeclaration_16; }
		
		//'Past'
		public Keyword getPastPastKeyword_16_0() { return cPastPastKeyword_16_0; }
		
		//PastOrPresent = 'PastOrPresent'
		public EnumLiteralDeclaration getPastOrPresentEnumLiteralDeclaration_17() { return cPastOrPresentEnumLiteralDeclaration_17; }
		
		//'PastOrPresent'
		public Keyword getPastOrPresentPastOrPresentKeyword_17_0() { return cPastOrPresentPastOrPresentKeyword_17_0; }
		
		//Pattern = 'Pattern'
		public EnumLiteralDeclaration getPatternEnumLiteralDeclaration_18() { return cPatternEnumLiteralDeclaration_18; }
		
		//'Pattern'
		public Keyword getPatternPatternKeyword_18_0() { return cPatternPatternKeyword_18_0; }
		
		//Positive = 'Positive'
		public EnumLiteralDeclaration getPositiveEnumLiteralDeclaration_19() { return cPositiveEnumLiteralDeclaration_19; }
		
		//'Positive'
		public Keyword getPositivePositiveKeyword_19_0() { return cPositivePositiveKeyword_19_0; }
		
		//PositiveOrZero = 'PositiveOrZero'
		public EnumLiteralDeclaration getPositiveOrZeroEnumLiteralDeclaration_20() { return cPositiveOrZeroEnumLiteralDeclaration_20; }
		
		//'PositiveOrZero'
		public Keyword getPositiveOrZeroPositiveOrZeroKeyword_20_0() { return cPositiveOrZeroPositiveOrZeroKeyword_20_0; }
		
		//Size = 'Size'
		public EnumLiteralDeclaration getSizeEnumLiteralDeclaration_21() { return cSizeEnumLiteralDeclaration_21; }
		
		//'Size'
		public Keyword getSizeSizeKeyword_21_0() { return cSizeSizeKeyword_21_0; }
	}
	public class MybatisPlusModelTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.MybatisPlusModelType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cKeySequenceEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cKeySequenceKeySequenceKeyword_0_0 = (Keyword)cKeySequenceEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTableNameEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTableNameTableNameKeyword_1_0 = (Keyword)cTableNameEnumLiteralDeclaration_1.eContents().get(0);
		
		//// MyBatis-Plus 模型注解枚举
		//enum MybatisPlusModelType:
		//    KeySequence = 'KeySequence' |
		//    TableName = 'TableName'
		//;
		public EnumRule getRule() { return rule; }
		
		//KeySequence = 'KeySequence' |
		//TableName = 'TableName'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//KeySequence = 'KeySequence'
		public EnumLiteralDeclaration getKeySequenceEnumLiteralDeclaration_0() { return cKeySequenceEnumLiteralDeclaration_0; }
		
		//'KeySequence'
		public Keyword getKeySequenceKeySequenceKeyword_0_0() { return cKeySequenceKeySequenceKeyword_0_0; }
		
		//TableName = 'TableName'
		public EnumLiteralDeclaration getTableNameEnumLiteralDeclaration_1() { return cTableNameEnumLiteralDeclaration_1; }
		
		//'TableName'
		public Keyword getTableNameTableNameKeyword_1_0() { return cTableNameTableNameKeyword_1_0; }
	}
	public class MybatisPlusFieldTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.MybatisPlusFieldType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOrderByEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOrderByOrderByKeyword_0_0 = (Keyword)cOrderByEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTableFieldEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTableFieldTableFieldKeyword_1_0 = (Keyword)cTableFieldEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTableIdEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTableIdTableIdKeyword_2_0 = (Keyword)cTableIdEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTableLogicEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTableLogicTableLogicKeyword_3_0 = (Keyword)cTableLogicEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cVersionEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cVersionVersionKeyword_4_0 = (Keyword)cVersionEnumLiteralDeclaration_4.eContents().get(0);
		
		//// MyBatis-Plus 字段注解枚举
		//enum MybatisPlusFieldType:
		//    OrderBy = 'OrderBy' |
		//    TableField = 'TableField' |
		//    TableId = 'TableId' |
		//    TableLogic = 'TableLogic' |
		//    Version = 'Version'
		//;
		public EnumRule getRule() { return rule; }
		
		//OrderBy = 'OrderBy' |
		//TableField = 'TableField' |
		//TableId = 'TableId' |
		//TableLogic = 'TableLogic' |
		//Version = 'Version'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OrderBy = 'OrderBy'
		public EnumLiteralDeclaration getOrderByEnumLiteralDeclaration_0() { return cOrderByEnumLiteralDeclaration_0; }
		
		//'OrderBy'
		public Keyword getOrderByOrderByKeyword_0_0() { return cOrderByOrderByKeyword_0_0; }
		
		//TableField = 'TableField'
		public EnumLiteralDeclaration getTableFieldEnumLiteralDeclaration_1() { return cTableFieldEnumLiteralDeclaration_1; }
		
		//'TableField'
		public Keyword getTableFieldTableFieldKeyword_1_0() { return cTableFieldTableFieldKeyword_1_0; }
		
		//TableId = 'TableId'
		public EnumLiteralDeclaration getTableIdEnumLiteralDeclaration_2() { return cTableIdEnumLiteralDeclaration_2; }
		
		//'TableId'
		public Keyword getTableIdTableIdKeyword_2_0() { return cTableIdTableIdKeyword_2_0; }
		
		//TableLogic = 'TableLogic'
		public EnumLiteralDeclaration getTableLogicEnumLiteralDeclaration_3() { return cTableLogicEnumLiteralDeclaration_3; }
		
		//'TableLogic'
		public Keyword getTableLogicTableLogicKeyword_3_0() { return cTableLogicTableLogicKeyword_3_0; }
		
		//Version = 'Version'
		public EnumLiteralDeclaration getVersionEnumLiteralDeclaration_4() { return cVersionEnumLiteralDeclaration_4; }
		
		//'Version'
		public Keyword getVersionVersionKeyword_4_0() { return cVersionVersionKeyword_4_0; }
	}
	public class JacksonTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.JacksonType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cJsonAliasEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cJsonAliasJsonAliasKeyword_0_0 = (Keyword)cJsonAliasEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cJsonAnyGetterEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cJsonAnyGetterJsonAnyGetterKeyword_1_0 = (Keyword)cJsonAnyGetterEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cJsonAnySetterEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cJsonAnySetterJsonAnySetterKeyword_2_0 = (Keyword)cJsonAnySetterEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cJsonAutoDetectEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cJsonAutoDetectJsonAutoDetectKeyword_3_0 = (Keyword)cJsonAutoDetectEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cJsonDeserializeEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cJsonDeserializeJsonDeserializeKeyword_4_0 = (Keyword)cJsonDeserializeEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cJsonFormatEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cJsonFormatJsonFormatKeyword_5_0 = (Keyword)cJsonFormatEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cJsonIgnoreEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cJsonIgnoreJsonIgnoreKeyword_6_0 = (Keyword)cJsonIgnoreEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cJsonIgnorePropertiesEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cJsonIgnorePropertiesJsonIgnorePropertiesKeyword_7_0 = (Keyword)cJsonIgnorePropertiesEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cJsonIncludeEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cJsonIncludeJsonIncludeKeyword_8_0 = (Keyword)cJsonIncludeEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cJsonRootNameEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cJsonRootNameJsonRootNameKeyword_9_0 = (Keyword)cJsonRootNameEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cJsonSerializeEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cJsonSerializeJsonSerializeKeyword_10_0 = (Keyword)cJsonSerializeEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cJsonTypeInfoEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cJsonTypeInfoJsonTypeInfoKeyword_11_0 = (Keyword)cJsonTypeInfoEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cJsonUnwrappedEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cJsonUnwrappedJsonUnwrappedKeyword_12_0 = (Keyword)cJsonUnwrappedEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cJsonValueEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cJsonValueJsonValueKeyword_13_0 = (Keyword)cJsonValueEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cJsonViewEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cJsonViewJsonViewKeyword_14_0 = (Keyword)cJsonViewEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cJsonPropertyEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cJsonPropertyJsonPropertyKeyword_15_0 = (Keyword)cJsonPropertyEnumLiteralDeclaration_15.eContents().get(0);
		
		//// Jackson 注解枚举
		//enum JacksonType:
		//    JsonAlias = 'JsonAlias' |
		//    JsonAnyGetter = 'JsonAnyGetter' |
		//    JsonAnySetter = 'JsonAnySetter' |
		//    JsonAutoDetect = 'JsonAutoDetect' |
		//    JsonDeserialize = 'JsonDeserialize' |
		//    JsonFormat = 'JsonFormat' |
		//    JsonIgnore = 'JsonIgnore' |
		//    JsonIgnoreProperties = 'JsonIgnoreProperties' |
		//    JsonInclude = 'JsonInclude' |
		//    JsonRootName = 'JsonRootName' |
		//    JsonSerialize = 'JsonSerialize' |
		//    JsonTypeInfo = 'JsonTypeInfo' |
		//    JsonUnwrapped = 'JsonUnwrapped' |
		//    JsonValue = 'JsonValue' |
		//    JsonView = 'JsonView' |
		//    JsonProperty = 'JsonProperty'
		//;
		public EnumRule getRule() { return rule; }
		
		//JsonAlias = 'JsonAlias' |
		//JsonAnyGetter = 'JsonAnyGetter' |
		//JsonAnySetter = 'JsonAnySetter' |
		//JsonAutoDetect = 'JsonAutoDetect' |
		//JsonDeserialize = 'JsonDeserialize' |
		//JsonFormat = 'JsonFormat' |
		//JsonIgnore = 'JsonIgnore' |
		//JsonIgnoreProperties = 'JsonIgnoreProperties' |
		//JsonInclude = 'JsonInclude' |
		//JsonRootName = 'JsonRootName' |
		//JsonSerialize = 'JsonSerialize' |
		//JsonTypeInfo = 'JsonTypeInfo' |
		//JsonUnwrapped = 'JsonUnwrapped' |
		//JsonValue = 'JsonValue' |
		//JsonView = 'JsonView' |
		//JsonProperty = 'JsonProperty'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//JsonAlias = 'JsonAlias'
		public EnumLiteralDeclaration getJsonAliasEnumLiteralDeclaration_0() { return cJsonAliasEnumLiteralDeclaration_0; }
		
		//'JsonAlias'
		public Keyword getJsonAliasJsonAliasKeyword_0_0() { return cJsonAliasJsonAliasKeyword_0_0; }
		
		//JsonAnyGetter = 'JsonAnyGetter'
		public EnumLiteralDeclaration getJsonAnyGetterEnumLiteralDeclaration_1() { return cJsonAnyGetterEnumLiteralDeclaration_1; }
		
		//'JsonAnyGetter'
		public Keyword getJsonAnyGetterJsonAnyGetterKeyword_1_0() { return cJsonAnyGetterJsonAnyGetterKeyword_1_0; }
		
		//JsonAnySetter = 'JsonAnySetter'
		public EnumLiteralDeclaration getJsonAnySetterEnumLiteralDeclaration_2() { return cJsonAnySetterEnumLiteralDeclaration_2; }
		
		//'JsonAnySetter'
		public Keyword getJsonAnySetterJsonAnySetterKeyword_2_0() { return cJsonAnySetterJsonAnySetterKeyword_2_0; }
		
		//JsonAutoDetect = 'JsonAutoDetect'
		public EnumLiteralDeclaration getJsonAutoDetectEnumLiteralDeclaration_3() { return cJsonAutoDetectEnumLiteralDeclaration_3; }
		
		//'JsonAutoDetect'
		public Keyword getJsonAutoDetectJsonAutoDetectKeyword_3_0() { return cJsonAutoDetectJsonAutoDetectKeyword_3_0; }
		
		//JsonDeserialize = 'JsonDeserialize'
		public EnumLiteralDeclaration getJsonDeserializeEnumLiteralDeclaration_4() { return cJsonDeserializeEnumLiteralDeclaration_4; }
		
		//'JsonDeserialize'
		public Keyword getJsonDeserializeJsonDeserializeKeyword_4_0() { return cJsonDeserializeJsonDeserializeKeyword_4_0; }
		
		//JsonFormat = 'JsonFormat'
		public EnumLiteralDeclaration getJsonFormatEnumLiteralDeclaration_5() { return cJsonFormatEnumLiteralDeclaration_5; }
		
		//'JsonFormat'
		public Keyword getJsonFormatJsonFormatKeyword_5_0() { return cJsonFormatJsonFormatKeyword_5_0; }
		
		//JsonIgnore = 'JsonIgnore'
		public EnumLiteralDeclaration getJsonIgnoreEnumLiteralDeclaration_6() { return cJsonIgnoreEnumLiteralDeclaration_6; }
		
		//'JsonIgnore'
		public Keyword getJsonIgnoreJsonIgnoreKeyword_6_0() { return cJsonIgnoreJsonIgnoreKeyword_6_0; }
		
		//JsonIgnoreProperties = 'JsonIgnoreProperties'
		public EnumLiteralDeclaration getJsonIgnorePropertiesEnumLiteralDeclaration_7() { return cJsonIgnorePropertiesEnumLiteralDeclaration_7; }
		
		//'JsonIgnoreProperties'
		public Keyword getJsonIgnorePropertiesJsonIgnorePropertiesKeyword_7_0() { return cJsonIgnorePropertiesJsonIgnorePropertiesKeyword_7_0; }
		
		//JsonInclude = 'JsonInclude'
		public EnumLiteralDeclaration getJsonIncludeEnumLiteralDeclaration_8() { return cJsonIncludeEnumLiteralDeclaration_8; }
		
		//'JsonInclude'
		public Keyword getJsonIncludeJsonIncludeKeyword_8_0() { return cJsonIncludeJsonIncludeKeyword_8_0; }
		
		//JsonRootName = 'JsonRootName'
		public EnumLiteralDeclaration getJsonRootNameEnumLiteralDeclaration_9() { return cJsonRootNameEnumLiteralDeclaration_9; }
		
		//'JsonRootName'
		public Keyword getJsonRootNameJsonRootNameKeyword_9_0() { return cJsonRootNameJsonRootNameKeyword_9_0; }
		
		//JsonSerialize = 'JsonSerialize'
		public EnumLiteralDeclaration getJsonSerializeEnumLiteralDeclaration_10() { return cJsonSerializeEnumLiteralDeclaration_10; }
		
		//'JsonSerialize'
		public Keyword getJsonSerializeJsonSerializeKeyword_10_0() { return cJsonSerializeJsonSerializeKeyword_10_0; }
		
		//JsonTypeInfo = 'JsonTypeInfo'
		public EnumLiteralDeclaration getJsonTypeInfoEnumLiteralDeclaration_11() { return cJsonTypeInfoEnumLiteralDeclaration_11; }
		
		//'JsonTypeInfo'
		public Keyword getJsonTypeInfoJsonTypeInfoKeyword_11_0() { return cJsonTypeInfoJsonTypeInfoKeyword_11_0; }
		
		//JsonUnwrapped = 'JsonUnwrapped'
		public EnumLiteralDeclaration getJsonUnwrappedEnumLiteralDeclaration_12() { return cJsonUnwrappedEnumLiteralDeclaration_12; }
		
		//'JsonUnwrapped'
		public Keyword getJsonUnwrappedJsonUnwrappedKeyword_12_0() { return cJsonUnwrappedJsonUnwrappedKeyword_12_0; }
		
		//JsonValue = 'JsonValue'
		public EnumLiteralDeclaration getJsonValueEnumLiteralDeclaration_13() { return cJsonValueEnumLiteralDeclaration_13; }
		
		//'JsonValue'
		public Keyword getJsonValueJsonValueKeyword_13_0() { return cJsonValueJsonValueKeyword_13_0; }
		
		//JsonView = 'JsonView'
		public EnumLiteralDeclaration getJsonViewEnumLiteralDeclaration_14() { return cJsonViewEnumLiteralDeclaration_14; }
		
		//'JsonView'
		public Keyword getJsonViewJsonViewKeyword_14_0() { return cJsonViewJsonViewKeyword_14_0; }
		
		//JsonProperty = 'JsonProperty'
		public EnumLiteralDeclaration getJsonPropertyEnumLiteralDeclaration_15() { return cJsonPropertyEnumLiteralDeclaration_15; }
		
		//'JsonProperty'
		public Keyword getJsonPropertyJsonPropertyKeyword_15_0() { return cJsonPropertyJsonPropertyKeyword_15_0; }
	}
	public class LombokTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.LombokType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAccessorsEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAccessorsAccessorsKeyword_0_0 = (Keyword)cAccessorsEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAllArgsConstructorEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAllArgsConstructorAllArgsConstructorKeyword_1_0 = (Keyword)cAllArgsConstructorEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBuilderEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBuilderBuilderKeyword_2_0 = (Keyword)cBuilderEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDataEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDataDataKeyword_3_0 = (Keyword)cDataEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEqualsAndHashCodeEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEqualsAndHashCodeEqualsAndHashCodeKeyword_4_0 = (Keyword)cEqualsAndHashCodeEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGetterEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGetterGetterKeyword_5_0 = (Keyword)cGetterEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cNoArgsConstructorEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cNoArgsConstructorNoArgsConstructorKeyword_6_0 = (Keyword)cNoArgsConstructorEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cRequiredArgsConstructorEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cRequiredArgsConstructorRequiredArgsConstructorKeyword_7_0 = (Keyword)cRequiredArgsConstructorEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cSetterEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cSetterSetterKeyword_8_0 = (Keyword)cSetterEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cSingularEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cSingularSingularKeyword_9_0 = (Keyword)cSingularEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cSuperBuilderEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cSuperBuilderSuperBuilderKeyword_10_0 = (Keyword)cSuperBuilderEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cToStringEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cToStringToStringKeyword_11_0 = (Keyword)cToStringEnumLiteralDeclaration_11.eContents().get(0);
		
		//// Lombok 注解枚举
		//enum LombokType:
		//    Accessors = 'Accessors' |
		//    AllArgsConstructor = 'AllArgsConstructor' |
		//    Builder = 'Builder' |
		//    Data = 'Data' |
		//    EqualsAndHashCode = 'EqualsAndHashCode' |
		//    Getter = 'Getter' |
		//    NoArgsConstructor = 'NoArgsConstructor' |
		//    RequiredArgsConstructor = 'RequiredArgsConstructor' |
		//    Setter = 'Setter' |
		//    Singular = 'Singular' |
		//    SuperBuilder = 'SuperBuilder' |
		//    ToString = 'ToString'
		//;
		public EnumRule getRule() { return rule; }
		
		//Accessors = 'Accessors' |
		//AllArgsConstructor = 'AllArgsConstructor' |
		//Builder = 'Builder' |
		//Data = 'Data' |
		//EqualsAndHashCode = 'EqualsAndHashCode' |
		//Getter = 'Getter' |
		//NoArgsConstructor = 'NoArgsConstructor' |
		//RequiredArgsConstructor = 'RequiredArgsConstructor' |
		//Setter = 'Setter' |
		//Singular = 'Singular' |
		//SuperBuilder = 'SuperBuilder' |
		//ToString = 'ToString'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Accessors = 'Accessors'
		public EnumLiteralDeclaration getAccessorsEnumLiteralDeclaration_0() { return cAccessorsEnumLiteralDeclaration_0; }
		
		//'Accessors'
		public Keyword getAccessorsAccessorsKeyword_0_0() { return cAccessorsAccessorsKeyword_0_0; }
		
		//AllArgsConstructor = 'AllArgsConstructor'
		public EnumLiteralDeclaration getAllArgsConstructorEnumLiteralDeclaration_1() { return cAllArgsConstructorEnumLiteralDeclaration_1; }
		
		//'AllArgsConstructor'
		public Keyword getAllArgsConstructorAllArgsConstructorKeyword_1_0() { return cAllArgsConstructorAllArgsConstructorKeyword_1_0; }
		
		//Builder = 'Builder'
		public EnumLiteralDeclaration getBuilderEnumLiteralDeclaration_2() { return cBuilderEnumLiteralDeclaration_2; }
		
		//'Builder'
		public Keyword getBuilderBuilderKeyword_2_0() { return cBuilderBuilderKeyword_2_0; }
		
		//Data = 'Data'
		public EnumLiteralDeclaration getDataEnumLiteralDeclaration_3() { return cDataEnumLiteralDeclaration_3; }
		
		//'Data'
		public Keyword getDataDataKeyword_3_0() { return cDataDataKeyword_3_0; }
		
		//EqualsAndHashCode = 'EqualsAndHashCode'
		public EnumLiteralDeclaration getEqualsAndHashCodeEnumLiteralDeclaration_4() { return cEqualsAndHashCodeEnumLiteralDeclaration_4; }
		
		//'EqualsAndHashCode'
		public Keyword getEqualsAndHashCodeEqualsAndHashCodeKeyword_4_0() { return cEqualsAndHashCodeEqualsAndHashCodeKeyword_4_0; }
		
		//Getter = 'Getter'
		public EnumLiteralDeclaration getGetterEnumLiteralDeclaration_5() { return cGetterEnumLiteralDeclaration_5; }
		
		//'Getter'
		public Keyword getGetterGetterKeyword_5_0() { return cGetterGetterKeyword_5_0; }
		
		//NoArgsConstructor = 'NoArgsConstructor'
		public EnumLiteralDeclaration getNoArgsConstructorEnumLiteralDeclaration_6() { return cNoArgsConstructorEnumLiteralDeclaration_6; }
		
		//'NoArgsConstructor'
		public Keyword getNoArgsConstructorNoArgsConstructorKeyword_6_0() { return cNoArgsConstructorNoArgsConstructorKeyword_6_0; }
		
		//RequiredArgsConstructor = 'RequiredArgsConstructor'
		public EnumLiteralDeclaration getRequiredArgsConstructorEnumLiteralDeclaration_7() { return cRequiredArgsConstructorEnumLiteralDeclaration_7; }
		
		//'RequiredArgsConstructor'
		public Keyword getRequiredArgsConstructorRequiredArgsConstructorKeyword_7_0() { return cRequiredArgsConstructorRequiredArgsConstructorKeyword_7_0; }
		
		//Setter = 'Setter'
		public EnumLiteralDeclaration getSetterEnumLiteralDeclaration_8() { return cSetterEnumLiteralDeclaration_8; }
		
		//'Setter'
		public Keyword getSetterSetterKeyword_8_0() { return cSetterSetterKeyword_8_0; }
		
		//Singular = 'Singular'
		public EnumLiteralDeclaration getSingularEnumLiteralDeclaration_9() { return cSingularEnumLiteralDeclaration_9; }
		
		//'Singular'
		public Keyword getSingularSingularKeyword_9_0() { return cSingularSingularKeyword_9_0; }
		
		//SuperBuilder = 'SuperBuilder'
		public EnumLiteralDeclaration getSuperBuilderEnumLiteralDeclaration_10() { return cSuperBuilderEnumLiteralDeclaration_10; }
		
		//'SuperBuilder'
		public Keyword getSuperBuilderSuperBuilderKeyword_10_0() { return cSuperBuilderSuperBuilderKeyword_10_0; }
		
		//ToString = 'ToString'
		public EnumLiteralDeclaration getToStringEnumLiteralDeclaration_11() { return cToStringEnumLiteralDeclaration_11; }
		
		//'ToString'
		public Keyword getToStringToStringKeyword_11_0() { return cToStringToStringKeyword_11_0; }
	}
	public class BuiltInTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.BuiltInType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIntIntKeyword_0_0 = (Keyword)cIntEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLongEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLongLongKeyword_1_0 = (Keyword)cLongEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cIntegerIntegerKeyword_2_0 = (Keyword)cIntegerEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDoubleEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDoubleDoubleKeyword_3_0 = (Keyword)cDoubleEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cStringStringKeyword_4_0 = (Keyword)cStringEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cLocalDateEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cLocalDateLocalDateKeyword_5_0 = (Keyword)cLocalDateEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cLocalDateTimeEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cLocalDateTimeLocalDateTimeKeyword_6_0 = (Keyword)cLocalDateTimeEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cBigDecimalEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cBigDecimalBigDecimalKeyword_7_0 = (Keyword)cBigDecimalEnumLiteralDeclaration_7.eContents().get(0);
		
		//// 内置类型枚举
		//enum BuiltInType:
		//    int = 'int' |
		//    long = 'long' |
		//    Integer = 'Integer' |
		//    Double = 'Double' |
		//    String = 'String'|
		//    LocalDate = 'LocalDate'|
		//    LocalDateTime = 'LocalDateTime' |
		//    BigDecimal = 'BigDecimal'
		//;
		public EnumRule getRule() { return rule; }
		
		//int = 'int' |
		//long = 'long' |
		//Integer = 'Integer' |
		//Double = 'Double' |
		//String = 'String'|
		//LocalDate = 'LocalDate'|
		//LocalDateTime = 'LocalDateTime' |
		//BigDecimal = 'BigDecimal'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//int = 'int'
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_0() { return cIntEnumLiteralDeclaration_0; }
		
		//'int'
		public Keyword getIntIntKeyword_0_0() { return cIntIntKeyword_0_0; }
		
		//long = 'long'
		public EnumLiteralDeclaration getLongEnumLiteralDeclaration_1() { return cLongEnumLiteralDeclaration_1; }
		
		//'long'
		public Keyword getLongLongKeyword_1_0() { return cLongLongKeyword_1_0; }
		
		//Integer = 'Integer'
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_2() { return cIntegerEnumLiteralDeclaration_2; }
		
		//'Integer'
		public Keyword getIntegerIntegerKeyword_2_0() { return cIntegerIntegerKeyword_2_0; }
		
		//Double = 'Double'
		public EnumLiteralDeclaration getDoubleEnumLiteralDeclaration_3() { return cDoubleEnumLiteralDeclaration_3; }
		
		//'Double'
		public Keyword getDoubleDoubleKeyword_3_0() { return cDoubleDoubleKeyword_3_0; }
		
		//String = 'String'
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_4() { return cStringEnumLiteralDeclaration_4; }
		
		//'String'
		public Keyword getStringStringKeyword_4_0() { return cStringStringKeyword_4_0; }
		
		//LocalDate = 'LocalDate'
		public EnumLiteralDeclaration getLocalDateEnumLiteralDeclaration_5() { return cLocalDateEnumLiteralDeclaration_5; }
		
		//'LocalDate'
		public Keyword getLocalDateLocalDateKeyword_5_0() { return cLocalDateLocalDateKeyword_5_0; }
		
		//LocalDateTime = 'LocalDateTime'
		public EnumLiteralDeclaration getLocalDateTimeEnumLiteralDeclaration_6() { return cLocalDateTimeEnumLiteralDeclaration_6; }
		
		//'LocalDateTime'
		public Keyword getLocalDateTimeLocalDateTimeKeyword_6_0() { return cLocalDateTimeLocalDateTimeKeyword_6_0; }
		
		//BigDecimal = 'BigDecimal'
		public EnumLiteralDeclaration getBigDecimalEnumLiteralDeclaration_7() { return cBigDecimalEnumLiteralDeclaration_7; }
		
		//'BigDecimal'
		public Keyword getBigDecimalBigDecimalKeyword_7_0() { return cBigDecimalBigDecimalKeyword_7_0; }
	}
	
	private final GenoMateElements pGenoMate;
	private final GlobalConfigElements pGlobalConfig;
	private final ModelElements pModel;
	private final FieldElements pField;
	private final LombokAnnotationElements pLombokAnnotation;
	private final MybatisPlusModelAnnotationElements pMybatisPlusModelAnnotation;
	private final MybatisPlusFieldAnnotationElements pMybatisPlusFieldAnnotation;
	private final BeanValidationAnnotationElements pBeanValidationAnnotation;
	private final JacksonAnnotationElements pJacksonAnnotation;
	private final AnnotationParametersElements pAnnotationParameters;
	private final ParameterElements pParameter;
	private final GenerateSectionElements pGenerateSection;
	private final GenerationRuleElements pGenerationRule;
	private final PoRuleElements pPoRule;
	private final DtoRuleElements pDtoRule;
	private final VoRuleElements pVoRule;
	private final DtoDefinitionElements pDtoDefinition;
	private final VoDefinitionElements pVoDefinition;
	private final FieldAnnotationElements pFieldAnnotation;
	private final FieldValidationBlockElements pFieldValidationBlock;
	private final SingleActionElements pSingleAction;
	private final LocalLoopActionElements pLocalLoopAction;
	private final GlobalActionElements pGlobalAction;
	private final LocalActionElements pLocalAction;
	private final TypeConditionElements pTypeCondition;
	private final OrTypeConditionElements pOrTypeCondition;
	private final AndTypeConditionElements pAndTypeCondition;
	private final TypeEqualityConditionElements pTypeEqualityCondition;
	private final VariableDeclarationElements pVariableDeclaration;
	private final PoAddFieldElements pPoAddField;
	private final DtoAddFieldElements pDtoAddField;
	private final VoAddFieldElements pVoAddField;
	private final ExclusionsElements pExclusions;
	private final DtoValidationElements pDtoValidation;
	private final VoJacksonElements pVoJackson;
	private final PropertyDeclarationElements pPropertyDeclaration;
	private final DefaultClauseElements pDefaultClause;
	private final MappingElements pMapping;
	private final ModelToVOMappingElements pModelToVOMapping;
	private final DTOToModelMappingElements pDTOToModelMapping;
	private final MappingRuleElements pMappingRule;
	private final BeanValidationTypeElements eBeanValidationType;
	private final MybatisPlusModelTypeElements eMybatisPlusModelType;
	private final MybatisPlusFieldTypeElements eMybatisPlusFieldType;
	private final JacksonTypeElements eJacksonType;
	private final LombokTypeElements eLombokType;
	private final TypeElements pType;
	private final SimpleTypeElements pSimpleType;
	private final NormalTypeElements pNormalType;
	private final GenericDataTypeElements pGenericDataType;
	private final ArrayTypeElements pArrayType;
	private final BuiltInTypeElements eBuiltInType;
	private final LiteralElements pLiteral;
	private final TerminalRule tINT;
	private final TerminalRule tDECIMAL;
	private final BOOLElements pBOOL;
	private final TerminalRule tID;
	private final TerminalRule tLESS;
	private final TerminalRule tGREATER;
	private final TerminalRule tLBRACKET;
	private final TerminalRule tRBRACKET;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GenoMateGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGenoMate = new GenoMateElements();
		this.pGlobalConfig = new GlobalConfigElements();
		this.pModel = new ModelElements();
		this.pField = new FieldElements();
		this.pLombokAnnotation = new LombokAnnotationElements();
		this.pMybatisPlusModelAnnotation = new MybatisPlusModelAnnotationElements();
		this.pMybatisPlusFieldAnnotation = new MybatisPlusFieldAnnotationElements();
		this.pBeanValidationAnnotation = new BeanValidationAnnotationElements();
		this.pJacksonAnnotation = new JacksonAnnotationElements();
		this.pAnnotationParameters = new AnnotationParametersElements();
		this.pParameter = new ParameterElements();
		this.pGenerateSection = new GenerateSectionElements();
		this.pGenerationRule = new GenerationRuleElements();
		this.pPoRule = new PoRuleElements();
		this.pDtoRule = new DtoRuleElements();
		this.pVoRule = new VoRuleElements();
		this.pDtoDefinition = new DtoDefinitionElements();
		this.pVoDefinition = new VoDefinitionElements();
		this.pFieldAnnotation = new FieldAnnotationElements();
		this.pFieldValidationBlock = new FieldValidationBlockElements();
		this.pSingleAction = new SingleActionElements();
		this.pLocalLoopAction = new LocalLoopActionElements();
		this.pGlobalAction = new GlobalActionElements();
		this.pLocalAction = new LocalActionElements();
		this.pTypeCondition = new TypeConditionElements();
		this.pOrTypeCondition = new OrTypeConditionElements();
		this.pAndTypeCondition = new AndTypeConditionElements();
		this.pTypeEqualityCondition = new TypeEqualityConditionElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pPoAddField = new PoAddFieldElements();
		this.pDtoAddField = new DtoAddFieldElements();
		this.pVoAddField = new VoAddFieldElements();
		this.pExclusions = new ExclusionsElements();
		this.pDtoValidation = new DtoValidationElements();
		this.pVoJackson = new VoJacksonElements();
		this.pPropertyDeclaration = new PropertyDeclarationElements();
		this.pDefaultClause = new DefaultClauseElements();
		this.pMapping = new MappingElements();
		this.pModelToVOMapping = new ModelToVOMappingElements();
		this.pDTOToModelMapping = new DTOToModelMappingElements();
		this.pMappingRule = new MappingRuleElements();
		this.eBeanValidationType = new BeanValidationTypeElements();
		this.eMybatisPlusModelType = new MybatisPlusModelTypeElements();
		this.eMybatisPlusFieldType = new MybatisPlusFieldTypeElements();
		this.eJacksonType = new JacksonTypeElements();
		this.eLombokType = new LombokTypeElements();
		this.pType = new TypeElements();
		this.pSimpleType = new SimpleTypeElements();
		this.pNormalType = new NormalTypeElements();
		this.pGenericDataType = new GenericDataTypeElements();
		this.pArrayType = new ArrayTypeElements();
		this.eBuiltInType = new BuiltInTypeElements();
		this.pLiteral = new LiteralElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.INT");
		this.tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.DECIMAL");
		this.pBOOL = new BOOLElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.ID");
		this.tLESS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.LESS");
		this.tGREATER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.GREATER");
		this.tLBRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.LBRACKET");
		this.tRBRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.yunzhi.GenoMate.RBRACKET");
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.yunzhi.GenoMate".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// 根规则：模型生成器定义
	//GenoMate:
	//    (globalConfig=GlobalConfig)?
	//    model=Model
	//    generateSection = GenerateSection
	//    mappings+=Mapping*
	//;
	public GenoMateElements getGenoMateAccess() {
		return pGenoMate;
	}
	
	public ParserRule getGenoMateRule() {
		return getGenoMateAccess().getRule();
	}
	
	/////////////////////////
	//// 全局配置
	/////////////////////////
	//// 全局配置块，包含描述和默认注解变量
	//GlobalConfig:
	//    'global' '{'
	//        'package:' package=STRING
	//        ('defaultAnnotations' '{' (varDefaultAnnotations+=VariableDeclaration)* '}')?  // 全局注解变量
	//    '}'
	//;
	public GlobalConfigElements getGlobalConfigAccess() {
		return pGlobalConfig;
	}
	
	public ParserRule getGlobalConfigRule() {
		return getGlobalConfigAccess().getRule();
	}
	
	/////////////////////////
	//// 模型定义
	/////////////////////////
	//// 模型定义，包含模型名称和字段
	//Model:
	//    'model' name=ID '{'
	//        fields+=Field*
	//    '}'
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//// 字段定义，包含类型和名称
	//Field:
	//    (type=Type)
	//    name=ID ';'
	//;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	/////////////////////////
	//// 注解系统
	/////////////////////////
	//// Lombok 注解
	//LombokAnnotation:
	//    '@' name=LombokType
	//    ('(' parameters=AnnotationParameters? ')')?
	//;
	public LombokAnnotationElements getLombokAnnotationAccess() {
		return pLombokAnnotation;
	}
	
	public ParserRule getLombokAnnotationRule() {
		return getLombokAnnotationAccess().getRule();
	}
	
	//// MyBatis-Plus 模型注解
	//MybatisPlusModelAnnotation:
	//    '@' name=MybatisPlusModelType
	//    ('(' parameters=AnnotationParameters? ')')?
	//;
	public MybatisPlusModelAnnotationElements getMybatisPlusModelAnnotationAccess() {
		return pMybatisPlusModelAnnotation;
	}
	
	public ParserRule getMybatisPlusModelAnnotationRule() {
		return getMybatisPlusModelAnnotationAccess().getRule();
	}
	
	//// MyBatis-Plus 字段注解
	//MybatisPlusFieldAnnotation:
	//    '@' name=MybatisPlusFieldType
	//    ('(' parameters=AnnotationParameters? ')')?
	//;
	public MybatisPlusFieldAnnotationElements getMybatisPlusFieldAnnotationAccess() {
		return pMybatisPlusFieldAnnotation;
	}
	
	public ParserRule getMybatisPlusFieldAnnotationRule() {
		return getMybatisPlusFieldAnnotationAccess().getRule();
	}
	
	//// Bean 验证注解
	//BeanValidationAnnotation:
	//    '@' name=BeanValidationType
	//    ('(' parameters=AnnotationParameters? ')')?
	//;
	public BeanValidationAnnotationElements getBeanValidationAnnotationAccess() {
		return pBeanValidationAnnotation;
	}
	
	public ParserRule getBeanValidationAnnotationRule() {
		return getBeanValidationAnnotationAccess().getRule();
	}
	
	//// Jackson 注解
	//JacksonAnnotation:
	//    '@' name=JacksonType
	//    ('(' parameters=AnnotationParameters? ')')?
	//;
	public JacksonAnnotationElements getJacksonAnnotationAccess() {
		return pJacksonAnnotation;
	}
	
	public ParserRule getJacksonAnnotationRule() {
		return getJacksonAnnotationAccess().getRule();
	}
	
	//// 注解参数，多个参数用逗号分隔
	//AnnotationParameters:
	//    annparameters+=Parameter (',' parameters+=Parameter)*
	//;
	public AnnotationParametersElements getAnnotationParametersAccess() {
		return pAnnotationParameters;
	}
	
	public ParserRule getAnnotationParametersRule() {
		return getAnnotationParametersAccess().getRule();
	}
	
	//// 注解参数键值对
	//Parameter:
	//    key=ID '=' value=Literal
	//;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	/////////////////////////
	//// 生成规则
	/////////////////////////
	//// 生成规则块，包含多个生成规则
	//GenerateSection:
	//    'generate' '{'
	//        rules+=GenerationRule+
	//    '}'
	//;
	public GenerateSectionElements getGenerateSectionAccess() {
		return pGenerateSection;
	}
	
	public ParserRule getGenerateSectionRule() {
		return getGenerateSectionAccess().getRule();
	}
	
	//// 生成规则类型：PO、DTO、VO
	//GenerationRule:
	//    PoRule | DtoRule | VoRule
	//;
	public GenerationRuleElements getGenerationRuleAccess() {
		return pGenerationRule;
	}
	
	public ParserRule getGenerationRuleRule() {
		return getGenerationRuleAccess().getRule();
	}
	
	//// PO 生成规则
	//PoRule:
	//    'po' 'for' model=[Model|ID] '{'
	//        (serializable='Serializable')?
	//        ('lombok:' lombokAnnotation+=LombokAnnotation*)?
	//        ('mybatis-plus:' mybatisPlusModelAnnotation+=MybatisPlusModelAnnotation*)?
	//        ('fieldAnnotations' '{' fieldAnns+=FieldAnnotation* '}')?
	//        ('fieldAdd' '{' addField+=PoAddField* '}')?
	//    '}'
	//;
	public PoRuleElements getPoRuleAccess() {
		return pPoRule;
	}
	
	public ParserRule getPoRuleRule() {
		return getPoRuleAccess().getRule();
	}
	
	//// DTO 生成规则
	//DtoRule:
	//    'dto' 'for' model=[Model|ID] '{'
	//        dtos+=DtoDefinition+
	//    '}'
	//;
	public DtoRuleElements getDtoRuleAccess() {
		return pDtoRule;
	}
	
	public ParserRule getDtoRuleRule() {
		return getDtoRuleAccess().getRule();
	}
	
	//// VO 生成规则
	//VoRule:
	//    'vo' 'for' model=[Model|ID] '{'
	//        vos+=VoDefinition+
	//    '}'
	//;
	public VoRuleElements getVoRuleAccess() {
		return pVoRule;
	}
	
	public ParserRule getVoRuleRule() {
		return getVoRuleAccess().getRule();
	}
	
	//// DTO 定义
	//DtoDefinition:
	//    'dto' name=ID '{'
	//        (serializable='Serializable')?
	//        ('lombok:' lombokAnnotation+=LombokAnnotation*)?
	//        ('fieldExclude' '{' (exclusions+=Exclusions* | ('excludeAll:' excludeAll=BOOL ';')) '}') ?
	//        ('fieldValidation' '{' fieldAnnotationsBlock=FieldValidationBlock '}')?
	//        ('fieldAdd' '{' addField+=DtoAddField* '}')?
	//    '}'
	//;
	public DtoDefinitionElements getDtoDefinitionAccess() {
		return pDtoDefinition;
	}
	
	public ParserRule getDtoDefinitionRule() {
		return getDtoDefinitionAccess().getRule();
	}
	
	//// VO 定义
	//VoDefinition:
	//    'vo' name=ID '{'
	//        (serializable='Serializable')?
	//        ('lombok:' lombokAnnotation+=LombokAnnotation*)?
	//        ('fieldExclude' '{' (exclusions+=Exclusions* | ('excludeAll:' excludeAll=BOOL ';')) '}') ?
	//        ('fieldJackson' '{' jacksons+=VoJackson* '}')?
	//        ('fieldAdd' '{' addField+=VoAddField* '}')?
	//    '}'
	//;
	public VoDefinitionElements getVoDefinitionAccess() {
		return pVoDefinition;
	}
	
	public ParserRule getVoDefinitionRule() {
		return getVoDefinitionAccess().getRule();
	}
	
	//// PO 字段注解
	//FieldAnnotation:
	//    '*' field=[Field|QualifiedName] ':' annList+=MybatisPlusFieldAnnotation*
	//;
	public FieldAnnotationElements getFieldAnnotationAccess() {
		return pFieldAnnotation;
	}
	
	public ParserRule getFieldAnnotationRule() {
		return getFieldAnnotationAccess().getRule();
	}
	
	//// DTO 字段验证块
	//FieldValidationBlock:
	//    {FieldValidationBlock}
	//    actionGlobal+=GlobalAction*
	//    actionLocal+=LocalLoopAction*
	//    actionSingle=SingleAction?
	//;
	public FieldValidationBlockElements getFieldValidationBlockAccess() {
		return pFieldValidationBlock;
	}
	
	public ParserRule getFieldValidationBlockRule() {
		return getFieldValidationBlockAccess().getRule();
	}
	
	//// 单个设置
	//SingleAction:
	//    'single:' '{' validations+=DtoValidation+ '}'
	//;
	public SingleActionElements getSingleActionAccess() {
		return pSingleAction;
	}
	
	public ParserRule getSingleActionRule() {
		return getSingleActionAccess().getRule();
	}
	
	//// 循环语句
	//LocalLoopAction:
	//    'local:''foreach' 'field' '{'
	//        varDeclarations+=VariableDeclaration*
	//        actions+=LocalAction+
	//    '}'
	//;
	public LocalLoopActionElements getLocalLoopActionAccess() {
		return pLocalLoopAction;
	}
	
	public ParserRule getLocalLoopActionRule() {
		return getLocalLoopActionAccess().getRule();
	}
	
	//// 全局设置
	//GlobalAction:
	//    'global:' 'set' 'to'  variable=[VariableDeclaration|ID] ';'
	//;
	public GlobalActionElements getGlobalActionAccess() {
		return pGlobalAction;
	}
	
	public ParserRule getGlobalActionRule() {
		return getGlobalActionAccess().getRule();
	}
	
	//// 注解动作
	//LocalAction:
	//    'if' 'field' condition=TypeCondition '{'
	//        'set' 'to' variable=[VariableDeclaration|ID] ';'
	//    '}'
	//;
	public LocalActionElements getLocalActionAccess() {
		return pLocalAction;
	}
	
	public ParserRule getLocalActionRule() {
		return getLocalActionAccess().getRule();
	}
	
	//// 类型条件
	//TypeCondition:
	//    OrTypeCondition
	//;
	public TypeConditionElements getTypeConditionAccess() {
		return pTypeCondition;
	}
	
	public ParserRule getTypeConditionRule() {
		return getTypeConditionAccess().getRule();
	}
	
	//// 或类型条件
	//OrTypeCondition:
	//    left=AndTypeCondition ('||' right+=AndTypeCondition)*
	//;
	public OrTypeConditionElements getOrTypeConditionAccess() {
		return pOrTypeCondition;
	}
	
	public ParserRule getOrTypeConditionRule() {
		return getOrTypeConditionAccess().getRule();
	}
	
	//// 与类型条件
	//AndTypeCondition:
	//    left=TypeEqualityCondition ('&&' right+=TypeEqualityCondition)*
	//;
	public AndTypeConditionElements getAndTypeConditionAccess() {
		return pAndTypeCondition;
	}
	
	public ParserRule getAndTypeConditionRule() {
		return getAndTypeConditionAccess().getRule();
	}
	
	//// 类型相等条件
	//TypeEqualityCondition:
	//    'type' ( isEqual='==' | isNotEqual='!=') type=Type
	//;
	public TypeEqualityConditionElements getTypeEqualityConditionAccess() {
		return pTypeEqualityCondition;
	}
	
	public ParserRule getTypeEqualityConditionRule() {
		return getTypeEqualityConditionAccess().getRule();
	}
	
	//// 变量声明
	//VariableDeclaration:
	//    'var' name=ID '=' annotation=BeanValidationAnnotation ';'
	//;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//// PO 添加字段
	//PoAddField:
	//    '+' properties=PropertyDeclaration
	//    (':' annotationList+=MybatisPlusFieldAnnotation*)?
	//;
	public PoAddFieldElements getPoAddFieldAccess() {
		return pPoAddField;
	}
	
	public ParserRule getPoAddFieldRule() {
		return getPoAddFieldAccess().getRule();
	}
	
	//// DTO 添加字段
	//DtoAddField:
	//    '+' properties=PropertyDeclaration
	//    (':' annotationList+=BeanValidationAnnotation*)?
	//;
	public DtoAddFieldElements getDtoAddFieldAccess() {
		return pDtoAddField;
	}
	
	public ParserRule getDtoAddFieldRule() {
		return getDtoAddFieldAccess().getRule();
	}
	
	//// VO 添加字段
	//VoAddField:
	//    '+' properties=PropertyDeclaration
	//    (':' annotationList+=JacksonAnnotation*)?
	//;
	public VoAddFieldElements getVoAddFieldAccess() {
		return pVoAddField;
	}
	
	public ParserRule getVoAddFieldRule() {
		return getVoAddFieldAccess().getRule();
	}
	
	//// 排除字段
	//Exclusions:
	//    '-' field=[Field|QualifiedName]
	//;
	public ExclusionsElements getExclusionsAccess() {
		return pExclusions;
	}
	
	public ParserRule getExclusionsRule() {
		return getExclusionsAccess().getRule();
	}
	
	//// DTO 验证规则
	//DtoValidation:
	//    '*' field=[Field|QualifiedName] ':' annList+=BeanValidationAnnotation*
	//;
	public DtoValidationElements getDtoValidationAccess() {
		return pDtoValidation;
	}
	
	public ParserRule getDtoValidationRule() {
		return getDtoValidationAccess().getRule();
	}
	
	//// VO Jackson 注解规则
	//VoJackson:
	//    '*' field=[Field|QualifiedName] ':' annList+=JacksonAnnotation*
	//;
	public VoJacksonElements getVoJacksonAccess() {
		return pVoJackson;
	}
	
	public ParserRule getVoJacksonRule() {
		return getVoJacksonAccess().getRule();
	}
	
	/////////////////////////
	//// 属性声明
	/////////////////////////
	//// 属性声明，包含类型、名称和默认值
	//PropertyDeclaration:
	//    static = 'static'?
	//    final = 'final'?
	//    (type=Type)
	//    name=ID
	//    (defaultClause=DefaultClause)?
	//;
	public PropertyDeclarationElements getPropertyDeclarationAccess() {
		return pPropertyDeclaration;
	}
	
	public ParserRule getPropertyDeclarationRule() {
		return getPropertyDeclarationAccess().getRule();
	}
	
	//// 默认值子句
	//DefaultClause:
	//    '=' Literal
	//;
	public DefaultClauseElements getDefaultClauseAccess() {
		return pDefaultClause;
	}
	
	public ParserRule getDefaultClauseRule() {
		return getDefaultClauseAccess().getRule();
	}
	
	/////////////////////////
	//// 映射规则
	/////////////////////////
	//// 模型到 VO 的映射规则
	//Mapping:
	//    ModelToVOMapping | DTOToModelMapping
	//;
	public MappingElements getMappingAccess() {
		return pMapping;
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}
	
	//// 模型到 VO 的映射
	//ModelToVOMapping:
	//    'mapping' 'from' 'Model' source=[Model|ID]
	//    'to' 'VO' target=[VoDefinition|ID] '{'
	//        (rules+=MappingRule* | 'target.all' '=' 'source.all' ';')
	//    '}'
	//;
	public ModelToVOMappingElements getModelToVOMappingAccess() {
		return pModelToVOMapping;
	}
	
	public ParserRule getModelToVOMappingRule() {
		return getModelToVOMappingAccess().getRule();
	}
	
	//// DTO 到模型的映射
	//DTOToModelMapping:
	//    'mapping' 'from' 'DTO' source=[DtoDefinition|ID]
	//    'to' 'Model' target=[Model|ID] '{'
	//        (rules+=MappingRule* | 'target.all' '=' 'source.all' ';')
	//    '}'
	//;
	public DTOToModelMappingElements getDTOToModelMappingAccess() {
		return pDTOToModelMapping;
	}
	
	public ParserRule getDTOToModelMappingRule() {
		return getDTOToModelMappingAccess().getRule();
	}
	
	//// 映射规则
	//MappingRule:
	//    'target.' targetField=[Field|QualifiedName]
	//    '=' ('source.' sourceField=[Field|QualifiedName]
	//    | default=Literal ) ';'
	//;
	public MappingRuleElements getMappingRuleAccess() {
		return pMappingRule;
	}
	
	public ParserRule getMappingRuleRule() {
		return getMappingRuleAccess().getRule();
	}
	
	//// Bean 验证注解枚举
	//enum BeanValidationType:
	//    AssertFalse = 'AssertFalse' |
	//    AssertTrue = 'AssertTrue' |
	//    DecimalMax = 'DecimalMax' |
	//    DecimalMin = 'DecimalMin' |
	//    Digits = 'Digits' |
	//    Email = 'Email' |
	//    Future = 'Future' |
	//    FutureOrPresent = 'FutureOrPresent' |
	//    Max = 'Max' |
	//    Min = 'Min' |
	//    Negative = 'Negative' |
	//    NegativeOrZero = 'NegativeOrZero' |
	//    NotBlank = 'NotBlank' |
	//    NotEmpty = 'NotEmpty' |
	//    NotNull = 'NotNull' |
	//    Null = 'Null' |
	//    Past = 'Past' |
	//    PastOrPresent = 'PastOrPresent' |
	//    Pattern = 'Pattern' |
	//    Positive = 'Positive' |
	//    PositiveOrZero = 'PositiveOrZero' |
	//    Size = 'Size'
	//;
	public BeanValidationTypeElements getBeanValidationTypeAccess() {
		return eBeanValidationType;
	}
	
	public EnumRule getBeanValidationTypeRule() {
		return getBeanValidationTypeAccess().getRule();
	}
	
	//// MyBatis-Plus 模型注解枚举
	//enum MybatisPlusModelType:
	//    KeySequence = 'KeySequence' |
	//    TableName = 'TableName'
	//;
	public MybatisPlusModelTypeElements getMybatisPlusModelTypeAccess() {
		return eMybatisPlusModelType;
	}
	
	public EnumRule getMybatisPlusModelTypeRule() {
		return getMybatisPlusModelTypeAccess().getRule();
	}
	
	//// MyBatis-Plus 字段注解枚举
	//enum MybatisPlusFieldType:
	//    OrderBy = 'OrderBy' |
	//    TableField = 'TableField' |
	//    TableId = 'TableId' |
	//    TableLogic = 'TableLogic' |
	//    Version = 'Version'
	//;
	public MybatisPlusFieldTypeElements getMybatisPlusFieldTypeAccess() {
		return eMybatisPlusFieldType;
	}
	
	public EnumRule getMybatisPlusFieldTypeRule() {
		return getMybatisPlusFieldTypeAccess().getRule();
	}
	
	//// Jackson 注解枚举
	//enum JacksonType:
	//    JsonAlias = 'JsonAlias' |
	//    JsonAnyGetter = 'JsonAnyGetter' |
	//    JsonAnySetter = 'JsonAnySetter' |
	//    JsonAutoDetect = 'JsonAutoDetect' |
	//    JsonDeserialize = 'JsonDeserialize' |
	//    JsonFormat = 'JsonFormat' |
	//    JsonIgnore = 'JsonIgnore' |
	//    JsonIgnoreProperties = 'JsonIgnoreProperties' |
	//    JsonInclude = 'JsonInclude' |
	//    JsonRootName = 'JsonRootName' |
	//    JsonSerialize = 'JsonSerialize' |
	//    JsonTypeInfo = 'JsonTypeInfo' |
	//    JsonUnwrapped = 'JsonUnwrapped' |
	//    JsonValue = 'JsonValue' |
	//    JsonView = 'JsonView' |
	//    JsonProperty = 'JsonProperty'
	//;
	public JacksonTypeElements getJacksonTypeAccess() {
		return eJacksonType;
	}
	
	public EnumRule getJacksonTypeRule() {
		return getJacksonTypeAccess().getRule();
	}
	
	//// Lombok 注解枚举
	//enum LombokType:
	//    Accessors = 'Accessors' |
	//    AllArgsConstructor = 'AllArgsConstructor' |
	//    Builder = 'Builder' |
	//    Data = 'Data' |
	//    EqualsAndHashCode = 'EqualsAndHashCode' |
	//    Getter = 'Getter' |
	//    NoArgsConstructor = 'NoArgsConstructor' |
	//    RequiredArgsConstructor = 'RequiredArgsConstructor' |
	//    Setter = 'Setter' |
	//    Singular = 'Singular' |
	//    SuperBuilder = 'SuperBuilder' |
	//    ToString = 'ToString'
	//;
	public LombokTypeElements getLombokTypeAccess() {
		return eLombokType;
	}
	
	public EnumRule getLombokTypeRule() {
		return getLombokTypeAccess().getRule();
	}
	
	/////////////////////////
	//// 数据类型
	/////////////////////////
	//// 数组类型
	//// 类型定义，包括内置类型和自定义类型
	//Type:
	//    GenericDataType | ArrayType | SimpleType | NormalType
	//;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//SimpleType:
	//    builtInType=BuiltInType
	//;
	public SimpleTypeElements getSimpleTypeAccess() {
		return pSimpleType;
	}
	
	public ParserRule getSimpleTypeRule() {
		return getSimpleTypeAccess().getRule();
	}
	
	//NormalType:
	//    customType=ID  // 拆分为内置类型和自定义类型引用
	//;
	public NormalTypeElements getNormalTypeAccess() {
		return pNormalType;
	}
	
	public ParserRule getNormalTypeRule() {
		return getNormalTypeAccess().getRule();
	}
	
	//GenericDataType:
	//    containerTypeName=ID LESS containedTypeName=Type GREATER
	//;
	public GenericDataTypeElements getGenericDataTypeAccess() {
		return pGenericDataType;
	}
	
	public ParserRule getGenericDataTypeRule() {
		return getGenericDataTypeAccess().getRule();
	}
	
	//ArrayType:
	//    elementType=(SimpleType | NormalType) LBRACKET RBRACKET
	//;
	public ArrayTypeElements getArrayTypeAccess() {
		return pArrayType;
	}
	
	public ParserRule getArrayTypeRule() {
		return getArrayTypeAccess().getRule();
	}
	
	//// 内置类型枚举
	//enum BuiltInType:
	//    int = 'int' |
	//    long = 'long' |
	//    Integer = 'Integer' |
	//    Double = 'Double' |
	//    String = 'String'|
	//    LocalDate = 'LocalDate'|
	//    LocalDateTime = 'LocalDateTime' |
	//    BigDecimal = 'BigDecimal'
	//;
	public BuiltInTypeElements getBuiltInTypeAccess() {
		return eBuiltInType;
	}
	
	public EnumRule getBuiltInTypeRule() {
		return getBuiltInTypeAccess().getRule();
	}
	
	//// 字面量类型
	//Literal:
	//    STRING | INT | DECIMAL | BOOL  // 支持浮点数
	//;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//// 覆盖 INT 终端定义
	//@Override
	//terminal INT returns ecore::EInt:
	//    ('0'..'9')+
	//;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//// 十进制数终端定义
	//terminal DECIMAL: INT '.' INT;
	public TerminalRule getDECIMALRule() {
		return tDECIMAL;
	}
	
	//// 布尔值终端定义
	//BOOL:
	//    'true' | 'false'
	//;
	public BOOLElements getBOOLAccess() {
		return pBOOL;
	}
	
	public ParserRule getBOOLRule() {
		return getBOOLAccess().getRule();
	}
	
	//// 覆盖 ID 终端定义
	//@Override
	//terminal ID:
	//    ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
	//;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal LESS: '<';
	public TerminalRule getLESSRule() {
		return tLESS;
	}
	
	//terminal GREATER: '>';
	public TerminalRule getGREATERRule() {
		return tGREATER;
	}
	
	//terminal LBRACKET: '[';
	public TerminalRule getLBRACKETRule() {
		return tLBRACKET;
	}
	
	//terminal RBRACKET: ']';
	public TerminalRule getRBRACKETRule() {
		return tRBRACKET;
	}
	
	//// 限定名称
	//QualifiedName:
	//    ID ('.' ID)*
	//;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
